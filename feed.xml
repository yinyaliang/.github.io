<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-08-17T16:09:52+08:00</updated><id>/feed.xml</id><title type="html">Flash Boxer</title><subtitle>An amazing website.</subtitle><author><name>Your Name</name></author><entry><title type="html">docker 入门 – 02</title><link href="/docker-02/" rel="alternate" type="text/html" title="docker 入门 – 02" /><published>2022-08-17T00:00:00+08:00</published><updated>2022-08-17T00:00:00+08:00</updated><id>/docker-02</id><content type="html" xml:base="/docker-02/"><![CDATA[<p>自定义镜像 数据卷  仓库</p>

<h4 id="自定义镜像">自定义镜像</h4>

<p>需要写Dockerfile文件 ,如果名字不叫Dockerfile,则需要使用-f来指定文件</p>

<p>常用命令:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM:                          指定基镜像
MAINTAINER:                    维护者信息
RUN:                           在临时容器里执行的操作系统命令
ADD file /path/ :              把物理机里file拷贝到镜像的制定目录 /path
COPY file /path/ :             把物理机里file拷贝到镜像的制定目录 /path
ENV:                           指定变量
USER:                          指定容器内部以哪个用户运行进程
VOLUME:                        指定数据卷
EXPOSE:                        指定镜像容器所使用的端口，只是一个标记
CMD:                           指定镜像创建出来的容器运行在什么进程
</code></pre></div></div>

<h4 id="创建一个可以执行ipconfig的centos镜像">创建一个可以执行ipconfig的centos镜像</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>yun <span class="nt">-y</span> <span class="nb">install </span>net-tools <span class="nt">-y</span>
<span class="k">CMD</span><span class="s"> ["/bin/bash"]</span>
</code></pre></div></div>

<p>构建命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:ifconfig <span class="nt">-f</span> Dockerfile
</code></pre></div></div>

<p>使用命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:ifconfig <span class="nb">.</span>
</code></pre></div></div>

<p>输出</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM centos:7
7: Pulling from library/centos
2d473b07cdd5: Pull <span class="nb">complete 
</span>Digest: sha256:c73f515d06b0fa07bb18d8202035e739a494ce760aa73129f60f4bf2bd22b407
Status: Downloaded newer image <span class="k">for </span>centos:7
 <span class="nt">---</span><span class="o">&gt;</span> eeb6ee3f44bd
Step 2/4 : MAINTAINER yaliang.yin@eeoa.com
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>e818620bd59b
Removing intermediate container e818620bd59b
 <span class="nt">---</span><span class="o">&gt;</span> 3bb5dd251ef3
Step 3/4 : RUN yum <span class="nb">install </span>net-tools <span class="nt">-y</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>ec51a9326dd6
Loaded plugins: fastestmirror, ovl
Determining fastest mirrors
 <span class="k">*</span> base: mirrors.bfsu.edu.cn
 <span class="k">*</span> extras: mirrors.bfsu.edu.cn
 <span class="k">*</span> updates: mirrors.bfsu.edu.cn
Resolving Dependencies
<span class="nt">--</span><span class="o">&gt;</span> Running transaction check
<span class="nt">---</span><span class="o">&gt;</span> Package net-tools.x86_64 0:2.0-0.25.20131004git.el7 will be installed
<span class="nt">--</span><span class="o">&gt;</span> Finished Dependency Resolution

Dependencies Resolved

<span class="o">================================================================================</span>
 Package         Arch         Version                          Repository  Size
<span class="o">================================================================================</span>
Installing:
 net-tools       x86_64       2.0-0.25.20131004git.el7         base       306 k

Transaction Summary
<span class="o">================================================================================</span>
Install  1 Package

Total download size: 306 k
Installed size: 917 k
Downloading packages:
warning: /var/cache/yum/x86_64/7/base/packages/net-tools-2.0-0.25.20131004git.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY
Public key <span class="k">for </span>net-tools-2.0-0.25.20131004git.el7.x86_64.rpm is not installed
Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
Importing GPG key 0xF4A80EB5:
 Userid     : <span class="s2">"CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;"</span>
 Fingerprint: 6341 ab27 53d7 8a78 a7c2 7bb1 24c6 a8a7 f4a8 0eb5
 Package    : centos-release-7-9.2009.0.el7.centos.x86_64 <span class="o">(</span>@CentOS<span class="o">)</span>
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
Running transaction check
Running transaction <span class="nb">test
</span>Transaction <span class="nb">test </span>succeeded
Running transaction
  Installing : net-tools-2.0-0.25.20131004git.el7.x86_64                    1/1 
  Verifying  : net-tools-2.0-0.25.20131004git.el7.x86_64                    1/1 

Installed:
  net-tools.x86_64 0:2.0-0.25.20131004git.el7                                   

Complete!
Removing intermediate container ec51a9326dd6
 <span class="nt">---</span><span class="o">&gt;</span> 323418cab375
Step 4/4 : CMD <span class="o">[</span><span class="s2">"/bin/bash"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>5bd2a3ebeaef
Removing intermediate container 5bd2a3ebeaef
 <span class="nt">---</span><span class="o">&gt;</span> 9d02a810de55
Successfully built 9d02a810de55
Successfully tagged centos:ifconfig
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@docker:/tmp/docker# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:ifconfig
<span class="o">[</span>root@62d870933f79 /]# ifconfig
eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.2  netmask 255.255.255.0  broadcast 192.168.0.255
        ether 02:42:c0:a8:00:02  txqueuelen 0  <span class="o">(</span>Ethernet<span class="o">)</span>
        RX packets 9  bytes 979 <span class="o">(</span>979.0 B<span class="o">)</span>
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  <span class="o">(</span>Local Loopback<span class="o">)</span>
        RX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre></div></div>

<h4 id="自定义nginx镜像">自定义nginx镜像</h4>

<p>拷贝repo文件</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>yum <span class="nt">-y</span> <span class="nb">install </span>epel-release
<span class="k">RUN </span>yum <span class="nt">-y</span> update
<span class="k">RUN </span>yum <span class="nt">-y</span> <span class="nb">install </span>nginx
<span class="k">ADD</span><span class="s"> index.html /usr/share/nginx/html</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">CMD</span><span class="s"> ["nginx","-g","daemon off;"]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>index.html
nginx
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:nginx <span class="nb">.</span>
</code></pre></div></div>

<p>运行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span><span class="o">=</span>nginx <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-p80</span>:80 centos:nginx
</code></pre></div></div>

<p>访问测试</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# curl 192.168.122.100
nginx
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker <span class="nb">rm</span> <span class="nt">-f</span> d3
d3
</code></pre></div></div>

<h4 id="add和copy的区别">ADD和COPY的区别</h4>

<p>ADD 会解压</p>

<p>COPY 不解压</p>

<h4 id="user命令的使用">USER命令的使用</h4>

<p>docker file</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>useradd zabbix
<span class="k">USER</span><span class="s"> zabbix</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">--name</span><span class="o">=</span>user <span class="nt">-it</span> centos:user
<span class="o">[</span>zabbix@d783a47f5cad /]<span class="nv">$ </span><span class="nb">whoami
</span>zabbix
</code></pre></div></div>

<p>指定用户运行</p>

<p>–user</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker <span class="nb">exec</span> <span class="nt">-it</span> <span class="nt">--user</span><span class="o">=</span>root user /bin/bash
<span class="o">[</span>root@d783a47f5cad /]# <span class="nb">whoami
</span>root
</code></pre></div></div>

<h4 id="使用env指定变量">使用ENV指定变量</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@docker ~]# cat Dockerfile 
<span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">ENV</span><span class="s"> zabbixdir=/tmp</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:env <span class="nb">.</span>
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:env
<span class="o">[</span>root@c5e757373d8f /]# <span class="nb">echo</span> <span class="nv">$zabbixdir</span>
/tmp
</code></pre></div></div>

<h4 id="数据卷">数据卷</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">VOLUME</span><span class="s"> ["/data1"]</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<p>绑定data1到物理机的随机目录</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:volume
<span class="o">[</span>root@58fa1b19ff20 /]# 

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker inspect 58 | <span class="nb">grep</span> <span class="nt">-A5</span>  Mounts
        <span class="s2">"Mounts"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"Type"</span>: <span class="s2">"volume"</span>,
                <span class="s2">"Name"</span>: <span class="s2">"113269358f756253dd6cd59063f91f3427438ae6121c981451a476fd50015506"</span>,
                <span class="s2">"Source"</span>: <span class="s2">"/var/lib/docker/volumes/113269358f756253dd6cd59063f91f3427438ae6121c981451a476fd50015506/_data"</span>,
                <span class="s2">"Destination"</span>: <span class="s2">"/data1"</span>,
</code></pre></div></div>

<h2 id="使用registry-搭建私有仓库">使用registry 搭建私有仓库</h2>

<p>不做介绍</p>

<h2 id="使用harbor搭建私有仓库">使用harbor搭建私有仓库</h2>

<p>安装harbor需要docker-compose</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nt">-y</span> <span class="nb">install </span>epel-release
yum <span class="nt">-y</span> update
yum <span class="nt">-y</span> <span class="nb">install </span>docker-compose
</code></pre></div></div>

<p>看下版本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose -v
</code></pre></div></div>

<p>修改docker的配置</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/docker/daemon.json
<span class="o">{</span>
  <span class="s2">"registry-mirrors"</span>: <span class="o">[</span><span class="s2">"http://192.168.122.100"</span><span class="o">]</span>
<span class="o">}</span>

</code></pre></div></div>

<p>重启docker</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart docker
</code></pre></div></div>

<p>下载</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /tmp
wget https://github.com/goharbor/harbor/releases/download/v2.5.3/harbor-offline-installer-v2.5.3.tgz
<span class="nb">tar </span>zxvfp harbor-offline-installer-v2.5.3.tgz
<span class="nb">cd </span>harbor
docker load <span class="nt">-i</span> harbor.v2.5.3.tar.gz
./prepare
<span class="nb">cp </span>harbor.yml.tmpl harbor.yml
</code></pre></div></div>

<p>编辑harbor.yml文件,将hostname修改为本机名称</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 5 hostname: docker
</code></pre></div></div>

<p>注释以下几行</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 15 #  port: 443
 16   # The path of cert and key files for nginx
 17 #  certificate: /your/certificate/path
 18 #  private_key: /your/private/key/path
</code></pre></div></div>

<p>修改默认密码,默认为Harbor12345</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>34 harbor_admin_password: docker
</code></pre></div></div>

<p>安装</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./install.sh 
</code></pre></div></div>

<p>访问</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.122.100
</code></pre></div></div>

<p>修改 /etc/docker/daemon.json,增加</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"insecure-registries"</span>:[<span class="s2">"192.168.122.100"</span><span class="o">]</span>
</code></pre></div></div>

<p>重启docker</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart docker
</code></pre></div></div>

<p>登录仓库</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker harbor]# docker login 192.168.122.100
Username: yinyaliang
Password: 
WARNING! Your password will be stored unencrypted <span class="k">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
<span class="o">[</span>root@docker harbo
</code></pre></div></div>

<p>推送镜像</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker tag centos:volume 192.168.122.100/cka/centos:volume
docker push 192.168.122.100/cka/centos:volume
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[自定义镜像 数据卷 仓库]]></summary></entry><entry><title type="html">ubuntu install zabbix agent2</title><link href="/ubuntu-install-zabbix-agent2/" rel="alternate" type="text/html" title="ubuntu install zabbix agent2" /><published>2022-08-17T00:00:00+08:00</published><updated>2022-08-17T00:00:00+08:00</updated><id>/ubuntu-install-zabbix-agent2</id><content type="html" xml:base="/ubuntu-install-zabbix-agent2/"><![CDATA[<p>ubuntu install zabbix agent2</p>

<h4 id="安装依赖">安装依赖</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    apt <span class="nb">install </span>gcc
    apt <span class="nb">install </span>libpcre3 libpcre3-dev
    apt-get <span class="nb">install </span>zlib1g-dev
    apt <span class="nb">install </span>make
</code></pre></div></div>

<h4 id="golang-安装">golang 安装</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://go.dev/doc/install
</code></pre></div></div>

<h4 id="创建组和用户">创建组和用户</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    groupadd <span class="nt">-g</span> 2210 zabbix
    useradd <span class="nt">-u</span> 2210 zabbix <span class="nt">-g</span> zabbix
</code></pre></div></div>

<h4 id="创建目录及赋权">创建目录及赋权</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/scripts/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/scripts/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/logs/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/logs/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/config/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/config/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/run/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/run/oss/zabbix
    
    <span class="nb">chown </span>zabbix:zabbix /data/config/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/logs/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/scripts/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/run/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    
    <span class="nb">chown </span>zabbix: <span class="nt">-R</span> /data/logs/oss/zabbix/
    <span class="nb">chown </span>zabbix: <span class="nt">-R</span> /data/run/oss/zabbix

</code></pre></div></div>

<h4 id="下载源文件">下载源文件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">cd</span> /tmp
    wget https://cdn.zabbix.com/zabbix/sources/stable/6.0/zabbix-6.0.0.tar.gz
    <span class="nb">tar </span>zxvf zabbix-6.0.0.tar.gz
    <span class="nb">cd </span>zabbix-6.0.0/

</code></pre></div></div>

<h4 id="编译安装">编译安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="c"># 5.4版本</span>
  <span class="c">#  ./configure --prefix=/usr/local/zabbix-6.0.0 --enable-agent --enable-agent2 --disable-dependency-tracking</span>
   ./configure <span class="nt">--prefix</span><span class="o">=</span>/usr/local/zabbix-6.0.0 <span class="nt">--enable-agent</span> <span class="nt">--enable-agent2</span> 
    make <span class="o">&amp;&amp;</span> make <span class="nb">install</span> 
</code></pre></div></div>

<h4 id="目录软件">目录软件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix-6.0.0 /usr/local/zabbix
    <span class="nb">ln</span> <span class="nt">-s</span> /data/scripts/oss/zabbix /usr/local/zabbix/scripts
    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix/sbin/zabbix_agentd /usr/local/bin/zabbix_agentd
    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix/sbin/zabbix_agent2 /usr/local/bin/zabbix_agent2
    
    <span class="nb">cd</span> /usr/local/zabbix
    <span class="nb">mv </span>etc/<span class="k">*</span> /data/config/oss/zabbix/
    <span class="nb">ln</span> <span class="nt">-s</span> /data/config/oss/zabbix/ etc

</code></pre></div></div>

<h4 id="zabbix-配置文件">Zabbix 配置文件</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    配置启动文件:/data/config/oss/zabbix/zabbix_agentd.conf
    	<span class="nv">PidFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agentd.pid
    	<span class="nv">LogFile</span><span class="o">=</span>/data/logs/oss/zabbix/zabbix_agentd.log
    	<span class="nv">AllowKey</span><span class="o">=</span>system.run[<span class="k">*</span><span class="o">]</span>
    	<span class="nv">ListenPort</span><span class="o">=</span>31350
    	<span class="nv">Hostname</span><span class="o">=</span>glb-ubuntu
    	<span class="nv">BufferSize</span><span class="o">=</span>1000
    	<span class="nv">Timeout</span><span class="o">=</span>3
    	<span class="nv">Include</span><span class="o">=</span>/data/config/oss/zabbix/zabbix_agentd.conf.d/<span class="k">*</span>.conf
    	<span class="nv">ListenIP</span><span class="o">=</span>10.0.9.150
    	<span class="nv">ServerActive</span><span class="o">=</span>10.0.2.39:31351
    	<span class="nv">Server</span><span class="o">=</span>10.0.2.39
</code></pre></div></div>

<h4 id="zabbix2-配置文件">Zabbix2 配置文件</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PidFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agent2.pid
<span class="nv">LogFile</span><span class="o">=</span>/data/logs/oss/zabbix/zabbix_agent2.log
<span class="nv">Server</span><span class="o">=</span>10.0.2.39,10.0.2.40
<span class="nv">ListenPort</span><span class="o">=</span>31350
<span class="nv">ListenIP</span><span class="o">=</span>10.0.2.34
<span class="nv">ServerActive</span><span class="o">=</span>10.0.2.39:31351<span class="p">;</span>10.0.2.40:31351
<span class="nv">Hostname</span><span class="o">=</span>oif-ozw3
<span class="nv">Timeout</span><span class="o">=</span>3
<span class="nv">Include</span><span class="o">=</span>/data/config/oss/zabbix/zabbix_agentd.conf.d/<span class="k">*</span>.conf
<span class="nv">ControlSocket</span><span class="o">=</span>/data/run/oss/zabbix/agent.sock
</code></pre></div></div>

<h4 id="systemd-配置-agentd">SYSTEMD 配置 agentd</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="o">[</span>Unit]
	<span class="nv">Description</span><span class="o">=</span>Zabbix Agent
	<span class="nv">After</span><span class="o">=</span>syslog.target
	<span class="nv">After</span><span class="o">=</span>network.target

	<span class="o">[</span>Service]
	<span class="nv">Type</span><span class="o">=</span>forking
	<span class="nv">User</span><span class="o">=</span>root
	<span class="nv">Group</span><span class="o">=</span>root
	<span class="nv">Environment</span><span class="o">=</span><span class="s2">"CONFFILE=/data/config/oss/zabbix/zabbix_agentd.conf"</span>
	<span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/zabbix_agentd <span class="nt">-c</span> <span class="nv">$CONFFILE</span>
	<span class="nv">PIDFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agentd.pid
	<span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT

	<span class="o">[</span>Install]
	<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<h4 id="systemd-配置-agent2">SYSTEMD 配置 agent2</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span>Unit]
    <span class="nv">Description</span><span class="o">=</span>Zabbix Agent
    <span class="nv">After</span><span class="o">=</span>syslog.target
    <span class="nv">After</span><span class="o">=</span>network.target

    <span class="o">[</span>Service]
<span class="c">#    Type=forking   会卡住,取消</span>
    <span class="nv">User</span><span class="o">=</span>root
    <span class="nv">Group</span><span class="o">=</span>root
    <span class="nv">Environment</span><span class="o">=</span><span class="s2">"CONFFILE=/data/config/oss/zabbix/zabbix_agent2.conf"</span>
    <span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/zabbix_agent2 <span class="nt">-c</span> <span class="nv">$CONFFILE</span> 
    <span class="nv">PIDFile</span><span class="o">=</span>/data/run/oss/zabbix/agent.sock
    <span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT

    <span class="o">[</span>Install]
    <span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<h4 id="重载">重载</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    systemctl daemon-reload
</code></pre></div></div>

<h4 id="相关命令">相关命令</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    systemctl start zabbix_agent2.service
    systemctl restart zabbix_agent2.service
    systemctl stop zabbix_agent2.service
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Application" /><summary type="html"><![CDATA[ubuntu install zabbix agent2]]></summary></entry><entry><title type="html">`Centos 更新Glibc `</title><link href="/centos-update-glibc/" rel="alternate" type="text/html" title="`Centos 更新Glibc `" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/centos-update-glibc</id><content type="html" xml:base="/centos-update-glibc/"><![CDATA[<p>写CBPF需要更新系统的Glibc</p>

<h4 id="安装centos-release-scl">安装centos-release-scl</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum install centos-release-scl
</code></pre></div></div>

<h4 id="安装7版本的devtoolset">安装7版本的devtoolset</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum install devtoolset-7-gcc*
</code></pre></div></div>

<h4 id="激活">激活</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scl enable devtoolset-7 bash
</code></pre></div></div>

<h4 id="查看gcc版本">查看gcc版本</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -v
</code></pre></div></div>

<h4 id="下载安装包">下载安装包</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp
wget https://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz
tar xf glibc-2.23.tar.gz
cd glibc-2.23/
mkdir glibc-build
cd glibc-build 
</code></pre></div></div>

<h4 id="安装">安装</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>../configure --prefix=/usr
make
make install
</code></pre></div></div>

<h4 id="验证">验证</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd --version
ldd (GNU libc) 2.23

Copyright (C) 2016 Free Software Foundation, Inc.

This is free software; see the source for copying conditions.  There is NO

warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Roland McGrath and Ulrich Drepper.
</code></pre></div></div>

<h4 id="排错">排错</h4>
<p>1、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenv.c:279:6: error: suggest explicit braces to avoid ambiguous ‘else’ [-Werror=dangling-else]
   if (ep != NULL)
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>增加{}
</code></pre></div></div>

<p>2、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>../sysdeps/ieee754/dbl-64/e_pow.c:469:13: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
       if (n &lt;&lt; (k - 20))
           ~~^~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:471:17: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
       return (n &lt;&lt; (k - 21)) ? -1 : 1;
              ~~~^~~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:477:9: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
   if (m &lt;&lt; (k + 12))
       ~~^~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:479:13: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
   return (m &lt;&lt; (k + 11)) ? -1 : 1;
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> if (n &lt;&lt; (k - 20)!=0)

 (n &lt;&lt; (k - 21)!=0) ? -1 : 1;

 (m &lt;&lt; (k + 12)!=0)

 (m &lt;&lt; (k + 11)!=0) ? -1 : 1;
</code></pre></div></div>

<p>3、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpc_parse.c: In function ‘get_prog_declaration’:
rpc_parse.c:543:23: error: ‘%d’ directive writing between 1 and 10 bytes into a region of size 7 [-Werror=format-overflow=]
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
                       ^~
rpc_parse.c:543:20: note: directive argument in the range [1, 2147483647]
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
                    ^~~~~~
rpc_parse.c:543:5: note: ‘sprintf’ output between 5 and 14 bytes into a destination of size 10
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sprintf (name, "%s%d", ARGNAME, (short)num)
</code></pre></div></div>

<p>4、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nis_call.c:682:6: error: suggest explicit braces to avoid ambiguous ‘else’ [-Werror=dangling-else]
   if (*loc != NULL)
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (*loc != NULL)
{ 
  for (i = 1; i &lt; 16; ++i)
    if (nis_server_cache[i] == NULL)
  {
    loc = &amp;nis_server_cache[i];
    break;
  }
    else if ((*loc)-&gt;uses &gt; nis_server_cache[i]-&gt;uses
         || ((*loc)-&gt;uses == nis_server_cache[i]-&gt;uses
         &amp;&amp; (*loc)-&gt;expires &gt; nis_server_cache[i]-&gt;expires))
  loc = &amp;nis_server_cache[i];
}
</code></pre></div></div>

<p>5、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nss_nisplus/nisplus-alias.c:300:12: error: argument 1 null where non-null expected [-Werror=nonnull]
   char buf[strlen (name) + 9 + tablename_len];
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>char buf[tablename_len + 9];
snprintf (buf, sizeof (buf), "[name=],%s", tablename_val);
</code></pre></div></div>

<p>6、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gawk '/\.gnu\.glibc-stub\./ { \
	  sub(/\.gnu\.glibc-stub\./, "", $2); \
	  stubs[$2] = 1; } \
	END { for (s in stubs) print "#define __stub_" s }' &gt; /tmp/glibc-2.23/glibc-build/math/stubsT
gawk: error while loading shared libraries: /lib64/libm.so.6: invalid ELF header
make[2]: *** [/tmp/glibc-2.23/glibc-build/math/stubs] Error 127
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /lib64
unlink libm.so.6
ln -s libm-2.23.so libm.so.6
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Linux" /><summary type="html"><![CDATA[写CBPF需要更新系统的Glibc]]></summary></entry><entry><title type="html">`Python中的 __call__`</title><link href="/python-call/" rel="alternate" type="text/html" title="`Python中的 __call__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-call</id><content type="html" xml:base="/python-call/"><![CDATA[<p>如果python中的一个类定义了 <strong>call</strong> 方法，那么这个类它的实例就可以作为函数调用,也就是实现了 () 运算符，即可调用对象协议</p>

<h3 id="code">code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>


<span class="n">a</span> <span class="o">=</span> <span class="n">TmpTest</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
<span class="mi">4</span> <span class="mi">5</span>
</code></pre></div></div>

<p>在本文中不讨论装饰部分的内容，借用装饰器来讲解一个__call__方法的使用，如果需要将一个类作为装饰器，那需要为这个类实现__call__方法，一个使用__call__来实现类装饰器的例子</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">func</span><span class="o">=</span><span class="n">func</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">result</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>


<span class="o">@</span><span class="n">TmpTest</span>
<span class="k">def</span> <span class="nf">add_num</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>

<span class="k">print</span><span class="p">(</span><span class="n">add_num</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="mi">1</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[如果python中的一个类定义了 call 方法，那么这个类它的实例就可以作为函数调用,也就是实现了 () 运算符，即可调用对象协议]]></summary></entry><entry><title type="html">`Python中的 __enter__ __exit__`</title><link href="/python-enter-exit/" rel="alternate" type="text/html" title="`Python中的 __enter__ __exit__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-enter-exit</id><content type="html" xml:base="/python-enter-exit/"><![CDATA[<p>在python中实现了__enter__和__exit__方法，即支持上下文管理器协议。上下文管理器就是支持上下文管理器协议的对象，它是为了with而生。当with语句在开始运行时，会在上下文管理器对象上调用__enter__方法。with语句运行结束后，会在上下文管理器对象上调用__exit__方法</p>

<h3 id="语法">语法</h3>
<p>with的语法</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">EXPR</span> <span class="k">as</span> <span class="n">VAR</span><span class="p">:</span>
    <span class="n">BLOCK</span>
</code></pre></div></div>

<p>伪代码</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mgr</span> <span class="o">=</span> <span class="p">(</span><span class="n">EXPR</span><span class="p">)</span>   
<span class="nb">exit</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">mgr</span><span class="p">).</span><span class="n">__exit__</span>  <span class="c1"># Not calling it yet
</span><span class="n">value</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">mgr</span><span class="p">).</span><span class="n">__enter__</span><span class="p">(</span><span class="n">mgr</span><span class="p">)</span>    
<span class="n">exc</span> <span class="o">=</span> <span class="bp">True</span>     
<span class="k">try</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">VAR</span> <span class="o">=</span> <span class="n">value</span>  <span class="c1"># Only if "as VAR" is present
</span>        <span class="n">BLOCK</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="c1"># The exceptional case is handled here
</span>        <span class="n">exc</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">exit</span><span class="p">(</span><span class="n">mgr</span><span class="p">,</span> <span class="o">*</span><span class="n">sys</span><span class="p">.</span><span class="n">exc_info</span><span class="p">()):</span>
            <span class="k">raise</span>
        <span class="c1"># The exception is swallowed if exit() returns true
</span><span class="k">finally</span><span class="p">:</span>
    <span class="c1"># The normal and non-local-goto cases are handled here
</span>    <span class="k">if</span> <span class="n">exc</span><span class="p">:</span>
        <span class="nb">exit</span><span class="p">(</span><span class="n">mgr</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>生成上下文管理器mgr</li>
  <li>如果没有发现__exit__, __enter__两个方法，解释器会抛出AttributeError异常</li>
  <li>调用上下文管理器的 <strong>enter</strong>() 方法</li>
  <li>如果语法里的as VAR没有写，那么 伪代码里的 VAR= 这部分也会同样被忽略</li>
  <li>如果BLOCK中的代码正常结束，或者是通过break, continue ,return 来结束，<strong>exit</strong>()会使用三个None的参数来返回</li>
  <li>如果执行过程中出现异常，则使用 sys.exc_info的异常信息为参数调用 <strong>exit</strong>(exc_type, exc_value, exc_traceback)</li>
</ul>

<h3 id="对比">对比</h3>

<p>之前我们对文件的操作是这样的</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'filename'</span><span class="p">)</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Unexpected error:"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">())</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>现在有了with语句可以使代码更加简洁，减少编码量,下面的语句会在执行完后自动关闭文件(即使出现异常也会)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example.info'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="code">code</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
       <span class="c1"># return self.f
</span>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>上面例子的返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="bp">None</span>
</code></pre></div></div>

<p>这个例子里面__enter__没有返回，所以with语句里的”as t”到的是None，修改一下上面的例子</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>
    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">_io</span><span class="p">.</span><span class="n">TextIOWrapper</span> <span class="n">name</span><span class="o">=</span><span class="s">'file'</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'cp936'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>如果在__init__或者__enter__中抛出异常，则不会进入到__exit__中</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nb">ImportError</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__enter__"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>
    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__exit__"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__init__</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">14</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
  <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">5</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__init__</span>
    <span class="k">raise</span> <span class="nb">ImportError</span>
<span class="nb">ImportError</span>
</code></pre></div></div>

<p>如果在__exit__中返回True,则不会产生异常</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__enter__"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__exit__ {} "</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">exc_type</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">True</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
    <span class="k">raise</span> <span class="nb">ImportError</span>
<span class="k">print</span><span class="p">(</span><span class="s">"no error"</span><span class="p">)</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="n">__init__</span>
<span class="n">__enter__</span>
<span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">_io</span><span class="p">.</span><span class="n">TextIOWrapper</span> <span class="n">name</span><span class="o">=</span><span class="s">'file'</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'cp936'</span><span class="o">&gt;</span>
<span class="n">__exit__</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">ImportError</span><span class="s">'&gt;
no error
</span></code></pre></div></div>

<h3 id="参考">参考</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=with
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
https://www.python.org/dev/peps/pep-0343/
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[在python中实现了__enter__和__exit__方法，即支持上下文管理器协议。上下文管理器就是支持上下文管理器协议的对象，它是为了with而生。当with语句在开始运行时，会在上下文管理器对象上调用__enter__方法。with语句运行结束后，会在上下文管理器对象上调用__exit__方法]]></summary></entry><entry><title type="html">`Python中的 __len__、__getitem__、__setitem__、__delitem__、__contains__`</title><link href="/python-len-getitem-setitem-delitem-contains/" rel="alternate" type="text/html" title="`Python中的 __len__、__getitem__、__setitem__、__delitem__、__contains__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-len-getitem-setitem-delitem-contains</id><content type="html" xml:base="/python-len-getitem-setitem-delitem-contains/"><![CDATA[<p>Python 中特殊方法的一些理解笔记</p>

<h3 id="__len__">__len__</h3>
<p>返回集合长度</p>

<h3 id="__getitem__self-item">__getitem__(self, item)</h3>
<p>使用索引访问元素</p>

<h3 id="__setitem__self-key-value">__setitem__(self, key, value)</h3>
<p>对索引赋值,使用 self[key] = value</p>

<h3 id="__delitem__self-key">__delitem__(self, key)</h3>
<p>删除索引值 del self[key]</p>

<h3 id="__contains__">__contains__</h3>
<p>实现in运算符，如果没有实现这个方法python也会调用__getitem__来使in运算符可用</p>

<h3 id="可变集合和不可变集合">可变集合和不可变集合</h3>
<ul>
  <li>可变集合需要实现: <strong>len</strong>  <strong>getitem</strong>    <strong>setitem</strong>  <strong>delitem</strong></li>
  <li>不可变集合需要实现: <strong>len</strong>  <strong>getitem</strong></li>
</ul>

<h3 id="code">code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TemTest</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">=</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="o">=</span><span class="n">TemTest</span><span class="p">()</span> <span class="c1">#实例化
</span><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">))</span> <span class="c1">#返回长度
</span>

<span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>   <span class="c1">#打印下标0的值
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span>  <span class="c1">#切片
</span>

<span class="n">test</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">10</span>       <span class="c1">#将下标3的值替换为10
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>


<span class="k">del</span> <span class="n">test</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>      <span class="c1">#删除下标3的值
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>


<span class="k">print</span><span class="p">(</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">test</span><span class="p">)</span>  <span class="c1">#测试in运算符
</span><span class="k">print</span><span class="p">(</span><span class="mi">3</span> <span class="ow">in</span> <span class="n">test</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span>
<span class="mi">0</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="bp">True</span>
<span class="bp">False</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python 中特殊方法的一些理解笔记]]></summary></entry><entry><title type="html">Centos Prometheus 安装</title><link href="/install-prometheus/" rel="alternate" type="text/html" title="Centos Prometheus 安装" /><published>2022-08-15T00:00:00+08:00</published><updated>2022-08-15T00:00:00+08:00</updated><id>/install-prometheus</id><content type="html" xml:base="/install-prometheus/"><![CDATA[<p>Prometheus 在centos中的安装记录</p>

<h3 id="下载">下载</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /tmp
wget https://github.com/prometheus/prometheus/releases/download/v2.37.0/prometheus-2.37.0.linux-amd64.tar.gz
</code></pre></div></div>

<h3 id="解压">解压</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>zxvfp prometheus-2.37.0.linux-amd64.tar.gz
<span class="nb">mv </span>prometheus-2.37.0.linux-amd64 /usr/local/
<span class="nb">mkdir</span> /data/config/oss/prometheus
<span class="nb">cd</span> /usr/local/
<span class="nb">ln</span> <span class="nt">-s</span> prometheus-2.37.0.linux-amd64 prometheus
 
<span class="nb">cd </span>prometheus
<span class="nb">mv </span>prometheus.yml /data/config/oss/prometheus/
 
<span class="nb">mkdir</span> /data/prometeus
<span class="nb">mv </span>data /data/prometeus/
</code></pre></div></div>

<h3 id="启动文件">启动文件</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">' | sudo tee /etc/systemd/system/prometheus.service
[Unit]
Description=Prometheus Server
Documentation=https://prometheus.io/docs/introduction/overview/
After=network-online.target
 
[Service]
User=root
ExecStart=/usr/local/prometheus/prometheus --config.file=/data/config/oss/prometheus/prometheus.yml --storage.tsdb.path=/data/prometeus/data --web.console.templates=/data/config/oss/prometheus/consoles  --web.console.libraries=/data/config/oss/prometheus/console_libraries
ExecStop=/bin/kill -TERM </span><span class="k">${</span><span class="nv">MAINPID</span><span class="k">}</span><span class="sh">
ExecReload=/bin/kill -HUP </span><span class="k">${</span><span class="nv">MAINPID</span><span class="k">}</span><span class="sh">
 
[Install]
WantedBy=multi-user.target
</span><span class="no">EOF
</span></code></pre></div></div>

<h3 id="启动服务">启动服务</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl <span class="nb">enable </span>prometheus.service
systemctl start prometheus.service
systemctl status prometheus.service
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Application" /><summary type="html"><![CDATA[Prometheus 在centos中的安装记录]]></summary></entry><entry><title type="html">`Python中的 __getattr__、__getattribute__、__setattr__、__delattr__、__dir__`</title><link href="/python-getattr-getattribute-setattr-delattr-dir/" rel="alternate" type="text/html" title="`Python中的 __getattr__、__getattribute__、__setattr__、__delattr__、__dir__`" /><published>2022-08-15T00:00:00+08:00</published><updated>2022-08-15T00:00:00+08:00</updated><id>/python-getattr-getattribute-setattr-delattr-dir</id><content type="html" xml:base="/python-getattr-getattribute-setattr-delattr-dir/"><![CDATA[<p>Python 中特殊方法的一些理解笔记</p>

<h3 id="__getattr__">__getattr__</h3>

<p>属性查找失败后会调用__getattr__方法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">tmp</span> <span class="o">=</span> <span class="s">'tmp123'</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">AttributeError</span><span class="p">(</span><span class="s">'{} object has no attribute {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="n">item</span><span class="p">))</span>
<span class="n">a</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">tmp</span><span class="p">)</span>
<span class="n">结果</span><span class="p">:</span>
    <span class="n">tmp123</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">tmpnone</span><span class="p">)</span>
<span class="n">结果</span><span class="p">:</span>
    <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
      <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
        <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">tmpnone</span><span class="p">)</span>
      <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">7</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__getattr__</span>
        <span class="k">raise</span> <span class="nb">AttributeError</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">tmp_cls</span><span class="p">,</span> <span class="n">item</span><span class="p">))</span>
    <span class="nb">AttributeError</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="n">TmpTest</span><span class="s">'&gt; object has no attribute tmpnone
</span></code></pre></div></div>

<p>a.tmpnone 表达式执行顺序:</p>
<ul>
  <li>首先会检查a实例有没有名为tmpnone的属性</li>
  <li>到类（a.<strong>class</strong>）中查找</li>
  <li>顺着继承树继续查找.</li>
  <li>调用a所属类中定义的 <strong>getattr</strong> 方法,传入self和属性名称的字符串形式（如 ‘tmpnone’）.</li>
</ul>

<h3 id="__getattribute__和__setattr__">__getattribute__和__setattr__:</h3>

<h4 id="__getattribute__">__getattribute__</h4>
<ul>
  <li>尝试获取指定的属性时总会调用这个方法,寻找的属性是特殊属性或特殊方法时除外.</li>
  <li>点号与 getattr 和 hasattr 内置函数会触发这个方法.</li>
  <li>调用__getattribute__方法且抛出 AttributeError 异常时,才会调用__getattr__方法.</li>
  <li>为了在获取实例的属性时不导致无限递归,__getattribute__方法的实现要使用 super().__getattribute__(name)</li>
</ul>

<h4 id="__setattr__">__setattr__</h4>
<ul>
  <li>尝试设置指定的属性时会调用这个方法.点号和 setattr 内置函数会触发这个方法.例如我们下面的例子a.x=’getattr’和 setattr(a, ‘x’, “getattr”) 都会触发TmpTest.__setattr__(a, ‘x’, “getattr”) 方法.,</li>
  <li>如果实现了__getattr__方法,最好同时定义__setattr__方法</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"getting __getattr__ {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">=</span> <span class="s">'__getattr__'</span>
        <span class="k">return</span> <span class="s">'__getattr__'</span>

    <span class="k">def</span> <span class="nf">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">"getting __getattribute__ {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">item</span><span class="o">==</span><span class="s">'x'</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">AttributeError</span>
        <span class="k">return</span> <span class="nb">object</span><span class="p">.</span><span class="n">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"getting __setattr__ {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">object</span><span class="p">.</span><span class="n">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

<span class="n">a</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">()</span>
<span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="o">=</span><span class="s">'getattr'</span>
<span class="k">print</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>

<span class="n">结果</span><span class="p">:</span>
<span class="n">getting</span> <span class="n">__setattr__</span> <span class="n">x</span>   
<span class="n">getting</span> <span class="n">__getattribute__</span> <span class="n">x</span>       <span class="c1">#抛出异常
</span><span class="n">getting</span> <span class="n">__getattr__</span> <span class="n">x</span>            <span class="c1">#执行__getattr__
</span><span class="n">getting</span> <span class="n">__getattribute__</span> <span class="n">__dict__</span>  
<span class="n">__getattr__</span>
</code></pre></div></div>

<h3 id="__delattr__">__delattr__</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>只要使用del语句删除属性,就会调用这个方法.例如,del a.x 语句触发 Class.__delattr__(a, 'x') 方法 ```python
def __delattr__(self, item):
    print ("getting __delattr__ {}".format(item))
    del self.__dict__[item] ```
</code></pre></div></div>

<h3 id="dir">dir()</h3>
<ul>
  <li>在没有参数的情况下，返回当前作用域内的名称列表。</li>
  <li>如果对象有一个名为dir()的方法，那么这个方法就会被调用</li>
  <li>模块对象，返回模块的属性列表</li>
  <li>类对象，返回累的属性名称和基类的属性列表</li>
</ul>

<p>看下官方的文档例子</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">struct</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">()</span>   <span class="c1"># show the names in the module namespace  
</span>    <span class="p">[</span><span class="s">'__builtins__'</span><span class="p">,</span> <span class="s">'__name__'</span><span class="p">,</span> <span class="s">'struct'</span><span class="p">]</span>
    
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">struct</span><span class="p">)</span>   <span class="c1"># show the names in the struct module
</span>    <span class="p">[</span><span class="s">'Struct'</span><span class="p">,</span> <span class="s">'__all__'</span><span class="p">,</span> <span class="s">'__builtins__'</span><span class="p">,</span> <span class="s">'__cached__'</span><span class="p">,</span> <span class="s">'__doc__'</span><span class="p">,</span> <span class="s">'__file__'</span><span class="p">,</span>
     <span class="s">'__initializing__'</span><span class="p">,</span> <span class="s">'__loader__'</span><span class="p">,</span> <span class="s">'__name__'</span><span class="p">,</span> <span class="s">'__package__'</span><span class="p">,</span>
     <span class="s">'_clearcache'</span><span class="p">,</span> <span class="s">'calcsize'</span><span class="p">,</span> <span class="s">'error'</span><span class="p">,</span> <span class="s">'pack'</span><span class="p">,</span> <span class="s">'pack_into'</span><span class="p">,</span>
     <span class="s">'unpack'</span><span class="p">,</span> <span class="s">'unpack_from'</span><span class="p">]</span>
     
    <span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Shape</span><span class="p">:</span>
    <span class="p">...</span>     <span class="k">def</span> <span class="nf">__dir__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="p">...</span>         <span class="k">return</span> <span class="p">[</span><span class="s">'area'</span><span class="p">,</span> <span class="s">'perimeter'</span><span class="p">,</span> <span class="s">'location'</span><span class="p">]</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Shape</span><span class="p">()</span>
    <span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="p">[</span><span class="s">'area'</span><span class="p">,</span> <span class="s">'location'</span><span class="p">,</span> <span class="s">'perimeter'</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python 中特殊方法的一些理解笔记]]></summary></entry><entry><title type="html">`Python中的 __new__ __init__ __del__`</title><link href="/python-new-init-del/" rel="alternate" type="text/html" title="`Python中的 __new__ __init__ __del__`" /><published>2022-08-15T00:00:00+08:00</published><updated>2022-08-15T00:00:00+08:00</updated><id>/python-new-init-del</id><content type="html" xml:base="/python-new-init-del/"><![CDATA[<p>Python中的__new__ __init__ __del__三个方法用于实例的创建和销毁,在使用python的类中，我们最常用的是__init__方法，通常称为构造方法,__new__方法几乎不会使用，这篇文章是基于Python3.6为基础来做实验，主要谈一谈python的__new__和__init__，__init__通常称为构造方法,但其实它是个“初始化方法”，真正的构造方法是__new__,__init__既然是初始化方法，那么肯定是对对象的初始化，也就是存在一个被初始化的对象</p>

<h3 id="第一个例子">第一个例子</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">inch</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__new__ "</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__new__ "</span><span class="p">)</span>

<span class="n">__new__</span>
<span class="bp">None</span>
</code></pre></div></div>

<p>因为我们没有从__new__返回任何结果，__init__这里不会调用。如果init被调用，我们就会看到我们在init中的打印语句。</p>

<h3 id="第二个例子">第二个例子</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">inch</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__new__ "</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="nb">super</span><span class="p">(</span><span class="n">inch</span><span class="p">,</span> <span class="n">cls</span><span class="p">).</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">))</span> 
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">inch</span><span class="p">,</span> <span class="n">cls</span><span class="p">).</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">inch</span><span class="p">())</span>

<span class="n">__new__</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="p">.</span><span class="n">inch</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x002BF170</span><span class="o">&gt;</span>
<span class="n">__init__</span>
<span class="o">&lt;</span><span class="n">__main__</span><span class="p">.</span><span class="n">inch</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x002BF170</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>用于构建实例的是特殊方法 <strong>new</strong>：是个类方法(不需要使用@classmethod)，调用__init__方法时要传入实例，__new__必须返回一个实例。返回的实例会作为第一个参数（即 self）传给__init__ 方法。注意:__init__不允许返回任何值</p>

<h3 id="第三个例子">第三个例子</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">inch</span><span class="p">(</span><span class="nb">float</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span>
        <span class="n">cls</span><span class="p">.</span><span class="n">new</span> <span class="o">=</span> <span class="nb">float</span><span class="p">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">args</span><span class="o">*</span><span class="mf">0.0254</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="n">new</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">object1</span><span class="o">=</span><span class="n">inch</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">object1</span><span class="p">.</span><span class="n">new</span><span class="p">)</span>

<span class="n">__init__</span>
<span class="mi">3</span>
<span class="mf">0.07619999999999999</span>
</code></pre></div></div>
<p>可以看到__init__方法中除了self之外定义的参数，都必须与__new__方法中除cls参数之外的参数保持一致</p>

<p>无论我们给超类的__new__传递的是哪个类，它都会创建该类的一个实例，如何我们想要创建一个inch的实例，所以，inch类必须作为第一个参数传递给float.<strong>new</strong>。在类inch的内部，cls指的是inch类，因此，我们需要将cls作为第一个参数传递给对象。</p>

<h3 id="第四个例子">第四个例子</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">float</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">inch</span><span class="p">(</span><span class="nb">float</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="mf">0.0</span><span class="p">):</span>
        <span class="n">B</span><span class="p">.</span><span class="n">new</span> <span class="o">=</span> <span class="nb">float</span><span class="p">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">args</span><span class="o">*</span><span class="mf">0.0254</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">B</span><span class="p">.</span><span class="n">new</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">object1</span><span class="o">=</span><span class="n">inch</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="nb">object</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">object1</span><span class="p">.</span><span class="n">new</span><span class="p">)</span>

<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="sa">B</span><span class="s">'&gt;
0.0761999999999999
</span></code></pre></div></div>

<p>最后:__new__是用来创建一个实例的，从 object 类继承的已经很完善。所以我们基本上不需要自己编写__new__ 方法</p>

<h3 id="第五个例子">第五个例子</h3>
<p>一个__new__的应用，著名的单例模式(:python 中 None 对象就是单例):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Singleton</span><span class="p">:</span>
    <span class="n">_instance</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">_instance</span><span class="p">,</span> <span class="n">cls</span><span class="p">):</span>
            <span class="n">cls</span><span class="p">.</span><span class="n">_instance</span> <span class="o">=</span> <span class="nb">object</span><span class="p">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="n">_instance</span>

<span class="n">a</span><span class="o">=</span><span class="n">Singleton</span><span class="p">()</span>
<span class="n">b</span><span class="o">=</span><span class="n">Singleton</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span><span class="p">)</span>

<span class="bp">True</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python中的__new__ __init__ __del__三个方法用于实例的创建和销毁,在使用python的类中，我们最常用的是__init__方法，通常称为构造方法,__new__方法几乎不会使用，这篇文章是基于Python3.6为基础来做实验，主要谈一谈python的__new__和__init__，__init__通常称为构造方法,但其实它是个“初始化方法”，真正的构造方法是__new__,__init__既然是初始化方法，那么肯定是对对象的初始化，也就是存在一个被初始化的对象]]></summary></entry><entry><title type="html">`Python中的 __repr__ __str__`</title><link href="/python-repr-str/" rel="alternate" type="text/html" title="`Python中的 __repr__ __str__`" /><published>2022-08-15T00:00:00+08:00</published><updated>2022-08-15T00:00:00+08:00</updated><id>/python-repr-str</id><content type="html" xml:base="/python-repr-str/"><![CDATA[<p>Python 中特殊方法的一些理解笔记</p>

<h3 id="__repr__">__repr__</h3>
<p>被内置函数repr用于把一个对象用”官方”的字符串形式表示出来(终端友好)</p>
<ul>
  <li>值传给eval()来返回一个对象的字符串表示形式</li>
  <li>否则返回一个尖括号括起来的字符串，包含了对象类型的名称和附加的信息通常包括对象的名称和地址</li>
  <li>一个类可以通过 __repr__方法来控制它的实例返回内容(也就是以上两点都通可以通过__repr__方法来定制)</li>
  <li>返回 Unicode 字符串(str 类型)</li>
</ul>

<h3 id="__str__">__str__</h3>
<p>被str(object) 和内置函数format()和print() 返回一个对象的’非正式’字符串形式(用户友好)</p>
<ul>
  <li>返回一个对象的字符串版本，如果对象没有提供，会返回空字符串，</li>
  <li>对于字符串，会返回字符串本身，如果对象没有提供__str__方法，会使用__repr__方法(也就是repr(object))来提供返回值</li>
  <li>返回 Unicode 字符串(str 类型)</li>
</ul>

<h3 id="code">code</h3>
<p>这是django query的源码部分,使用__repr__来返回一个对象和查询的数据切片:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="p">[:</span><span class="n">REPR_OUTPUT_SIZE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">REPR_OUTPUT_SIZE</span><span class="p">:</span>
            <span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"…(remaining elements truncated)…"</span>
        <span class="k">return</span> <span class="s">'&lt;%s %r&gt;'</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>注意:这里用到了%r,会返回数据的标准字符串形式，它和%s的区别看下面的例子:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">In</span> <span class="p">[</span><span class="mi">58</span><span class="p">]:</span> <span class="nb">repr</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>
    <span class="n">Out</span><span class="p">[</span><span class="mi">58</span><span class="p">]:</span> <span class="s">'datetime.datetime(2018, 9, 13, 15, 22, 22, 124128)'</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">59</span><span class="p">]:</span> <span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>
    <span class="n">Out</span><span class="p">[</span><span class="mi">59</span><span class="p">]:</span> <span class="s">'2018-09-13 15:22:26.310367'</span>
</code></pre></div></div>

<p>再来看下__str__和__repr__的实现</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">In</span> <span class="p">[</span><span class="mi">68</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">example</span><span class="p">:</span>
    <span class="p">...:</span>     <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="p">...:</span>         <span class="k">return</span> <span class="s">'str'</span>
    <span class="p">...:</span>     <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="p">...:</span>         <span class="k">return</span> <span class="s">'repr'</span>
    <span class="p">...:</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">69</span><span class="p">]:</span> <span class="n">a</span><span class="o">=</span><span class="n">example</span><span class="p">()</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="nb">str</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="n">a</span>
    <span class="n">Out</span><span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="nb">repr</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">__str__</span><span class="p">())</span>
    <span class="n">Out</span><span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="s">'str'</span>

    <span class="n">In</span> <span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">__repr__</span><span class="p">())</span>
    <span class="n">Out</span><span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="s">'repr'</span> 
</code></pre></div></div>

<p>如果对象没有__str__方法，会使用__repr__来代替</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">In</span> <span class="p">[</span><span class="mi">76</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">example</span><span class="p">:</span>
    <span class="p">...:</span>     <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="p">...:</span>         <span class="k">return</span> <span class="s">'repr'</span>
    <span class="p">...:</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">77</span><span class="p">]:</span> <span class="n">a</span><span class="o">=</span><span class="n">example</span><span class="p">()</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="nb">repr</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">79</span><span class="p">]:</span> <span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">__str__</span><span class="p">())</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">79</span><span class="p">]:</span> <span class="s">'repr'</span>
</code></pre></div></div>

<p>如果我们只实现两个中的一个的话，只需要写__repr__就可以了</p>

<h3 id="参考">参考</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/library/stdtypes.html#str
https://github.com/django/django/blob/master/django/db/models/query.py
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python 中特殊方法的一些理解笔记]]></summary></entry></feed>