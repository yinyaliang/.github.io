<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-08-21T09:38:56+08:00</updated><id>/feed.xml</id><title type="html">尹亚亮</title><subtitle>An amazing website.</subtitle><author><name>Your Name</name></author><entry><title type="html">ospf笔记-基础术语</title><link href="/rs-ospf-01/" rel="alternate" type="text/html" title="ospf笔记-基础术语" /><published>2022-08-20T00:00:00+08:00</published><updated>2022-08-20T00:00:00+08:00</updated><id>/rs-ospf-01</id><content type="html" xml:base="/rs-ospf-01/"><![CDATA[<p>OSPF备忘信息</p>

<h2 id="基础术语">基础术语</h2>

<h3 id="链路状态协议的特点">链路状态协议的特点</h3>
<ul>
  <li>快速适应网络变化</li>
  <li>在网络发生变化时发送触发更新</li>
  <li>以较低的频率（如每隔30分钟）发送定期更新，这被称为链路状态刷新</li>
</ul>

<h3 id="每台路由器都必须记录下述信息">每台路由器都必须记录下述信息</h3>
<ul>
  <li>直接相连的邻接路由器</li>
  <li>网络或区域内的其他路由器及其连接的网络</li>
  <li>前往每个目的地的最佳路径</li>
</ul>

<h3 id="ospf使用的各种表">OSPF使用的各种表</h3>
<ul>
  <li>OSPF邻居表=邻接关系数据库</li>
  <li>OSPF拓扑表=OSPF拓扑数据库=LSDB</li>
  <li>路由表=转发数据库</li>
</ul>

<h3 id="区域结构">区域结构</h3>
<ul>
  <li>内部路由器：所有接口都位于同一个区域中的路由器，同一区域中所有内部路由器的LSDB都相同</li>
  <li>骨干路由器：位于骨干区域0边缘的路由器，至少有一个接口与区域0相连。骨干路由器在维护OSPF路由信息时采用的步骤和算法与内部路由器相同</li>
  <li>区域边界路由器（ABR）：连接多个区域的路由器，为其连接的每个区域维护一个LSDB，并路由前往/来自其他区域的数据流</li>
  <li>自治系统边界路由器（ASBR）：至少有一个接口与其他域（如另一个OSPF自治系统或使用增强内部网关协议[EIGRP]的域）相连</li>
</ul>

<p><img src="/assets/images/ospf/01.png" /></p>

<p>在多路访问广播环境中，每个网段都有独立的DR和BDR
在路由器链路通告中，以链路开销的方式通告它。默认的OSPF开销如下</p>
<ul>
  <li>56kbit/s 的串行链路：默认开销为1785</li>
  <li>64kbit/s 的串行链路：默认开销为1562</li>
  <li>T1（1.544Mbit/s 的串行链路）：默认开销为64</li>
  <li>E1（2.048Mbit/s 的串行链路）：默认开销为48</li>
  <li>以太网：默认开销为10</li>
  <li>快速以太网：默认开销为1</li>
  <li>FDDI：默认开销为1</li>
  <li>ATM：默认开销为1</li>
</ul>

<p><img src="/assets/images/ospf/02.png" /></p>

<p><img src="/assets/images/ospf/03.png" /></p>

<p><img src="/assets/images/ospf/04.png" /></p>

<p><img src="/assets/images/ospf/05.png" /></p>

<p>这5种OSPF分组都被直接封装到IP分组的有效负载中，OSPF分组不使用传输控制协议（TCP）和用户数据报协议（UDP）</p>

<h3 id="邻接路由器要建立邻接关系hello分组的如下字段必须匹配">邻接路由器要建立邻接关系，Hello分组的如下字段必须匹配</h3>
<ul>
  <li>Hello 间隔</li>
  <li>失效间隔</li>
  <li>区域ID</li>
  <li>身份验证密码</li>
  <li>末节区域标记</li>
</ul>

<p><strong>要让路由器通过接口建立邻接关系，接口的主IP地址必须位于同一个子网且子网掩码相同，接口的最大传输单元（MTU）也必须匹配</strong></p>

<h3 id="ospf-邻接关系状态">OSPF 邻接关系状态</h3>
<ul>
  <li>Down：没有检测到活动邻居</li>
  <li>Init：收到Hello分组</li>
  <li>双向：路由器在其收到的Hello分组中看到了自己的路由器ID</li>
  <li>预启动：确定了主/从角色</li>
  <li>交换：发送DBD（LSDB摘要）</li>
  <li>加载：交换LSR和LSU以填充LSDB</li>
  <li>完全邻接：邻居处于完全邻接状态</li>
</ul>

<p><strong>如果邻居是通过 NBMA 接口（如帧中继）相连的，OSPF 还可能在 Init 状态前进入Atempt状态</strong></p>

<h3 id="满足如下条件时lsa将被视为更新的">满足如下条件时，LSA将被视为更新的</h3>
<ul>
  <li>序列号更大</li>
  <li>校验和更大（如果序列号相同）</li>
  <li>年龄等于maxage（这表明LSA被抑制）</li>
  <li>LS 年龄小得多</li>
</ul>

<p><img src="/assets/images/ospf/06.png" /></p>

<p><img src="/assets/images/ospf/07.png" /></p>

<p><img src="/assets/images/ospf/08.png" /></p>

<h2 id="常规配置">常规配置</h2>

<h3 id="配置ospf进程的步骤">配置OSPF进程的步骤</h3>

<ul>
  <li>router ospf process-id [vrf vpn-name]在路由器上启用OSPF 进程</li>
  <li>network ip address wildcard-mask area area-id 指定路由器的哪些接口将参与OSPF进程以及网络所属的OSPF区域</li>
</ul>

<p><img src="/assets/images/ospf/9.png" /></p>

<p><img src="/assets/images/ospf/10.png" /></p>

<p><strong>接口配置命令 ip ospf process-id area area-id [secondaries none],优先于命令network area</strong></p>

<p><img src="/assets/images/ospf/11.png" /></p>

<p><img src="/assets/images/ospf/12.png" /></p>

<p>区域OSPF配置示例</p>

<p><img src="/assets/images/ospf/13.png" /></p>

<h3 id="路由器id">路由器ID</h3>
<ul>
  <li>router-id ip-address</li>
  <li>路由器ID设置为最大的活动环回接口地址</li>
  <li>最大的活动物理接口IP地址</li>
</ul>

<p><strong>OSPF数据库使用路由器ID来唯一地标识网络中的每台路由器,因此在整个OSPF自治系统中，路由器ID都不能重复</strong></p>

<p><img src="/assets/images/ospf/14.png" /></p>

<h3 id="查看ospf的运行">查看OSPF的运行</h3>
<ul>
  <li>show ip ospf显示OSPF路由器ID（RID）、OSPF定时器、执行了 SPF 算法多少次以及LSA信息。</li>
  <li>show ip ospf interface [type number] [ brief]：查看接口是否被加入到正确的区域中；该命令还显示各种定时器（包括Hello间隔）和邻接关系</li>
  <li>show ip ospf neighbor detail [type number] [neighbor-id] [detail]：显示一个邻居列表，包括它们的OSPF路由器ID、OSPF优先级、邻接关系状态（如init、预启动或完全邻接）及失效定时器</li>
  <li>show ip route ospf：显示路由器知道的 OSPF 路由，它是判断本地路由器和互连网络其他部分之间的连接性的最佳方法之一。该命令还有可选参数，让您能够进一步指定要显示的信息，如OSPF进程ID</li>
  <li>show ip protocols：显示 IP 路由协议参数，包括定时器、过滤器、度量值、网络及路由器的其他信息</li>
  <li>debug ip ospf events显示与OSPF相关的事件，如建立邻接关系、扩散信息、DR选举和SPF计算</li>
</ul>

<p><img src="/assets/images/ospf/15.png" /></p>

<p><img src="/assets/images/ospf/16.png" /></p>

<p><img src="/assets/images/ospf/17.png" /></p>

<p><img src="/assets/images/ospf/18.png" /></p>

<p><img src="/assets/images/ospf/19.png" /></p>

<h2 id="网络类型">网络类型</h2>

<h3 id="dr和bdr">DR和BDR</h3>

<p><img src="/assets/images/ospf/20.png" /></p>

<ul>
  <li>优先级最高的路由器成为DR</li>
  <li>优先级次高的路由器成为BDR</li>
  <li>接口的OSPF优先级默认为1</li>
  <li>优先级为0的路由器不能成为DR或BDR</li>
  <li>优先级更高的路由器加入网络时，并不会抢占DR或BDR</li>
</ul>

<p><strong>DR 概念是链路级的，牢记这一点很重要。在多路访问广播环境中，每个网段都有自己的DR和BDR</strong></p>

<p>要指定将多路访问链路上的哪个路由器接口用做DR或BDR，可使用接口配置命令ip ospf priority number。默认的优先级为 0，其取值范围为0～255
DR和BDR的价值体现在以下方面</p>

<ul>
  <li>减少路由更新数据流</li>
  <li>管理链路状态同步</li>
</ul>

<p><img src="/assets/images/ospf/21.png" /></p>

<p><img src="/assets/images/ospf/22.png" /></p>

<h2 id="lsa">LSA</h2>

<p><img src="/assets/images/ospf/30.png" />
<img src="/assets/images/ospf/31.png" /></p>

<ul>
  <li>1类（路由器LSA）：每台路由器都生成有关其所属区域的路由器链路通告。路由器链路通告描述了路由器连接到区域的链路的状态，只在区域内扩散。每种LSA的报头都是20字节，其中一个字段是链路状态ID。对于1类LSA，该字段的值为最初发送LSA的路由器的ID。</li>
  <li>2类（网络LSA）：DR为多路访问网络生成的网络链路通告，描述了特定多路访问网络上的一组路由器。网络链路通告在网络所在的区域内扩散。2类LSA的链路状态ID为DR的IP接口地址。</li>
  <li>3类和4类（汇总LSA）：汇总链路通告是由ABR生成的，描述了下述区域间路由
    3类 LSA描述了前往网络的路由（还可能包含汇总路由）
    4类 LSA描述了前往ASBR的路由</li>
  <li>5类（自治系统外部LSA）：自治系统外部链路状态通告是由ASBR生成的，描述了前往自治系统外部的目标网络的路由，被扩散到除各种末节区域外的其他所有地方。5类LSA的链路状态ID为外部网络的地址。</li>
  <li>6 类（多播 OSPF LSA）：这些 LSA 用于 OSPF 多播应用中</li>
  <li>7类（用于NSSA的LSA）：这些LSA用于NSSA中，将在本章后面的“配置NSSA”一节介绍</li>
  <li>8类（BGP的外部属性LSA）：这些LSA用于互联OSPF和BGP</li>
  <li>9、10和11类（不透明LSA）：这些LSA用于升级到OSPF，旨在在OSPF域中分发应用程序特定的信息。例如，Cisco使用9类不透明LSA在OSPF中实现MPLS流量工程。分发不透明LSA时，使用的是标准的LSDB扩散机制。这3种LSA的扩散范围各不相同，9类LSA只在本地网络或子网内扩散，10类LSA只在当前区域内扩散，而11类LSA扩散到整个自治系统（与5类LSA相同）。不透明LSA是在 RFC 5250（The OSPF Opaque LSA Option）中定义的。</li>
</ul>

<p><strong>在Cisco路由器中，OSPFv2不支持6类和8类LSA</strong></p>

<h3 id="1类lsa">1类LSA</h3>
<p>路由器通告1类LSA，这种LSA被扩散到当前区域内的所有路由器，1类LSA指出了每条链路的OSPF开销以及路由器是不是ABR或ASBR</p>

<p><img src="/assets/images/ospf/32.png" /></p>

<p><img src="/assets/images/ospf/33.png" /></p>

<h3 id="2类lsa">2类LSA</h3>
<p>2 类 LSA 是为区域中每个中转的广播或 NBMA 网络生成的，中转网络至少与两台OSPF 路由器直接相连</p>

<p><img src="/assets/images/ospf/34.png" /></p>

<h3 id="3类lsa">3类LSA</h3>
<p>3类（汇总）LSA由ABR生成，它将一个区域内的网络通告给OSPF自治系统中的其他区域</p>

<p><img src="/assets/images/ospf/35.png" /></p>

<h3 id="4类lsa">4类LSA</h3>
<p>仅当区域中有ASBR时，ABR才会生成4类（汇总）LSA。4类LSA标识ASBR，并提供一条前往该ASBR的路由</p>

<p><img src="/assets/images/ospf/36.png" /></p>

<h3 id="5类lsa">5类LSA</h3>
<p>5类LSA描述了前往OSPF自治系统外的网络的路由，它由ASBR发送并被扩散到整个AS</p>

<p><img src="/assets/images/ospf/37.png" /></p>

<p><img src="/assets/images/ospf/38.png" /></p>

<h3 id="ospf的路由表和路由类型">OSPF的路由表和路由类型</h3>

<p><img src="/assets/images/ospf/39.png" /></p>

<p><img src="/assets/images/ospf/40.png" /></p>

<h3 id="计算o-e1-和-o-e2的开销">计算O E1 和 O E2的开销</h3>

<p><img src="/assets/images/ospf/41.png" /></p>

<ul>
  <li>对于O E1 外部路由，开销为外部开销加上分组经过的每条链路的内部开销。多个ASBR将同一条外部路由通告到同一个自治系统中时，应使用这种类型，以避免次优路由</li>
  <li>O E2路由的开销总是只包含外部开销。只有一台 ASBR将外部路由通告到自治系统中时，使用这种类型</li>
</ul>

<h3 id="lsdb的过载保护">LSDB的过载保护</h3>

<p><img src="/assets/images/ospf/42.png" /></p>

<h2 id="特殊区域">特殊区域</h2>

<h3 id="标准区域">标准区域</h3>
<p>这是默认的区域类型，它接受链路更新、汇总路由和外部路由。</p>

<h3 id="骨干区域">骨干区域</h3>
<p>骨干区域为区域0，其他区域都与之相连以交换和路由信息。OSPF骨干区域具有标准OSPF区域的所有特征</p>

<h3 id="末节区域">末节区域</h3>
<p>这种区域不接受关于自治系统外部的路由的信息，如来自非 OSPF 路由器的路由。需要路由到自治系统外部的网络时，路由器使用默认路由（用0.0.0.0表示）。末节区域不能包含ASBR（除非ABR也是ASBR）</p>

<h3 id="绝对末节区域">绝对末节区域</h3>
<p>这种 Cisco 专用的区域不接受来自自治系统外部的路由以及来自自治系统中其他区域的汇总路由。需要将分组发送到区域外的网络时，路由器使用默认路由。绝对末节区域中不能有ASBR（除非ABR也是ASBR）</p>

<h3 id="nssa">NSSA</h3>
<p>NSSA 是对OSPF RFC的补充。这种区域定义了一种特殊的 LSA——7类LSA。NSSA具有末节区域的优点，它们不接受有关自治系统外部的路由的信息，而使用默认路由前往外部网络。然而，NSSA可以包含ASBR，这违反了关于末节区域的规则。</p>

<h3 id="绝对末节nssa">绝对末节NSSA</h3>
<p>Cisco路由器也允许将区域配置为绝对末节NSSA，这种区域可包含 ASBR，但不接受外部路由和来自其他区域的汇总路由。它使用默认路由前往区域外的网络。</p>

<p><img src="/assets/images/ospf/70.png" /></p>

<p><img src="/assets/images/ospf/71.png" /></p>

<h3 id="配置末节区域">配置末节区域</h3>

<p><img src="/assets/images/ospf/72.png" /></p>

<p>步骤</p>
<ul>
  <li>在区域内的所有路由器上配置OSPF</li>
  <li>在区域中所有的路由器上配置路由器配置命令area area-id stub</li>
  <li>（可选）在ABR中配置默认路由的开销</li>
</ul>

<p><img src="/assets/images/ospf/73.png" /></p>

<p><img src="/assets/images/ospf/74.png" /></p>

<h3 id="配置绝对末节区域cisco专有">配置绝对末节区域(CISCO专有)</h3>
<p>5类外部LSA以及3类和4类汇总LSA（区域间路由）不能传播到绝对末节区域中</p>

<p><img src="/assets/images/ospf/75.png" /></p>

<p>步骤</p>
<h1 id="在区域内的所有路由器上配置ospf">在区域内的所有路由器上配置OSPF</h1>
<h1 id="在区域中所有的路由器上配置路由器配置命令area-area-id-stub">在区域中所有的路由器上配置路由器配置命令area area-id stub</h1>
<h1 id="在abr上在命令area-area-id-stub中指定关键字no-summary这让区域变成绝对末节的">在ABR上，在命令area area-id stub中指定关键字no-summary，这让区域变成绝对末节的</h1>
<p>#（可选）在ABR上，配置默认路由的开销</p>

<p><img src="/assets/images/ospf/76.png" /></p>

<p><img src="/assets/images/ospf/77.png" /></p>

<p><img src="/assets/images/ospf/78.png" /></p>

<h3 id="ospf的路由表">OSPF的路由表</h3>

<p><img src="/assets/images/ospf/79.png" /></p>

<p>（没有任何末节配置的）标准区域中OSPF路由器的路由表，其中包括区域内路由（O）、区域间路由（O IA）和外部路由（O E1和 O E2）</p>

<p><img src="/assets/images/ospf/80.png" /></p>

<p>配置为末节区域后的路由表，其中包含区域内路由（O）和区域间路由（O IA），但不包含外部路由（O E1和 O E2），因为这些路由被区域间默认路由（O*IA）取代</p>

<p><img src="/assets/images/ospf/81.png" /></p>

<p><img src="/assets/images/ospf/82.png" /></p>

<p>ABR上执行汇总（区域仍被配置为末节的）后的路由表，其中包含区域内路由（O）和区域间汇总路由（O IA，这里将路由 172.31.11.1 和 172.31.11.2 汇总成了172.31.11.0/24），但不包含外部路由，（O E1 和 O E2），因为这些路由被区域间默认路由（O*IA）取代</p>

<p><img src="/assets/images/ospf/83.png" /></p>

<p>绝对末节区域后的路由表。注意到在绝对末节区域中，路由器的路由表最小，其中只包含区域内路由（O），而不包含区域间路由（O IA）和外部路由（O E1和 O E2），因为用区域间默认路由（O*IA）取代了这些路由</p>

<h3 id="配置nssa">配置NSSA</h3>
<p>将路由重分发到NSSA中时，将创建一种特殊的LSA——7类LSA，这种LSA只能出现在NSSA中，它是由NSSA ASBR生成的，而NSSA ABR将其转换为5类LSA并在OSPF域中传播。7类LSA的LSA报头中有一个传播（P）位，用于避免在NSSA和骨干区域之间循环传播它。7类LSA的格式与5类LSA相同。</p>

<p><img src="/assets/images/ospf/84.png" /></p>

<p>步骤</p>
<ul>
  <li>在区域内的所有路由器上配置OSPF</li>
  <li>在区域内的所有路由器上配置路由器配置命令 area area-id nssa [no-redistr-ibution] [default-information-originate] [metric metric-value] [metric-type type-value]而不是 area area-id stub</li>
  <li>(可选)ABR上配置默认路由的开销。</li>
</ul>

<p><img src="/assets/images/ospf/85.png" /></p>

<p><img src="/assets/images/ospf/86.png" /></p>

<p><img src="/assets/images/ospf/87.png" /></p>

<h3 id="ospf-nssa-的-lsdb">OSPF NSSA 的 LSDB</h3>

<p><img src="/assets/images/ospf/88.png" /></p>

<p><img src="/assets/images/ospf/89.png" /></p>

<p><img src="/assets/images/ospf/90.png" /></p>

<p>注意到这里没有使用ASBR汇总（4类）LSA，因为5类外部LSA来自ABR而不是ASBR，而ABR在区域0内。如果区域为标准区域，ASBR将生成5类LSA，而ABR将创建4类LSA，以告诉其他路由器如何前往ASBR。</p>

<h3 id="配置绝对末节nssacisco专有">配置绝对末节NSSA(CISCO专有)</h3>
<p>步骤</p>
<ul>
  <li>在区域内的所有路由器上配置OSPF</li>
  <li>在区域内的所有路由器上配置路由器配置命令 area area-id nssa [no-redistr-ibution] [default-information-originate] [metric metric-value] [metric-type type-value]而不是area area-id stub</li>
  <li>在ABR上，在命令area area-id nssa中添加关键字no-summary</li>
  <li>(可选)在ABR上配置默认路由的开销</li>
</ul>

<p><img src="/assets/images/ospf/91.png" /></p>

<p><img src="/assets/images/ospf/92.png" /></p>

<p><img src="/assets/images/ospf/93.png" /></p>

<p>#各种OSPF区域示例</p>

<p><img src="/assets/images/ospf/94.png" /></p>

<p>区域11为标准区域，它接受链路更新、汇总和外部路由。
区域14为末节区域，它不接受4类汇总LSA和5类外部LSA，但接受3类汇总LSA。
区域12为绝对末节区域，它不接受汇总LSA和外部LSA。
区域10为NSSA，它不接受4类汇总LSA和5类外部LSA，但接受3类汇总LSA且可以有ASBR。
区域13为绝对末节NSSA，它不接受汇总LSA和外部LSA，但可以有ASBR</p>

<p><img src="/assets/images/ospf/95.png" /></p>

<h3 id="默认路由">默认路由</h3>
<p>在标准区域中，路由器不生成默认路由 ，可使用命令default-information originate [always] [metric metric-value]  [metric-typetype-value] [route-map map-name]。默认情况下，该命令生成一条E2 路由，其链路状态ID为0.0.0.0，网络掩码为0.0.0.0，导致路由器成为ASBR。
末节区域和绝对末节区域，与末节区域相连的ABR将生成一个链路状态ID为0.0.0.0的汇总LSA，即使该ABR没有默认路由
对于NSSA，默认路由是由与之相连的ABR生成的，但默认情况下不会生成。要让ABR生成默认路由，可使用命令area area-idnssa default-information-originate。ABR将生成一个链路状态ID为0.0.0.0的7类LSA。如果只想将路由导入到标准区域中，而不想将其导入到NSSA中，可在NSSA ABR上使用选项no-redistribution。绝对末节NSSA的ABR自动生成一条默认路由</p>

<h2 id="身份认证">身份认证</h2>

<h3 id="配置简单密码身份验证">配置简单密码身份验证</h3>

<p>步骤</p>
<ul>
  <li>使用接口配置命令 ip ospf authentication-key password指定一个密码</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>使用接口配置命令 ip ospf authentication [message-digest</td>
          <td>null] md5指定身份验证类型</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>如果要使用简单身份验证，可在配置命令 area authentication 时不指定任何参数。</p>

<p><img src="/assets/images/ospf/100.png" /></p>

<p>示例</p>

<p><img src="/assets/images/ospf/101.png" /></p>

<p><img src="/assets/images/ospf/102.png" /></p>

<p><img src="/assets/images/ospf/103.png" /></p>

<p>验证</p>

<p><img src="/assets/images/ospf/104.png" /></p>

<p><img src="/assets/images/ospf/105.png" /></p>

<p>排障</p>
<ul>
  <li>没有在两台路由器上都配置身份验证</li>
  <li>两台路由器配置的身份验证类型不同</li>
  <li>两台路由器配置的密码不同</li>
</ul>

<p>在虚链路上配置OSPF简单密码身份验证</p>

<p><img src="/assets/images/ospf/106.png" /></p>

<h3 id="md5身份验证的配置-验证-和故障排除">MD5身份验证的配置 验证 和故障排除</h3>

<p><img src="/assets/images/ospf/107.png" /></p>

<p><img src="/assets/images/ospf/108.png" /></p>

<p>验证</p>

<p><img src="/assets/images/ospf/109.png" /></p>

<p>排障
简单密码身份验证一样，命令 debug ip ospf obj 显示与 OSPF 邻接关系相关的事件，对于排除MD5身份验证故障很有帮助</p>

<p><img src="/assets/images/ospf/110.png" /></p>

<p><img src="/assets/images/ospf/111.png" /></p>

<h2 id="总结">总结</h2>

<h3 id="ospf-使用的表">OSPF 使用的表</h3>
<p>邻居表（也叫邻接关系数据库）、拓扑表（也叫拓扑数据库[LSDB]）和路由表（也叫转发数据库）</p>

<h3 id="由两层组成ospf分层区域结构">由两层组成OSPF分层区域结构</h3>
<p>骨干区域0和常规区域。</p>

<h3 id="各类型的ospf路由器">各类型的OSPF路由器</h3>
<ul>
  <li>内部路由器</li>
  <li>骨干路由器</li>
  <li>ABR</li>
  <li>ASBR。</li>
</ul>

<h3 id="ospf-路由器如何使用-hello-协议建立邻接关系">OSPF 路由器如何使用 Hello 协议建立邻接关系</h3>
<p>两台路由器使用 Hello 分组建立邻接关系后，它们交换LSA并确认收到了邻接路由器的LSA，以同步LSDB。在点到点链路上，路由器彼此建立完全邻接关系，而在 LAN 链路上，路由器只与DR和BDR建立完全邻接关系。</p>

<h3 id="cisco-路由器如何计算-ospf-度量值">Cisco 路由器如何计算 OSPF 度量值</h3>
<p>默认情况下，根据链路带宽计算度量值；如果有速度超过 100Mbit/s 的接口，应在所有路由器上都配置路由器配置命令<strong>auto-cost reference-bandwidth ref-bw</strong>。要覆盖默认开销，可使用接口配置命令 <strong>ip ospf cost interface-cost</strong>手工指定开销。</p>

<h3 id="5-种类型的-ospf分组">5 种类型的 OSPF分组</h3>
<p>Hello、DBD、LSR、LSU 和LSAck</p>
<ul>
  <li>Hello 分组用于发现邻居和建立邻接关系</li>
  <li>DBD用于同步LSDB</li>
  <li>LSR用于请求特定的链路状态记录</li>
  <li>LSU 用于发送请求的记录</li>
  <li>LSAck 用于确认收到了其他类型的分组
    <blockquote>
      <p>OSPF 分组是在IP分组中发送的，使用的协议号为89。</p>
    </blockquote>
  </li>
</ul>

<h3 id="可能经历的ospf-邻接关系状态">可能经历的OSPF 邻接关系状态</h3>
<p>Down、Atempt、Init、双向、预启动、交换、加载和完全邻接。</p>

<h3 id="在邻接路由器上必须匹配的5个hello分组字段">在邻接路由器上，必须匹配的5个Hello分组字段</h3>
<ul>
  <li>Hello间隔</li>
  <li>失效间隔</li>
  <li>区域ID</li>
  <li>身份验证密码</li>
  <li>末节区域标记。</li>
</ul>

<h3 id="规划ospf实施">规划OSPF实施</h3>
<p>包括IP编址方案、网络拓扑和OSPF区域。对于网络中的每台路由器，需要完成的任务包括启用路由协议 OSPF 并指定进程号（可在接口上直接启用，也可使用合适的network命令）、给接口指定正确的区域ID以及给合适的接口配置度量值（这是可选的）。</p>

<h3 id="基本的ospf配置命令">基本的OSPF配置命令</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 全局配置命令 </span>
router ospf process-id。
<span class="c">#接口配置命令 </span>
network ip-address wildcard-mask area area-id 和 ip ospf process-idareaarea-id <span class="o">[</span>secondaries none]。
<span class="c">#接口配置命令</span>
bandwidth kilobits。
<span class="c">#路由器配置命令</span>
router-id ip-address。
<span class="c">#用于查看OSPF运行情况的命令。</span>
show ip ospf。
show ip route。
show ip ospf interface。
show ip ospf neighbor。
show ip route ospf。
show ip protocols。
debug ip ospf events。
debug ip ospf adj。
debug ip ospf packet。
</code></pre></div></div>
<h3 id="如何选择ospf路由器id">如何选择OSPF路由器ID</h3>
<p>路由器配置命令router-id ip-address指定的、最大的活动环回接口IP地址或最大的活动物理接口IP地址。</p>

<h3 id="ospf-定义的三类网络">OSPF 定义的三类网络</h3>
<p>点到点、广播和 NBMA。</p>

<h3 id="如何选举dr和bdr">如何选举DR和BDR</h3>
<p>优先级最高的路由器为DR，优先级次高的路由器为BDR。如果优先级相同，则根据路由器ID来选举。优先级为0的路由器不能成为DR或BDR。优先级是使用接口配置命令 ip ospf prioritynumber 设置的。</p>

<h3 id="可用于nbma网络的5种ospf运行模式">可用于NBMA网络的5种OSPF运行模式</h3>
<p>RFC模式非广播和点到多点以及Cisco模式广播、点到多点非广播和点到点。</p>

<h3 id="lsa类型">LSA类型</h3>
<p>11种 OSPF LSA类型,前5 种是最常用的，它们分别是由每台路由器生成的1类（路由器）、DR生成的2类（网络）、ABR生成的描述区域路由的3类（汇总）、ABR生成的描述前往ASBR的路由的4类（汇总）以及ASBR生成的描述前往外部的路由的5类（外部）。</p>

<h3 id="三种ospf-路由">三种OSPF 路由</h3>
<p>区域内路由（O）、区域间路由（O IA）和外部路由（O E1或OE2）。</p>

<h3 id="使用路由器配置命令">使用路由器配置命令</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>max-lsa maximum-number <span class="o">[</span>threshold-percentage] <span class="o">[</span>warning-only] <span class="o">[</span>ignore-time minutes] <span class="o">[</span>ignore-count countnumber] <span class="o">[</span>reset-time minutes]配置OSPF LSDB过载保护。
</code></pre></div></div>

<h3 id="使用路由器配置命令-1">使用路由器配置命令</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passive-interface <span class="nb">type </span>number <span class="o">[</span>default]禁止从指定路由器接口向外发送路由协议的路由更新
<span class="c"># 从OSPF 而言，指定接口看起来像末节网络，不通过该接口发送和接收OSPF路由信息。</span>
</code></pre></div></div>

<h3 id="ospf的默认路由">OSPF的默认路由</h3>
<p>在 OSPF 中可使用默认路由，这样就无需知道前往所有目标网络的具体路由。这样做的好处是，路由表和LSDB将小得多，同时又能够到达所有网络。要传播OSPF默认路由，可使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>default-information originate <span class="o">[</span>always] <span class="o">[</span>metric metric-value] <span class="o">[</span>metric-typetype-value] <span class="o">[</span>route-map map-name]。
</code></pre></div></div>

<h3 id="配置路由汇总">配置路由汇总</h3>
<p>可减少占用的CPU周期和LSA扩散，还可缩小LSDB和路由表的规模。OSPF不自动汇总</p>

<p>要在ABR上配置OSPF汇总，可使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>area area-id range address mask <span class="o">[</span>advertise | not-advertise] <span class="o">[</span>cost cost]；
</code></pre></div></div>
<p>要在ASBR 上配置 OSPF 汇总，可使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>summary-address ip-address mask <span class="o">[</span>not-advertise] <span class="o">[</span>tag tag]。
</code></pre></div></div>

<h3 id="ospf-虚链路">OSPF 虚链路</h3>
<p>这是一种用于临时修复骨干故障或将区域连接到骨干的功能。要配置虚链路，可使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>area area-id virtual-link router-id <span class="o">[</span>authentic- ation <span class="o">[</span>message-digest | null]] <span class="o">[</span>hello-interval seconds] <span class="o">[</span>retransmit-interval seconds] <span class="o">[</span>transmit-delay seconds] <span class="o">[</span>dead-interval seconds] <span class="o">[[</span>authentication-key key] | <span class="o">[</span>message-digest-keykey-idmd5key]]；要查看其运行情况，可使用命令 show ip ospf virtual-links。
</code></pre></div></div>

<h3 id="ospf-中定义的多种区域类型">OSPF 中定义的多种区域类型</h3>
<p>标准区域、骨干区域、末节区域、绝对末节区域、NSSA和绝对末节NSSA。要配置末节区域，可使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>area area-id stub；
</code></pre></div></div>
<p>在ABR上配置该命令时，如果指定了关键字<strong>no-summary</strong>，区域将被配置为绝对末节区域。要配置NSSA，应使用路由器配置命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>area area-id nssa <span class="o">[</span>no-redistribution] <span class="o">[</span>default-information-originate] <span class="o">[</span>met-ric metric-value] <span class="o">[</span>metric-type type-value] <span class="o">[</span>no-summary]
</code></pre></div></div>
<p>而不要使用命令</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>area area-id stub
</code></pre></div></div>
<p>要将区域配置成绝对末节NSSA，只需在ABR上配置该命令时指定关键字<strong>no-summary</strong>。</p>

<h3 id="ospf-身份验证类型">OSPF 身份验证类型</h3>
<ul>
  <li>null</li>
  <li>简单密码身份验证（也叫明文身份验证）</li>
  <li>MD5 身份验证</li>
  <li>要排除身份验证故障，可使用命令
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debug ip ospf adj。
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="配置ospf简单密码身份验证的命令">配置OSPF简单密码身份验证的命令</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 接口配置命令 </span>
ip ospf authentication-keypassword。
<span class="c"># 接口配置命令 </span>
ip ospf authentication 和路由器配置命令 area area-id authentication。
<span class="c"># 配置OSPF MD5 身份验证的命令</span>
<span class="c"># 接口配置命令 </span>
ip ospf message-digest-key key-id md5key。
<span class="c">#接口配置命令 </span>
ip ospf authentication message-digest 
<span class="c"># 路由器配置命令 </span>
area area-id authentication message-digest。
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="RS" /><summary type="html"><![CDATA[OSPF备忘信息]]></summary></entry><entry><title type="html">pgsql监控</title><link href="/monitor-pgsql/" rel="alternate" type="text/html" title="pgsql监控" /><published>2022-08-19T00:00:00+08:00</published><updated>2022-08-19T00:00:00+08:00</updated><id>/monitor-pgsql</id><content type="html" xml:base="/monitor-pgsql/"><![CDATA[<p>测试pgsql监控</p>

<h3 id="系统">系统</h3>
<p>Centos 7</p>

<h3 id="安装pgsql">安装pgsql</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
<span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> postgresql12-server
<span class="nb">sudo</span> /usr/pgsql-12/bin/postgresql-12-setup initdb
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>postgresql-12
<span class="nb">sudo </span>systemctl start postgresql-12
</code></pre></div></div>

<h3 id="数据库设置">数据库设置</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>su postgres
psql
CREATE USER zbx_monitor WITH PASSWORD <span class="s1">'monitor'</span> INHERIT<span class="p">;</span>
GRANT EXECUTE ON FUNCTION pg_catalog.pg_ls_dir<span class="o">(</span>text<span class="o">)</span> TO zbx_monitor<span class="p">;</span>
GRANT EXECUTE ON FUNCTION pg_catalog.pg_stat_file<span class="o">(</span>text<span class="o">)</span> TO zbx_monitor<span class="p">;</span>
GRANT EXECUTE ON FUNCTION pg_catalog.pg_ls_waldir<span class="o">()</span> TO zbx_monitor<span class="p">;</span>
</code></pre></div></div>

<h3 id="监控配置">监控配置</h3>
<p>监控页面添加主机挂载对应pgsql模板</p>

<h3 id="参考">参考</h3>
<p>https://www.postgresql.org/download/linux/redhat/</p>]]></content><author><name>Your Name</name></author><category term="Monitor" /><summary type="html"><![CDATA[测试pgsql监控]]></summary></entry><entry><title type="html">使用kubeadm 升级Kubernetes</title><link href="/kubernetes-kubeadm-update/" rel="alternate" type="text/html" title="使用kubeadm 升级Kubernetes" /><published>2022-08-18T00:00:00+08:00</published><updated>2022-08-18T00:00:00+08:00</updated><id>/kubernetes-kubeadm-update</id><content type="html" xml:base="/kubernetes-kubeadm-update/"><![CDATA[<p>升级kubernetes版本</p>

<h3 id="安装一套v1201集群">安装一套v1.20.1集群</h3>

<h4 id="创建两台主机">创建两台主机</h4>

<table>
  <thead>
    <tr>
      <th>主机名</th>
      <th>IP地址</th>
      <th>内存需求</th>
      <th>操作系统</th>
      <th>角色</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>umaster</td>
      <td>192.168.122.240</td>
      <td>4GB</td>
      <td>centos 7</td>
      <td>master</td>
    </tr>
    <tr>
      <td>unode1</td>
      <td>192.168.122.241</td>
      <td>4GB</td>
      <td>centos 7</td>
      <td>node</td>
    </tr>
  </tbody>
</table>

<h4 id="初始化配置">初始化配置</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virt-install --name umaster --ram 4096 --vcpus=4 --os-type=linux --accelerate --cdrom=/home/kvm/CentOS-7.5-x86_64-Minimal-1804.iso  --disk path=/home/kvm/umaster.qcow2,size=30,format=qcow2,bus=ide --bridge=virbr0 --vnc --vncport=60021 --vnclisten=0.0.0.0
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virt-install --name unode1 --ram 4096 --vcpus=2 --os-type=linux --accelerate --cdrom=/home/kvm/CentOS-7.5-x86_64-Minimal-1804.iso  --disk path=/home/kvm/unode1.qcow2,size=30,format=qcow2,bus=ide --bridge=virbr0 --vnc --vncport=60022 --vnclisten=0.0.0.0
</code></pre></div></div>

<p>所有节点初始化</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># master node 关闭防火墙  </span>
systemctl stop firewalld 
systemctl disable firewalld 
 
<span class="c"># master node 关闭selinux   </span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/enforcing/disabled/'</span> /etc/selinux/config  <span class="c"># 永久 </span>
setenforce 0  <span class="c"># 临时 </span>
 
<span class="c"># master node 关闭swap </span>
swapoff <span class="nt">-a</span>  <span class="c"># 临时 </span>
<span class="nb">sed</span> <span class="nt">-ri</span> <span class="s1">'s/.*swap.*/#&amp;/'</span> /etc/fstab    <span class="c"># 永久 </span>
 
<span class="c"># master node 时间同步 </span>
yum <span class="nb">install </span>ntpdate <span class="nt">-y</span> 
ntpdate time.windows.com

<span class="c"># master node 安装vim wget</span>
yum <span class="nt">-y</span> <span class="nb">install </span>vim wget 
 
<span class="c">#添加hosts </span>
<span class="nb">cat</span> <span class="o">&gt;&gt;</span> /etc/hosts <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
192.168.122.240 master
192.168.122.241 node1 
</span><span class="no">EOF 
 
</span><span class="c"># 将桥接的IPv4流量传递到iptables的链 </span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/sysctl.d/k8s.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
net.bridge.bridge-nf-call-ip6tables = 1 
net.bridge.bridge-nf-call-iptables = 1 
</span><span class="no">EOF 

</span>sysctl <span class="nt">--system</span>  <span class="c"># 生效 </span>
 
<span class="c"># master 设置 </span>
hostnamectl set-hostname master
<span class="c"># node1 设置</span>
hostnamectl set-hostname node1
<span class="c"># node2 设置</span>
hostnamectl set-hostname node2

<span class="c"># 安装docker</span>
bash &lt;<span class="o">(</span>wget <span class="nt">-O-</span> get.docker.com<span class="o">)</span>

<span class="c">#启动并设置开机启动</span>
systemctl daemon-reload
systemctl start docker
systemctl <span class="nb">enable </span>docker
systemctl status docker

<span class="c">#修改配置</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/docker/daemon.json <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
{
  "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"]
}
</span><span class="no">EOF

</span><span class="c">#重启</span>
systemctl restart docker
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> /etc/yum.repos.d/<span class="k">*</span> /tmp/
wget <span class="nt">-P</span> /etc/yum.repos.d/ ftp://ftp.rhce.cc/k8s/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> kubelet-1.20.1-0 kubeadm-1.20.1-0 kubectl-1.20.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart kubelet
systemctl <span class="nb">enable </span>kubelet
</code></pre></div></div>

<h4 id="导出配置">导出配置</h4>

<p>master上到传到umaster，修改版本</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get cm <span class="nt">-o</span> yaml <span class="nt">-n</span> kube-system kubeadm-config
apiVersion: v1
data:
  ClusterConfiguration: |
    apiServer:
      extraArgs:
        authorization-mode: Node,RBAC
      timeoutForControlPlane: 4m0s
    apiVersion: kubeadm.k8s.io/v1beta2
    certificatesDir: /etc/kubernetes/pki
    clusterName: kubernetes
    controllerManager: <span class="o">{}</span>
    dns:
      <span class="nb">type</span>: CoreDNS
    etcd:
      <span class="nb">local</span>:
        dataDir: /var/lib/etcd
    imageRepository: registry.aliyuncs.com/google_containers
    kind: ClusterConfiguration
    kubernetesVersion: v1.20.1
    networking:
      dnsDomain: cluster.local
      podSubnet: 10.244.0.0/16
      serviceSubnet: 10.96.0.0/12
    scheduler: <span class="o">{}</span>
  ClusterStatus: |
    apiEndpoints:
      master:
        advertiseAddress: 192.168.122.200
        bindPort: 6443
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: ClusterStatus
kind: ConfigMap
metadata:
  creationTimestamp: <span class="s2">"2022-07-10T12:08:39Z"</span>
  name: kubeadm-config
  namespace: kube-system
  resourceVersion: <span class="s2">"206"</span>
  uid: ccf5abbc-caed-4528-a572-9422a71112a1
</code></pre></div></div>

<p>创建集群</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm init <span class="nt">--config</span><span class="o">=</span>kubeadm-config.yaml
</code></pre></div></div>

<p>umaster执行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.kube
  <span class="nb">sudo cp</span> <span class="nt">-i</span> /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
  <span class="nb">sudo chown</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span><span class="si">)</span> <span class="nv">$HOME</span>/.kube/config
</code></pre></div></div>

<p>unode1加入集群</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm <span class="nb">join </span>192.168.122.240:6443 <span class="nt">--token</span> vy5ws2.p3e19ircj05jfoyo <span class="se">\</span>
    <span class="nt">--discovery-token-ca-cert-hash</span> sha256:6441dd3e73c23c9cc85c62454f1786d820f891a8fd73263f500fdf2180c4efb8 
</code></pre></div></div>

<h4 id="安装calico">安装calico</h4>

<p>master上执行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /tmp
wget https://docs.projectcalico.org/v3.19/manifests/calico.yaml <span class="nt">--no-check-certificate</span>
</code></pre></div></div>

<p>修改</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CALICO_IPV4POOL_CIDR</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">192.168.0.0/16"</span>
</code></pre></div></div>

<p>为</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CALICO_IPV4POOL_CIDR</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10.244.0.0/16"</span>
</code></pre></div></div>

<p>下载镜像</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@master tmp]# grep image calico.yaml 
          image: docker.io/calico/cni:v3.19.4
          image: docker.io/calico/cni:v3.19.4
          image: docker.io/calico/pod2daemon-flexvol:v3.19.4
          image: docker.io/calico/node:v3.19.4
          image: docker.io/calico/kube-controllers:v3.19.4
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in </span>calico/cni:v3.19.4 calico/pod2daemon-flexvol:v3.19.4  calico/node:v3.19.4 calico/kube-controllers:v3.19.4 <span class="p">;</span><span class="k">do </span>docker pull <span class="nv">$i</span><span class="p">;</span><span class="k">done</span>
</code></pre></div></div>

<p>安装calico</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> calico.yaml
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl get nodes
NAME      STATUS   ROLES                  AGE   VERSION
umaster   Ready    control-plane,master   16m   v1.20.1
unode1    Ready    &lt;none&gt;                 15m   v1.20.1

<span class="o">[</span>root@umaster tmp]# kubectl version <span class="nt">--short</span>
Client Version: v1.20.1
Server Version: v1.20.1
</code></pre></div></div>

<h3 id="步骤">步骤</h3>

<p>节点  先升级master  再升级worker  多台master，先升级master 在升级worker</p>

<p>软件  先升级kubeadm 然后执行 kubeadm upgrade,再升级 kubelet和kubectl</p>

<h2 id="升级master">升级master</h2>

<p>确定源里的kubeadm的可用版本</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum list <span class="nt">--showduplicates</span> kubeadm
</code></pre></div></div>

<h4 id="升级kubeadm">升级kubeadm</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nt">-y</span> <span class="nb">install </span>kubeadm-1.21.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubeadm version
kubeadm version: &amp;version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"21"</span>, GitVersion:<span class="s2">"v1.21.1"</span>, GitCommit:<span class="s2">"5e58841cce77d4bc13713ad2b91fa0d961e69192"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2021-05-12T14:17:27Z"</span>, GoVersion:<span class="s2">"go1.16.4"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
</code></pre></div></div>

<h4 id="查看集群是否需要升级以及可以升级的版本">查看集群是否需要升级,以及可以升级的版本</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubeadm upgrade plan
<span class="o">[</span>upgrade/config] Making sure the configuration is correct:
<span class="o">[</span>upgrade/config] Reading configuration from the cluster...
<span class="o">[</span>upgrade/config] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks.
<span class="o">[</span>upgrade] Running cluster health checks
<span class="o">[</span>upgrade] Fetching available versions to upgrade to
<span class="o">[</span>upgrade/versions] Cluster version: v1.20.1
<span class="o">[</span>upgrade/versions] kubeadm version: v1.21.1
I0710 23:34:23.085584    1579 version.go:254] remote version is much newer: v1.24.2<span class="p">;</span> falling back to: stable-1.21
<span class="o">[</span>upgrade/versions] Target version: v1.21.14
<span class="o">[</span>upgrade/versions] Latest version <span class="k">in </span>the v1.20 series: v1.20.15

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       TARGET
kubelet     2 x v1.20.1   v1.20.15

Upgrade to the latest version <span class="k">in </span>the v1.20 series:

COMPONENT                 CURRENT    TARGET
kube-apiserver            v1.20.1    v1.20.15
kube-controller-manager   v1.20.1    v1.20.15
kube-scheduler            v1.20.1    v1.20.15
kube-proxy                v1.20.1    v1.20.15
CoreDNS                   1.7.0      v1.8.0
etcd                      3.4.13-0   3.4.13-0

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.20.15

_____________________________________________________________________

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       TARGET
kubelet     2 x v1.20.1   v1.21.14

Upgrade to the latest stable version:

COMPONENT                 CURRENT    TARGET
kube-apiserver            v1.20.1    v1.21.14
kube-controller-manager   v1.20.1    v1.21.14
kube-scheduler            v1.20.1    v1.21.14
kube-proxy                v1.20.1    v1.21.14
CoreDNS                   1.7.0      v1.8.0
etcd                      3.4.13-0   3.4.13-0

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.21.14

Note: Before you can perform this upgrade, you have to update kubeadm to v1.21.14.

_____________________________________________________________________


The table below shows the current state of component configs as understood by this version of kubeadm.
Configs that have a <span class="s2">"yes"</span> mark <span class="k">in </span>the <span class="s2">"MANUAL UPGRADE REQUIRED"</span> column require manual config upgrade or
resetting to kubeadm defaults before a successful upgrade can be performed. The version to manually
upgrade to is denoted <span class="k">in </span>the <span class="s2">"PREFERRED VERSION"</span> column.

API GROUP                 CURRENT VERSION   PREFERRED VERSION   MANUAL UPGRADE REQUIRED
kubeproxy.config.k8s.io   v1alpha1          v1alpha1            no
kubelet.config.k8s.io     v1beta1           v1beta1             no
_____________________________________________________________________
</code></pre></div></div>

<h4 id="master置为维护模式">master置为维护模式</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl drain umaster <span class="nt">--ignore-daemonsets</span>
node/umaster cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-76vzp, kube-system/kube-proxy-ttm4n
evicting pod kube-system/coredns-7f89b7bc75-qrns5
evicting pod kube-system/calico-kube-controllers-848c5d445f-8v7t2
evicting pod kube-system/coredns-7f89b7bc75-p54c4
pod/coredns-7f89b7bc75-qrns5 evicted
pod/coredns-7f89b7bc75-p54c4 evicted
pod/calico-kube-controllers-848c5d445f-8v7t2 evicted
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl get nodes
NAME      STATUS                     ROLES                  AGE   VERSION
umaster   Ready,SchedulingDisabled   control-plane,master   47m   v1.20.1
unode1    Ready                      &lt;none&gt;                 46m   v1.20.1
</code></pre></div></div>

<p>处理coredns</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull coredns/coredns:1.8.0
docker tag coredns/coredns:1.8.0 registry.aliyuncs.com/google_containers/coredns/coredns:v1.8.0
docker rmi coredns/coredns:1.8.0
</code></pre></div></div>

<h4 id="升级组件">升级组件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubeadm upgrade apply v1.21.1
<span class="o">[</span>upgrade/config] Making sure the configuration is correct:
<span class="o">[</span>upgrade/config] Reading configuration from the cluster...
<span class="o">[</span>upgrade/config] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks.
<span class="o">[</span>upgrade] Running cluster health checks
<span class="o">[</span>upgrade/version] You have chosen to change the cluster version to <span class="s2">"v1.21.1"</span>
<span class="o">[</span>upgrade/versions] Cluster version: v1.20.1
<span class="o">[</span>upgrade/versions] kubeadm version: v1.21.1
<span class="o">[</span>upgrade/confirm] Are you sure you want to proceed with the upgrade? <span class="o">[</span>y/N]: y
<span class="o">[</span>upgrade/prepull] Pulling images required <span class="k">for </span>setting up a Kubernetes cluster
<span class="o">[</span>upgrade/prepull] This might take a minute or two, depending on the speed of your internet connection
<span class="o">[</span>upgrade/prepull] You can also perform this action <span class="k">in </span>beforehand using <span class="s1">'kubeadm config images pull'</span>
<span class="o">[</span>upgrade/apply] Upgrading your Static Pod-hosted control plane to version <span class="s2">"v1.21.1"</span>...
Static pod: kube-apiserver-umaster <span class="nb">hash</span>: 6df1b5224c3fc3fb71a622a2c30fcaea
Static pod: kube-controller-manager-umaster <span class="nb">hash</span>: de64b953177047fd563a18150d6c6070
Static pod: kube-scheduler-umaster <span class="nb">hash</span>: 78404d25f9e940515e51f92dc60988eb
<span class="o">[</span>upgrade/etcd] Upgrading to TLS <span class="k">for </span>etcd
Static pod: etcd-umaster <span class="nb">hash</span>: 8810d7e5e8825396038f6fef0fb4bd30
<span class="o">[</span>upgrade/staticpods] Preparing <span class="k">for</span> <span class="s2">"etcd"</span> upgrade
<span class="o">[</span>upgrade/staticpods] Current and new manifests of etcd are equal, skipping upgrade
<span class="o">[</span>upgrade/etcd] Waiting <span class="k">for </span>etcd to become available
<span class="o">[</span>upgrade/staticpods] Writing new Static Pod manifests to <span class="s2">"/etc/kubernetes/tmp/kubeadm-upgraded-manifests922784263"</span>
<span class="o">[</span>upgrade/staticpods] Preparing <span class="k">for</span> <span class="s2">"kube-apiserver"</span> upgrade
<span class="o">[</span>upgrade/staticpods] Renewing apiserver certificate
<span class="o">[</span>upgrade/staticpods] Renewing apiserver-kubelet-client certificate
<span class="o">[</span>upgrade/staticpods] Renewing front-proxy-client certificate
<span class="o">[</span>upgrade/staticpods] Renewing apiserver-etcd-client certificate
<span class="o">[</span>upgrade/staticpods] Moved new manifest to <span class="s2">"/etc/kubernetes/manifests/kube-apiserver.yaml"</span> and backed up old manifest to <span class="s2">"/etc/kubernetes/tmp/kubeadm-backup-manifests-2022-07-10-23-44-12/kube-apiserver.yaml"</span>
<span class="o">[</span>upgrade/staticpods] Waiting <span class="k">for </span>the kubelet to restart the component
<span class="o">[</span>upgrade/staticpods] This might take a minute or longer depending on the component/version gap <span class="o">(</span><span class="nb">timeout </span>5m0s<span class="o">)</span>
Static pod: kube-apiserver-umaster <span class="nb">hash</span>: 6df1b5224c3fc3fb71a622a2c30fcaea
Static pod: kube-apiserver-umaster <span class="nb">hash</span>: bec11aedb967e3dd4da819e28c3611dc
<span class="o">[</span>apiclient] Found 1 Pods <span class="k">for </span>label selector <span class="nv">component</span><span class="o">=</span>kube-apiserver
<span class="o">[</span>upgrade/staticpods] Component <span class="s2">"kube-apiserver"</span> upgraded successfully!
<span class="o">[</span>upgrade/staticpods] Preparing <span class="k">for</span> <span class="s2">"kube-controller-manager"</span> upgrade
<span class="o">[</span>upgrade/staticpods] Renewing controller-manager.conf certificate
<span class="o">[</span>upgrade/staticpods] Moved new manifest to <span class="s2">"/etc/kubernetes/manifests/kube-controller-manager.yaml"</span> and backed up old manifest to <span class="s2">"/etc/kubernetes/tmp/kubeadm-backup-manifests-2022-07-10-23-44-12/kube-controller-manager.yaml"</span>
<span class="o">[</span>upgrade/staticpods] Waiting <span class="k">for </span>the kubelet to restart the component
<span class="o">[</span>upgrade/staticpods] This might take a minute or longer depending on the component/version gap <span class="o">(</span><span class="nb">timeout </span>5m0s<span class="o">)</span>
Static pod: kube-controller-manager-umaster <span class="nb">hash</span>: de64b953177047fd563a18150d6c6070
Static pod: kube-controller-manager-umaster <span class="nb">hash</span>: d69c9bc304051e2fcc0aba1a366e8511
<span class="o">[</span>apiclient] Found 1 Pods <span class="k">for </span>label selector <span class="nv">component</span><span class="o">=</span>kube-controller-manager
<span class="o">[</span>upgrade/staticpods] Component <span class="s2">"kube-controller-manager"</span> upgraded successfully!
<span class="o">[</span>upgrade/staticpods] Preparing <span class="k">for</span> <span class="s2">"kube-scheduler"</span> upgrade
<span class="o">[</span>upgrade/staticpods] Renewing scheduler.conf certificate
<span class="o">[</span>upgrade/staticpods] Moved new manifest to <span class="s2">"/etc/kubernetes/manifests/kube-scheduler.yaml"</span> and backed up old manifest to <span class="s2">"/etc/kubernetes/tmp/kubeadm-backup-manifests-2022-07-10-23-44-12/kube-scheduler.yaml"</span>
<span class="o">[</span>upgrade/staticpods] Waiting <span class="k">for </span>the kubelet to restart the component
<span class="o">[</span>upgrade/staticpods] This might take a minute or longer depending on the component/version gap <span class="o">(</span><span class="nb">timeout </span>5m0s<span class="o">)</span>
Static pod: kube-scheduler-umaster <span class="nb">hash</span>: 78404d25f9e940515e51f92dc60988eb
Static pod: kube-scheduler-umaster <span class="nb">hash</span>: 57952607cc2b5d4a4ac242954121e925
<span class="o">[</span>apiclient] Found 1 Pods <span class="k">for </span>label selector <span class="nv">component</span><span class="o">=</span>kube-scheduler
<span class="o">[</span>upgrade/staticpods] Component <span class="s2">"kube-scheduler"</span> upgraded successfully!
<span class="o">[</span>upgrade/postupgrade] Applying label node-role.kubernetes.io/control-plane<span class="o">=</span><span class="s1">''</span> to Nodes with label node-role.kubernetes.io/master<span class="o">=</span><span class="s1">''</span> <span class="o">(</span>deprecated<span class="o">)</span>
<span class="o">[</span>upgrade/postupgrade] Applying label node.kubernetes.io/exclude-from-external-load-balancers<span class="o">=</span><span class="s1">''</span> to control plane Nodes
<span class="o">[</span>upload-config] Storing the configuration used <span class="k">in </span>ConfigMap <span class="s2">"kubeadm-config"</span> <span class="k">in </span>the <span class="s2">"kube-system"</span> Namespace
<span class="o">[</span>kubelet] Creating a ConfigMap <span class="s2">"kubelet-config-1.21"</span> <span class="k">in </span>namespace kube-system with the configuration <span class="k">for </span>the kubelets <span class="k">in </span>the cluster
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="k">in </span>order <span class="k">for </span>nodes to get long term certificate credentials
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow certificate rotation <span class="k">for </span>all node client certificates <span class="k">in </span>the cluster
<span class="o">[</span>addons] Applied essential addon: CoreDNS
<span class="o">[</span>addons] Applied essential addon: kube-proxy

<span class="o">[</span>upgrade/successful] SUCCESS! Your cluster was upgraded to <span class="s2">"v1.21.1"</span><span class="nb">.</span> Enjoy!

<span class="o">[</span>upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets <span class="k">if </span>you haven<span class="s1">'t already done so.
</span></code></pre></div></div>

<p>如果不想升级某个组建,可以添加上 –etcd-upgrade=false</p>

<h4 id="取消维护模式">取消维护模式</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl uncordon umaster
node/umaster uncordoned

<span class="o">[</span>root@umaster tmp]# kubectl get nodes
NAME      STATUS   ROLES                  AGE   VERSION
umaster   Ready    control-plane,master   53m   v1.20.1
unode1    Ready    &lt;none&gt;                 52m   v1.20.1
</code></pre></div></div>

<h4 id="升级master上的kubelet和kubectl">升级master上的kubelet和kubectl</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> kubelet-1.21.1-0 kubectl-1.21.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<h4 id="重启服务">重启服务</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart kubelet
</code></pre></div></div>

<h4 id="查看版本">查看版本</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl version <span class="nt">--short</span>
Client Version: v1.21.1
Server Version: v1.21.1
</code></pre></div></div>

<h3 id="升级worker">升级worker</h3>

<h4 id="升级kubeadm-1">升级kubeadm</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nt">-y</span> <span class="nb">install </span>kubeadm-1.21.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<h4 id="置为维护模式-master操作">置为维护模式-master操作</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl drain unode1 <span class="nt">--ignore-daemonsets</span>
node/unode1 cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-wvf6l, kube-system/kube-proxy-2c88l
evicting pod kube-system/coredns-7f89b7bc75-vqghq
evicting pod kube-system/calico-kube-controllers-848c5d445f-vxmk6
evicting pod kube-system/coredns-545d6fc579-rp2sv
evicting pod kube-system/coredns-545d6fc579-v647b
pod/coredns-7f89b7bc75-vqghq evicted
pod/coredns-545d6fc579-v647b evicted
pod/coredns-545d6fc579-rp2sv evicted
pod/calico-kube-controllers-848c5d445f-vxmk6 evicted
node/unode1 evicted
</code></pre></div></div>

<p>查看状态</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@umaster tmp]# kubectl get nodes
NAME      STATUS                     ROLES                  AGE   VERSION
umaster   Ready                      control-plane,master   72m   v1.21.1
unode1    Ready,SchedulingDisabled   &lt;none&gt;                 71m   v1.20.1
</code></pre></div></div>

<h4 id="升级">升级</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@unode1 tmp]# kubeadm upgrade node
<span class="o">[</span>upgrade] Reading configuration from the cluster...
<span class="o">[</span>upgrade] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks
<span class="o">[</span>preflight] Skipping prepull. Not a control plane node.
<span class="o">[</span>upgrade] Skipping phase. Not a control plane node.
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>upgrade] The configuration <span class="k">for </span>this node was successfully updated!
<span class="o">[</span>upgrade] Now you should go ahead and upgrade the kubelet package using your package manager.
</code></pre></div></div>

<h4 id="更新kubelet-和-kubectl">更新kubelet 和 kubectl</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> kubelet-1.21.1-0 kubectl-1.21.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<h4 id="取消维护">取消维护</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl uncordon unode1
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[升级kubernetes版本]]></summary></entry><entry><title type="html">docker 入门 – 02</title><link href="/docker-02/" rel="alternate" type="text/html" title="docker 入门 – 02" /><published>2022-08-17T00:00:00+08:00</published><updated>2022-08-17T00:00:00+08:00</updated><id>/docker-02</id><content type="html" xml:base="/docker-02/"><![CDATA[<p>自定义镜像 数据卷  仓库</p>

<h4 id="自定义镜像">自定义镜像</h4>

<p>需要写Dockerfile文件 ,如果名字不叫Dockerfile,则需要使用-f来指定文件</p>

<p>常用命令:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM:                          指定基镜像
MAINTAINER:                    维护者信息
RUN:                           在临时容器里执行的操作系统命令
ADD file /path/ :              把物理机里file拷贝到镜像的制定目录 /path
COPY file /path/ :             把物理机里file拷贝到镜像的制定目录 /path
ENV:                           指定变量
USER:                          指定容器内部以哪个用户运行进程
VOLUME:                        指定数据卷
EXPOSE:                        指定镜像容器所使用的端口，只是一个标记
CMD:                           指定镜像创建出来的容器运行在什么进程
</code></pre></div></div>

<h4 id="创建一个可以执行ipconfig的centos镜像">创建一个可以执行ipconfig的centos镜像</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>yun <span class="nt">-y</span> <span class="nb">install </span>net-tools <span class="nt">-y</span>
<span class="k">CMD</span><span class="s"> ["/bin/bash"]</span>
</code></pre></div></div>

<p>构建命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:ifconfig <span class="nt">-f</span> Dockerfile
</code></pre></div></div>

<p>使用命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:ifconfig <span class="nb">.</span>
</code></pre></div></div>

<p>输出</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM centos:7
7: Pulling from library/centos
2d473b07cdd5: Pull <span class="nb">complete 
</span>Digest: sha256:c73f515d06b0fa07bb18d8202035e739a494ce760aa73129f60f4bf2bd22b407
Status: Downloaded newer image <span class="k">for </span>centos:7
 <span class="nt">---</span><span class="o">&gt;</span> eeb6ee3f44bd
Step 2/4 : MAINTAINER yaliang.yin@eeoa.com
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>e818620bd59b
Removing intermediate container e818620bd59b
 <span class="nt">---</span><span class="o">&gt;</span> 3bb5dd251ef3
Step 3/4 : RUN yum <span class="nb">install </span>net-tools <span class="nt">-y</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>ec51a9326dd6
Loaded plugins: fastestmirror, ovl
Determining fastest mirrors
 <span class="k">*</span> base: mirrors.bfsu.edu.cn
 <span class="k">*</span> extras: mirrors.bfsu.edu.cn
 <span class="k">*</span> updates: mirrors.bfsu.edu.cn
Resolving Dependencies
<span class="nt">--</span><span class="o">&gt;</span> Running transaction check
<span class="nt">---</span><span class="o">&gt;</span> Package net-tools.x86_64 0:2.0-0.25.20131004git.el7 will be installed
<span class="nt">--</span><span class="o">&gt;</span> Finished Dependency Resolution

Dependencies Resolved

<span class="o">================================================================================</span>
 Package         Arch         Version                          Repository  Size
<span class="o">================================================================================</span>
Installing:
 net-tools       x86_64       2.0-0.25.20131004git.el7         base       306 k

Transaction Summary
<span class="o">================================================================================</span>
Install  1 Package

Total download size: 306 k
Installed size: 917 k
Downloading packages:
warning: /var/cache/yum/x86_64/7/base/packages/net-tools-2.0-0.25.20131004git.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY
Public key <span class="k">for </span>net-tools-2.0-0.25.20131004git.el7.x86_64.rpm is not installed
Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
Importing GPG key 0xF4A80EB5:
 Userid     : <span class="s2">"CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;"</span>
 Fingerprint: 6341 ab27 53d7 8a78 a7c2 7bb1 24c6 a8a7 f4a8 0eb5
 Package    : centos-release-7-9.2009.0.el7.centos.x86_64 <span class="o">(</span>@CentOS<span class="o">)</span>
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
Running transaction check
Running transaction <span class="nb">test
</span>Transaction <span class="nb">test </span>succeeded
Running transaction
  Installing : net-tools-2.0-0.25.20131004git.el7.x86_64                    1/1 
  Verifying  : net-tools-2.0-0.25.20131004git.el7.x86_64                    1/1 

Installed:
  net-tools.x86_64 0:2.0-0.25.20131004git.el7                                   

Complete!
Removing intermediate container ec51a9326dd6
 <span class="nt">---</span><span class="o">&gt;</span> 323418cab375
Step 4/4 : CMD <span class="o">[</span><span class="s2">"/bin/bash"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>5bd2a3ebeaef
Removing intermediate container 5bd2a3ebeaef
 <span class="nt">---</span><span class="o">&gt;</span> 9d02a810de55
Successfully built 9d02a810de55
Successfully tagged centos:ifconfig
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@docker:/tmp/docker# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:ifconfig
<span class="o">[</span>root@62d870933f79 /]# ifconfig
eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.2  netmask 255.255.255.0  broadcast 192.168.0.255
        ether 02:42:c0:a8:00:02  txqueuelen 0  <span class="o">(</span>Ethernet<span class="o">)</span>
        RX packets 9  bytes 979 <span class="o">(</span>979.0 B<span class="o">)</span>
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  <span class="o">(</span>Local Loopback<span class="o">)</span>
        RX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 <span class="o">(</span>0.0 B<span class="o">)</span>
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre></div></div>

<h4 id="自定义nginx镜像">自定义nginx镜像</h4>

<p>拷贝repo文件</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>yum <span class="nt">-y</span> <span class="nb">install </span>epel-release
<span class="k">RUN </span>yum <span class="nt">-y</span> update
<span class="k">RUN </span>yum <span class="nt">-y</span> <span class="nb">install </span>nginx
<span class="k">ADD</span><span class="s"> index.html /usr/share/nginx/html</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">CMD</span><span class="s"> ["nginx","-g","daemon off;"]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>index.html
nginx
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:nginx <span class="nb">.</span>
</code></pre></div></div>

<p>运行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span><span class="o">=</span>nginx <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-p80</span>:80 centos:nginx
</code></pre></div></div>

<p>访问测试</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# curl 192.168.122.100
nginx
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker <span class="nb">rm</span> <span class="nt">-f</span> d3
d3
</code></pre></div></div>

<h4 id="add和copy的区别">ADD和COPY的区别</h4>

<p>ADD 会解压</p>

<p>COPY 不解压</p>

<h4 id="user命令的使用">USER命令的使用</h4>

<p>docker file</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">RUN </span>useradd zabbix
<span class="k">USER</span><span class="s"> zabbix</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">--name</span><span class="o">=</span>user <span class="nt">-it</span> centos:user
<span class="o">[</span>zabbix@d783a47f5cad /]<span class="nv">$ </span><span class="nb">whoami
</span>zabbix
</code></pre></div></div>

<p>指定用户运行</p>

<p>–user</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker <span class="nb">exec</span> <span class="nt">-it</span> <span class="nt">--user</span><span class="o">=</span>root user /bin/bash
<span class="o">[</span>root@d783a47f5cad /]# <span class="nb">whoami
</span>root
</code></pre></div></div>

<h4 id="使用env指定变量">使用ENV指定变量</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@docker ~]# cat Dockerfile 
<span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">ENV</span><span class="s"> zabbixdir=/tmp</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> centos:env <span class="nb">.</span>
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:env
<span class="o">[</span>root@c5e757373d8f /]# <span class="nb">echo</span> <span class="nv">$zabbixdir</span>
/tmp
</code></pre></div></div>

<h4 id="数据卷">数据卷</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> centos:7</span>
<span class="k">MAINTAINER</span><span class="s"> yaliang.yin@eeoa.com</span>
<span class="k">VOLUME</span><span class="s"> ["/data1"]</span>
<span class="k">CMD</span><span class="s"> ["bin/bash"]</span>
</code></pre></div></div>

<p>绑定data1到物理机的随机目录</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker run <span class="nt">--rm</span> <span class="nt">-it</span> centos:volume
<span class="o">[</span>root@58fa1b19ff20 /]# 

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker ~]# docker inspect 58 | <span class="nb">grep</span> <span class="nt">-A5</span>  Mounts
        <span class="s2">"Mounts"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"Type"</span>: <span class="s2">"volume"</span>,
                <span class="s2">"Name"</span>: <span class="s2">"113269358f756253dd6cd59063f91f3427438ae6121c981451a476fd50015506"</span>,
                <span class="s2">"Source"</span>: <span class="s2">"/var/lib/docker/volumes/113269358f756253dd6cd59063f91f3427438ae6121c981451a476fd50015506/_data"</span>,
                <span class="s2">"Destination"</span>: <span class="s2">"/data1"</span>,
</code></pre></div></div>

<h2 id="使用registry-搭建私有仓库">使用registry 搭建私有仓库</h2>

<p>不做介绍</p>

<h2 id="使用harbor搭建私有仓库">使用harbor搭建私有仓库</h2>

<p>安装harbor需要docker-compose</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nt">-y</span> <span class="nb">install </span>epel-release
yum <span class="nt">-y</span> update
yum <span class="nt">-y</span> <span class="nb">install </span>docker-compose
</code></pre></div></div>

<p>看下版本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose -v
</code></pre></div></div>

<p>修改docker的配置</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/docker/daemon.json
<span class="o">{</span>
  <span class="s2">"registry-mirrors"</span>: <span class="o">[</span><span class="s2">"http://192.168.122.100"</span><span class="o">]</span>
<span class="o">}</span>

</code></pre></div></div>

<p>重启docker</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart docker
</code></pre></div></div>

<p>下载</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /tmp
wget https://github.com/goharbor/harbor/releases/download/v2.5.3/harbor-offline-installer-v2.5.3.tgz
<span class="nb">tar </span>zxvfp harbor-offline-installer-v2.5.3.tgz
<span class="nb">cd </span>harbor
docker load <span class="nt">-i</span> harbor.v2.5.3.tar.gz
./prepare
<span class="nb">cp </span>harbor.yml.tmpl harbor.yml
</code></pre></div></div>

<p>编辑harbor.yml文件,将hostname修改为本机名称</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 5 hostname: docker
</code></pre></div></div>

<p>注释以下几行</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 15 #  port: 443
 16   # The path of cert and key files for nginx
 17 #  certificate: /your/certificate/path
 18 #  private_key: /your/private/key/path
</code></pre></div></div>

<p>修改默认密码,默认为Harbor12345</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>34 harbor_admin_password: docker
</code></pre></div></div>

<p>安装</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./install.sh 
</code></pre></div></div>

<p>访问</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.122.100
</code></pre></div></div>

<p>修改 /etc/docker/daemon.json,增加</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"insecure-registries"</span>:[<span class="s2">"192.168.122.100"</span><span class="o">]</span>
</code></pre></div></div>

<p>重启docker</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart docker
</code></pre></div></div>

<p>登录仓库</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@docker harbor]# docker login 192.168.122.100
Username: yinyaliang
Password: 
WARNING! Your password will be stored unencrypted <span class="k">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
<span class="o">[</span>root@docker harbo
</code></pre></div></div>

<p>推送镜像</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker tag centos:volume 192.168.122.100/cka/centos:volume
docker push 192.168.122.100/cka/centos:volume
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[自定义镜像 数据卷 仓库]]></summary></entry><entry><title type="html">使用kubeadm 安装Kubernetes</title><link href="/kubernetes-kubeadm-install/" rel="alternate" type="text/html" title="使用kubeadm 安装Kubernetes" /><published>2022-08-17T00:00:00+08:00</published><updated>2022-08-17T00:00:00+08:00</updated><id>/kubernetes-kubeadm-install</id><content type="html" xml:base="/kubernetes-kubeadm-install/"><![CDATA[<p>介绍使用kubeadm部署集群</p>

<h3 id="使用kubeadm-部署集群">使用kubeadm 部署集群</h3>

<h4 id="master上的组件">master上的组件</h4>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>kubectl</td>
      <td>命令行工具，用户来创建、删除，都使用此工具</td>
    </tr>
    <tr>
      <td>api-server</td>
      <td>接口,接收用户发送的请求</td>
    </tr>
    <tr>
      <td>scheduler</td>
      <td>调度器,当用户创建pod时,判断这个pod会调度到哪个worker</td>
    </tr>
    <tr>
      <td>controller-manager</td>
      <td>k8s的大管家,包括监测节点的状态,pod的数目</td>
    </tr>
  </tbody>
</table>

<h4 id="worker上的组件">worker上的组件</h4>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>kubelet</td>
      <td>在包括master上的所有节点上运行,是一个代理,接受master分配的任务,并把节点的信息反馈给master上的api-server</td>
    </tr>
    <tr>
      <td>kube-proxy</td>
      <td>在包括master在内的所有节点上运行,用于把发送给server的请求转发给后端的Pod,有iptables和ipvs两种模式.</td>
    </tr>
    <tr>
      <td>calico网络</td>
      <td>使得节点的pod能够互相通信,集群安装好后,一定要安装它</td>
    </tr>
  </tbody>
</table>

<h4 id="安装集群">安装集群</h4>

<h4 id="建立主机">建立主机</h4>

<table>
  <thead>
    <tr>
      <th>主机名</th>
      <th>IP地址</th>
      <th>内存需求</th>
      <th>操作系统</th>
      <th>角色</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>master</td>
      <td>192.168.122.200</td>
      <td>4GB</td>
      <td>centos 7</td>
      <td>master</td>
    </tr>
    <tr>
      <td>node1</td>
      <td>192.168.122.202</td>
      <td>4GB</td>
      <td>centos 7</td>
      <td>node</td>
    </tr>
    <tr>
      <td>node2</td>
      <td>192.168.122.203</td>
      <td>4GB</td>
      <td>centos 7</td>
      <td>node</td>
    </tr>
  </tbody>
</table>

<h4 id="初始化配置">初始化配置</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virt-install --name k8smaster --ram 4096 --vcpus=4 --os-type=linux --accelerate --cdrom=/home/kvm/CentOS-7.5-x86_64-Minimal-1804.iso  --disk path=/home/kvm/k8smaster.qcow2,size=30,format=qcow2,bus=ide --bridge=virbr0 --vnc --vncport=60011 --vnclisten=0.0.0.0
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virt-install --name k8snode1 --ram 4096 --vcpus=2 --os-type=linux --accelerate --cdrom=/home/kvm/CentOS-7.5-x86_64-Minimal-1804.iso  --disk path=/home/kvm/k8snode1.qcow2,size=30,format=qcow2,bus=ide --bridge=virbr0 --vnc --vncport=60012 --vnclisten=0.0.0.0
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>virt-install --name k8snode2 --ram 4096 --vcpus=2 --os-type=linux --accelerate --cdrom=/home/kvm/CentOS-7.5-x86_64-Minimal-1804.iso  --disk path=/home/kvm/k8snode2.qcow2,size=30,format=qcow2,bus=ide --bridge=virbr0 --vnc --vncport=60013 --vnclisten=0.0.0.0
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># master node 关闭防火墙  </span>
systemctl stop firewalld 
systemctl disable firewalld 
 
<span class="c"># master node 关闭selinux   </span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/enforcing/disabled/'</span> /etc/selinux/config  <span class="c"># 永久 </span>
setenforce 0  <span class="c"># 临时 </span>
 
<span class="c"># master node 关闭swap </span>
swapoff <span class="nt">-a</span>  <span class="c"># 临时 </span>
<span class="nb">sed</span> <span class="nt">-ri</span> <span class="s1">'s/.*swap.*/#&amp;/'</span> /etc/fstab    <span class="c"># 永久 </span>
 
<span class="c"># master node 时间同步 </span>
yum <span class="nb">install </span>ntpdate <span class="nt">-y</span> 
ntpdate time.windows.com

<span class="c"># master node 安装vim wget</span>
yum <span class="nt">-y</span> <span class="nb">install </span>vim wget 
 
<span class="c">#添加hosts </span>
<span class="nb">cat</span> <span class="o">&gt;&gt;</span> /etc/hosts <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</span><span class="no">EOF 
 
</span><span class="c"># 将桥接的IPv4流量传递到iptables的链 </span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/sysctl.d/k8s.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
net.bridge.bridge-nf-call-ip6tables = 1 
net.bridge.bridge-nf-call-iptables = 1 
</span><span class="no">EOF 

</span>sysctl <span class="nt">--system</span>  <span class="c"># 生效 </span>
 
<span class="c"># master 设置 </span>
hostnamectl set-hostname master
<span class="c"># node1 设置</span>
hostnamectl set-hostname node1
<span class="c"># node2 设置</span>
hostnamectl set-hostname node2

<span class="c"># 安装docker</span>
bash &lt;<span class="o">(</span>wget <span class="nt">-O-</span> get.docker.com<span class="o">)</span>

<span class="c">#启动并设置开机启动</span>
systemctl daemon-reload
systemctl start docker
systemctl <span class="nb">enable </span>docker
systemctl status docker

<span class="c">#修改配置</span>
<span class="nb">cat</span> <span class="o">&gt;</span> /etc/docker/daemon.json <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
{
  "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"]
}
</span><span class="no">EOF

</span><span class="c">#重启</span>
systemctl restart docker
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> /etc/yum.repos.d/<span class="k">*</span> /tmp/
wget <span class="nt">-P</span> /etc/yum.repos.d/ ftp://ftp.rhce.cc/k8s/<span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> kubelet-1.21.1-0 kubeadm-1.21.1-0 kubectl-1.21.1-0 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart kubelet
systemctl <span class="nb">enable </span>kubelet
</code></pre></div></div>

<p>此时的kubelet状态</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Active: activating
</code></pre></div></div>

<h4 id="安装master">安装master</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubeadm config images list
I0710 19:43:05.808790   15767 version.go:254] remote version is much newer: v1.24.2<span class="p">;</span> falling back to: stable-1.21
k8s.gcr.io/kube-apiserver:v1.21.14
k8s.gcr.io/kube-controller-manager:v1.21.14
k8s.gcr.io/kube-scheduler:v1.21.14
k8s.gcr.io/kube-proxy:v1.21.14
k8s.gcr.io/pause:3.4.1
k8s.gcr.io/etcd:3.4.13-0
k8s.gcr.io/coredns/coredns:v1.8.0
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull coredns/coredns:1.8.0
docker tag coredns/coredns:1.8.0 registry.aliyuncs.com/google_containers/coredns/coredns:v1.8.0
docker rmi coredns/coredns:1.8.0
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm init <span class="nt">--image-repository</span><span class="o">=</span>registry.aliyuncs.com/google_containers <span class="nt">--kubernetes-version</span><span class="o">=</span>v1.21.1 <span class="nt">--pod-network-cidr</span><span class="o">=</span>10.244.0.0/16
</code></pre></div></div>

<p>–image-repository 使用阿里云镜像</p>

<p>–pod-network-cidr 制定pod网段</p>

<p>复制kubeconfig文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.kube
<span class="nb">sudo cp</span> <span class="nt">-i</span> /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
<span class="nb">sudo chown</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span><span class="si">)</span> <span class="nv">$HOME</span>/.kube/config
</code></pre></div></div>

<p>把worker加入集群的命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm <span class="nb">join </span>192.168.122.200:6443 <span class="nt">--token</span> jtukiq.4perijhdbyzrtgiz <span class="se">\</span>
        <span class="nt">--discovery-token-ca-cert-hash</span> sha256:82d9f6ab3f416feeb452f37fae396439a65173b51ed0dc23c2680ed4ad5f9cc6 
</code></pre></div></div>

<p>忘记这个命令可以使用</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm token create <span class="nt">--print-join-command</span>
</code></pre></div></div>

<h3 id="添加及删除worker">添加及删除worker</h3>

<p>在node1和node2上分别执行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm <span class="nb">join </span>192.168.122.200:6443 <span class="nt">--token</span> jtukiq.4perijhdbyzrtgiz <span class="se">\</span>
        <span class="nt">--discovery-token-ca-cert-hash</span> sha256:82d9f6ab3f416feeb452f37fae396439a65173b51ed0dc23c2680ed4ad5f9cc6 
</code></pre></div></div>

<p>返回数据</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# kubeadm <span class="nb">join </span>192.168.122.200:6443 <span class="nt">--token</span> jtukiq.4perijhdbyzrtgiz <span class="se">\</span>
<span class="o">&gt;</span>         <span class="nt">--discovery-token-ca-cert-hash</span> sha256:82d9f6ab3f416feeb452f37fae396439a65173b51ed0dc23c2680ed4ad5f9cc6
<span class="o">[</span>preflight] Running pre-flight checks
        <span class="o">[</span>WARNING IsDockerSystemdCheck]: detected <span class="s2">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="s2">"systemd"</span><span class="nb">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/
<span class="o">[</span>preflight] Reading configuration from the cluster...
<span class="o">[</span>preflight] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>kubelet-start] Writing kubelet environment file with flags to file <span class="s2">"/var/lib/kubelet/kubeadm-flags.env"</span>
<span class="o">[</span>kubelet-start] Starting the kubelet
<span class="o">[</span>kubelet-start] Waiting <span class="k">for </span>the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
<span class="k">*</span> Certificate signing request was sent to apiserver and a response was received.
<span class="k">*</span> The Kubelet was informed of the new secure connection details.

Run <span class="s1">'kubectl get nodes'</span> on the control-plane to see this node <span class="nb">join </span>the cluster.

</code></pre></div></div>

<p>在master上查看node节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get nodes
NAME     STATUS     ROLES                  AGE     VERSION
master   NotReady   control-plane,master   6m59s   v1.21.1
node1    NotReady   &lt;none&gt;                 14s     v1.21.1
node2    NotReady   &lt;none&gt;                 11s     v1.21.1
</code></pre></div></div>

<h4 id="安装calico">安装calico</h4>

<p>master上执行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /tmp
wget https://docs.projectcalico.org/v3.19/manifests/calico.yaml <span class="nt">--no-check-certificate</span>
</code></pre></div></div>

<p>修改</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CALICO_IPV4POOL_CIDR</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">192.168.0.0/16"</span>
</code></pre></div></div>

<p>为</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CALICO_IPV4POOL_CIDR</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10.244.0.0/16"</span>
</code></pre></div></div>

<p>修改</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">policy/v1beat1</span>
</code></pre></div></div>

<p>为</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">policy/v1</span>
</code></pre></div></div>

<p>下载镜像</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@master tmp]# grep image calico.yaml 
          image: docker.io/calico/cni:v3.19.4
          image: docker.io/calico/cni:v3.19.4
          image: docker.io/calico/pod2daemon-flexvol:v3.19.4
          image: docker.io/calico/node:v3.19.4
          image: docker.io/calico/kube-controllers:v3.19.4
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in </span>calico/cni:v3.19.4 calico/pod2daemon-flexvol:v3.19.4  calico/node:v3.19.4 calico/kube-controllers:v3.19.4 <span class="p">;</span><span class="k">do </span>docker pull <span class="nv">$i</span><span class="p">;</span><span class="k">done</span>
</code></pre></div></div>

<p>安装calico</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> calico.yaml
</code></pre></div></div>

<p>查看节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get nodes
NAME     STATUS   ROLES                  AGE   VERSION
master   Ready    control-plane,master   17m   v1.21.1
node1    Ready    &lt;none&gt;                 10m   v1.21.1
node2    Ready    &lt;none&gt;                 10m   v1.21.1
</code></pre></div></div>

<h4 id="设置tab补全">设置tab补全</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/profile
<span class="nb">source</span> &lt;<span class="o">(</span>kubectl completion bash<span class="o">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source /etc/profile
</code></pre></div></div>

<h4 id="删除节点">删除节点</h4>

<p>设置维护模式</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl drain node1 <span class="nt">--delete-local-data</span> <span class="nt">--force</span> <span class="nt">--ignore-daemonsets</span>
</code></pre></div></div>

<p>删除节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl delete node node1
node <span class="s2">"node1"</span> deleted
</code></pre></div></div>

<p>再次加入节点</p>

<p>在node1上执行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# kubeadm reset
<span class="o">[</span>reset] WARNING: Changes made to this host by <span class="s1">'kubeadm init'</span> or <span class="s1">'kubeadm join'</span> will be reverted.
<span class="o">[</span>reset] Are you sure you want to proceed? <span class="o">[</span>y/N]: y
<span class="o">[</span>preflight] Running pre-flight checks
W0710 20:41:03.391549    4728 removeetcdmember.go:79] <span class="o">[</span>reset] No kubeadm config, using etcd pod spec to get data directory
<span class="o">[</span>reset] No etcd config found. Assuming external etcd
<span class="o">[</span>reset] Please, manually reset etcd to prevent further issues
<span class="o">[</span>reset] Stopping the kubelet service
<span class="o">[</span>reset] Unmounting mounted directories <span class="k">in</span> <span class="s2">"/var/lib/kubelet"</span>
<span class="o">[</span>reset] Deleting contents of config directories: <span class="o">[</span>/etc/kubernetes/manifests /etc/kubernetes/pki]
<span class="o">[</span>reset] Deleting files: <span class="o">[</span>/etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/bootstrap-kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf]
<span class="o">[</span>reset] Deleting contents of stateful directories: <span class="o">[</span>/var/lib/kubelet /var/lib/dockershim /var/run/kubernetes /var/lib/cni]

The reset process does not clean CNI configuration. To <span class="k">do </span>so, you must remove /etc/cni/net.d

The reset process does not reset or clean up iptables rules or IPVS tables.
If you wish to reset iptables, you must <span class="k">do </span>so manually by using the <span class="s2">"iptables"</span> command.

If your cluster was setup to utilize IPVS, run ipvsadm <span class="nt">--clear</span> <span class="o">(</span>or similar<span class="o">)</span>
to reset your system<span class="s1">'s IPVS tables.

The reset process does not clean your kubeconfig files and you must remove them manually.
Please, check the contents of the $HOME/.kube/config file.
</span></code></pre></div></div>

<p>重新加入集群</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# kubeadm <span class="nb">join </span>192.168.122.200:6443 <span class="nt">--token</span> jtukiq.4perijhdbyzrtgiz <span class="se">\</span>
<span class="o">&gt;</span>         <span class="nt">--discovery-token-ca-cert-hash</span> sha256:82d9f6ab3f416feeb452f37fae396439a65173b51ed0dc23c2680ed4ad5f9cc6
</code></pre></div></div>

<p>出错处理</p>

<p>手动删除 /etc/kubernetes/pki/和/var/lib/kubelet/两个目录</p>

<h4 id="常用命令">常用命令</h4>

<p>查看集群信息</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl cluster-info
Kubernetes control plane is running at https://192.168.122.200:6443
CoreDNS is running at https://192.168.122.200:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use <span class="s1">'kubectl cluster-info dump'</span><span class="nb">.</span>
</code></pre></div></div>

<p>查看版本</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl version
Client Version: version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"21"</span>, GitVersion:<span class="s2">"v1.21.1"</span>, GitCommit:<span class="s2">"5e58841cce77d4bc13713ad2b91fa0d961e69192"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2021-05-12T14:18:45Z"</span>, GoVersion:<span class="s2">"go1.16.4"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
Server Version: version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"21"</span>, GitVersion:<span class="s2">"v1.21.1"</span>, GitCommit:<span class="s2">"5e58841cce77d4bc13713ad2b91fa0d961e69192"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2021-05-12T14:12:29Z"</span>, GoVersion:<span class="s2">"go1.16.4"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl version <span class="nt">--short</span>
Client Version: v1.21.1
Server Version: v1.21.1
</code></pre></div></div>

<p>查看支持的api-version</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl api-versions
admissionregistration.k8s.io/v1
admissionregistration.k8s.io/v1beta1
apiextensions.k8s.io/v1
apiextensions.k8s.io/v1beta1
apiregistration.k8s.io/v1
apiregistration.k8s.io/v1beta1
apps/v1
authentication.k8s.io/v1
authentication.k8s.io/v1beta1
authorization.k8s.io/v1
authorization.k8s.io/v1beta1
autoscaling/v1
autoscaling/v2beta1
autoscaling/v2beta2
batch/v1
batch/v1beta1
certificates.k8s.io/v1
certificates.k8s.io/v1beta1
coordination.k8s.io/v1
coordination.k8s.io/v1beta1
crd.projectcalico.org/v1
discovery.k8s.io/v1
discovery.k8s.io/v1beta1
events.k8s.io/v1
events.k8s.io/v1beta1
extensions/v1beta1
flowcontrol.apiserver.k8s.io/v1beta1
networking.k8s.io/v1
networking.k8s.io/v1beta1
node.k8s.io/v1
node.k8s.io/v1beta1
policy/v1
policy/v1beta1
rbac.authorization.k8s.io/v1
rbac.authorization.k8s.io/v1beta1
scheduling.k8s.io/v1
scheduling.k8s.io/v1beta1
storage.k8s.io/v1
storage.k8s.io/v1beta1
v1
</code></pre></div></div>

<h3 id="查看pod及节点的负载">查看pod及节点的负载</h3>

<p>如果需要查看kubernetes集群每个节点及每个pod的CPU负载、内存负载、需要安装metric-serer</p>

<p>所有节点安装</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull mirrorgooglecontainers/metrics-server-amd64:v0.3.6
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker tag mirrorgooglecontainers/metrics-server-amd64:v0.3.6 k8s.gcr.io/metrics-server-amd64:v0.3.6
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi mirrorgooglecontainers/metrics-server-amd64:v0.3.6
</code></pre></div></div>

<p>master</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp
curl -Ls https://api.github.com/repos/kubernetes-sigs/metrics-server/tarball/v0.3.6 -o metrics-server-v0.3.6.tar.gz
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>zxvfp metrics-server-v0.3.6.tar.gz
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>kubernetes-sigs-metrics-server-d1f4f6f/deploy/1.8+/
</code></pre></div></div>

<p>修改</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 1.8+]# <span class="nb">cat </span>metrics-server-deployment.yaml 
<span class="nt">---</span>
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
<span class="nt">---</span>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      volumes:
      <span class="c"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span>
      - name: tmp-dir
        emptyDir: <span class="o">{}</span>
      containers:
      - name: metrics-server
        image: k8s.gcr.io/metrics-server-amd64:v0.3.6
        imagePullPolicy: IfNotPresent
        <span class="nb">command</span>:
        - /metrics-server
        - <span class="nt">--metric-resolution</span><span class="o">=</span>30s
        - <span class="nt">--kubelet-insecure-tls</span>
        - <span class="nt">--kubelet-preferred-address-types</span><span class="o">=</span>InternalIP
        volumeMounts:
</code></pre></div></div>

<p>运行当前目录</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master 1.8+]# kubectl apply <span class="nt">-f</span> <span class="nb">.</span>
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated <span class="k">in </span>v1.17+, unavailable <span class="k">in </span>v1.22+<span class="p">;</span> use rbac.authorization.k8s.io/v1 ClusterRoleBinding
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
Warning: rbac.authorization.k8s.io/v1beta1 RoleBinding is deprecated <span class="k">in </span>v1.17+, unavailable <span class="k">in </span>v1.22+<span class="p">;</span> use rbac.authorization.k8s.io/v1 RoleBinding
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
Warning: apiregistration.k8s.io/v1beta1 APIService is deprecated <span class="k">in </span>v1.19+, unavailable <span class="k">in </span>v1.22+<span class="p">;</span> use apiregistration.k8s.io/v1 APIService
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
serviceaccount/metrics-server created
deployment.apps/metrics-server created
service/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
</code></pre></div></div>

<p>查看pod的状态</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master 1.8+]# kubectl get pods <span class="nt">-n</span> kube-system | <span class="nb">grep </span>metric
metrics-server-6b7f4dfdcb-xfpl4            1/1     Running   0          59s
</code></pre></div></div>

<p>查看节点负载</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master 1.8+]# kubectl top nodes <span class="nt">--use-protocol-buffers</span>
NAME     CPU<span class="o">(</span>cores<span class="o">)</span>   CPU%   MEMORY<span class="o">(</span>bytes<span class="o">)</span>   MEMORY%   
master   245m         6%     1270Mi          32%       
node1    88m          4%     579Mi           15%       
node2    106m         5%     638Mi           16%    
</code></pre></div></div>

<p>查看metrics-server的IP地址</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master 1.8+]# kubectl get pods <span class="nt">-n</span> kube-system <span class="nt">-o</span> wide 
NAME                                       READY   STATUS    RESTARTS   AGE    IP                NODE     NOMINATED NODE   READINESS GATES
calico-kube-controllers-7cc8dd57d9-mwx5q   1/1     Running   1          92m    10.244.104.2      node2    &lt;none&gt;           &lt;none&gt;
calico-node-54njj                          1/1     Running   1          92m    192.168.122.203   node2    &lt;none&gt;           &lt;none&gt;
calico-node-559jn                          1/1     Running   1          92m    192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
calico-node-w6rwp                          1/1     Running   0          76m    192.168.122.202   node1    &lt;none&gt;           &lt;none&gt;
coredns-545d6fc579-j9f7q                   1/1     Running   1          109m   10.244.219.65     master   &lt;none&gt;           &lt;none&gt;
coredns-545d6fc579-t7st8                   1/1     Running   1          109m   10.244.219.66     master   &lt;none&gt;           &lt;none&gt;
etcd-master                                1/1     Running   1          109m   192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
kube-apiserver-master                      1/1     Running   1          109m   192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
kube-controller-manager-master             1/1     Running   1          109m   192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
kube-proxy-j28gq                           1/1     Running   1          109m   192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
kube-proxy-jgsxd                           1/1     Running   1          102m   192.168.122.203   node2    &lt;none&gt;           &lt;none&gt;
kube-proxy-qrf8c                           1/1     Running   0          76m    192.168.122.202   node1    &lt;none&gt;           &lt;none&gt;
kube-scheduler-master                      1/1     Running   1          109m   192.168.122.200   master   &lt;none&gt;           &lt;none&gt;
metrics-server-6b7f4dfdcb-xfpl4            1/1     Running   0          3m     10.244.166.129    node1    &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h3 id="了解及管理命名空间">了解及管理命名空间</h3>

<h4 id="管理命令空间">管理命令空间</h4>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master 1.8+]# kubectl get ns
NAME              STATUS   AGE
default           Active   112m
kube-node-lease   Active   112m
kube-public       Active   112m
kube-system       Active   112m
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">default</code> 没有指明使用其它名字空间的对象所使用的默认名字空间</li>
  <li><code class="language-plaintext highlighter-rouge">kube-system</code> Kubernetes 系统创建对象所使用的名字空间</li>
  <li><code class="language-plaintext highlighter-rouge">kube-public</code> 这个名字空间是自动创建的，所有用户（包括未经过身份验证的用户）都可以读取它。 这个名字空间主要用于集群使用，以防某些资源在整个集群中应该是可见和可读的。 这个名字空间的公共方面只是一种约定，而不是要求。</li>
  <li><code class="language-plaintext highlighter-rouge">kube-node-lease</code> 此名字空间用于与各个节点相关的 <a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/">租约（Lease）</a>对象。 节点租期允许 kubelet 发送<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/#heartbeats">心跳</a>，由此控制面能够检测到节点故障</li>
</ul>

<p>创建一个命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl create ns ns1
namespace/ns1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get ns
NAME              STATUS   AGE
default           Active   114m
kube-node-lease   Active   114m
kube-public       Active   114m
kube-system       Active   114m
ns1               Active   17s
</code></pre></div></div>

<p>删除命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl delete ns ns1
namespace <span class="s2">"ns1"</span> deleted
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[介绍使用kubeadm部署集群]]></summary></entry><entry><title type="html">ubuntu install zabbix agent2</title><link href="/ubuntu-install-zabbix-agent2/" rel="alternate" type="text/html" title="ubuntu install zabbix agent2" /><published>2022-08-17T00:00:00+08:00</published><updated>2022-08-17T00:00:00+08:00</updated><id>/ubuntu-install-zabbix-agent2</id><content type="html" xml:base="/ubuntu-install-zabbix-agent2/"><![CDATA[<p>ubuntu install zabbix agent2</p>

<h4 id="安装依赖">安装依赖</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    apt <span class="nb">install </span>gcc
    apt <span class="nb">install </span>libpcre3 libpcre3-dev
    apt-get <span class="nb">install </span>zlib1g-dev
    apt <span class="nb">install </span>make
</code></pre></div></div>

<h4 id="golang-安装">golang 安装</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://go.dev/doc/install
</code></pre></div></div>

<h4 id="创建组和用户">创建组和用户</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    groupadd <span class="nt">-g</span> 2210 zabbix
    useradd <span class="nt">-u</span> 2210 zabbix <span class="nt">-g</span> zabbix
</code></pre></div></div>

<h4 id="创建目录及赋权">创建目录及赋权</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/scripts/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/scripts/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/logs/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/logs/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/config/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/config/oss/zabbix
    <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> /data/run/oss/zabbix <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mkdir</span> <span class="nt">-p</span> /data/run/oss/zabbix
    
    <span class="nb">chown </span>zabbix:zabbix /data/config/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/logs/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/scripts/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    <span class="nb">chown </span>zabbix:zabbix /data/run/oss/zabbix/<span class="k">*</span> <span class="nt">-Rf</span>
    
    <span class="nb">chown </span>zabbix: <span class="nt">-R</span> /data/logs/oss/zabbix/
    <span class="nb">chown </span>zabbix: <span class="nt">-R</span> /data/run/oss/zabbix

</code></pre></div></div>

<h4 id="下载源文件">下载源文件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">cd</span> /tmp
    wget https://cdn.zabbix.com/zabbix/sources/stable/6.0/zabbix-6.0.0.tar.gz
    <span class="nb">tar </span>zxvf zabbix-6.0.0.tar.gz
    <span class="nb">cd </span>zabbix-6.0.0/

</code></pre></div></div>

<h4 id="编译安装">编译安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="c"># 5.4版本</span>
  <span class="c">#  ./configure --prefix=/usr/local/zabbix-6.0.0 --enable-agent --enable-agent2 --disable-dependency-tracking</span>
   ./configure <span class="nt">--prefix</span><span class="o">=</span>/usr/local/zabbix-6.0.0 <span class="nt">--enable-agent</span> <span class="nt">--enable-agent2</span> 
    make <span class="o">&amp;&amp;</span> make <span class="nb">install</span> 
</code></pre></div></div>

<h4 id="目录软件">目录软件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix-6.0.0 /usr/local/zabbix
    <span class="nb">ln</span> <span class="nt">-s</span> /data/scripts/oss/zabbix /usr/local/zabbix/scripts
    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix/sbin/zabbix_agentd /usr/local/bin/zabbix_agentd
    <span class="nb">ln</span> <span class="nt">-s</span> /usr/local/zabbix/sbin/zabbix_agent2 /usr/local/bin/zabbix_agent2
    
    <span class="nb">cd</span> /usr/local/zabbix
    <span class="nb">mv </span>etc/<span class="k">*</span> /data/config/oss/zabbix/
    <span class="nb">ln</span> <span class="nt">-s</span> /data/config/oss/zabbix/ etc

</code></pre></div></div>

<h4 id="zabbix-配置文件">Zabbix 配置文件</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    配置启动文件:/data/config/oss/zabbix/zabbix_agentd.conf
    	<span class="nv">PidFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agentd.pid
    	<span class="nv">LogFile</span><span class="o">=</span>/data/logs/oss/zabbix/zabbix_agentd.log
    	<span class="nv">AllowKey</span><span class="o">=</span>system.run[<span class="k">*</span><span class="o">]</span>
    	<span class="nv">ListenPort</span><span class="o">=</span>31350
    	<span class="nv">Hostname</span><span class="o">=</span>glb-ubuntu
    	<span class="nv">BufferSize</span><span class="o">=</span>1000
    	<span class="nv">Timeout</span><span class="o">=</span>3
    	<span class="nv">Include</span><span class="o">=</span>/data/config/oss/zabbix/zabbix_agentd.conf.d/<span class="k">*</span>.conf
    	<span class="nv">ListenIP</span><span class="o">=</span>10.0.9.150
    	<span class="nv">ServerActive</span><span class="o">=</span>10.0.2.39:31351
    	<span class="nv">Server</span><span class="o">=</span>10.0.2.39
</code></pre></div></div>

<h4 id="zabbix2-配置文件">Zabbix2 配置文件</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PidFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agent2.pid
<span class="nv">LogFile</span><span class="o">=</span>/data/logs/oss/zabbix/zabbix_agent2.log
<span class="nv">Server</span><span class="o">=</span>10.0.2.39,10.0.2.40
<span class="nv">ListenPort</span><span class="o">=</span>31350
<span class="nv">ListenIP</span><span class="o">=</span>10.0.2.34
<span class="nv">ServerActive</span><span class="o">=</span>10.0.2.39:31351<span class="p">;</span>10.0.2.40:31351
<span class="nv">Hostname</span><span class="o">=</span>oif-ozw3
<span class="nv">Timeout</span><span class="o">=</span>3
<span class="nv">Include</span><span class="o">=</span>/data/config/oss/zabbix/zabbix_agentd.conf.d/<span class="k">*</span>.conf
<span class="nv">ControlSocket</span><span class="o">=</span>/data/run/oss/zabbix/agent.sock
</code></pre></div></div>

<h4 id="systemd-配置-agentd">SYSTEMD 配置 agentd</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="o">[</span>Unit]
	<span class="nv">Description</span><span class="o">=</span>Zabbix Agent
	<span class="nv">After</span><span class="o">=</span>syslog.target
	<span class="nv">After</span><span class="o">=</span>network.target

	<span class="o">[</span>Service]
	<span class="nv">Type</span><span class="o">=</span>forking
	<span class="nv">User</span><span class="o">=</span>root
	<span class="nv">Group</span><span class="o">=</span>root
	<span class="nv">Environment</span><span class="o">=</span><span class="s2">"CONFFILE=/data/config/oss/zabbix/zabbix_agentd.conf"</span>
	<span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/zabbix_agentd <span class="nt">-c</span> <span class="nv">$CONFFILE</span>
	<span class="nv">PIDFile</span><span class="o">=</span>/data/run/oss/zabbix/zabbix_agentd.pid
	<span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT

	<span class="o">[</span>Install]
	<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<h4 id="systemd-配置-agent2">SYSTEMD 配置 agent2</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">[</span>Unit]
    <span class="nv">Description</span><span class="o">=</span>Zabbix Agent
    <span class="nv">After</span><span class="o">=</span>syslog.target
    <span class="nv">After</span><span class="o">=</span>network.target

    <span class="o">[</span>Service]
<span class="c">#    Type=forking   会卡住,取消</span>
    <span class="nv">User</span><span class="o">=</span>root
    <span class="nv">Group</span><span class="o">=</span>root
    <span class="nv">Environment</span><span class="o">=</span><span class="s2">"CONFFILE=/data/config/oss/zabbix/zabbix_agent2.conf"</span>
    <span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/zabbix_agent2 <span class="nt">-c</span> <span class="nv">$CONFFILE</span> 
    <span class="nv">PIDFile</span><span class="o">=</span>/data/run/oss/zabbix/agent.sock
    <span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT

    <span class="o">[</span>Install]
    <span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<h4 id="重载">重载</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    systemctl daemon-reload
</code></pre></div></div>

<h4 id="相关命令">相关命令</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    systemctl start zabbix_agent2.service
    systemctl restart zabbix_agent2.service
    systemctl stop zabbix_agent2.service
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Application" /><summary type="html"><![CDATA[ubuntu install zabbix agent2]]></summary></entry><entry><title type="html">`Centos 更新Glibc `</title><link href="/centos-update-glibc/" rel="alternate" type="text/html" title="`Centos 更新Glibc `" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/centos-update-glibc</id><content type="html" xml:base="/centos-update-glibc/"><![CDATA[<p>写CBPF需要更新系统的Glibc</p>

<h4 id="安装centos-release-scl">安装centos-release-scl</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum install centos-release-scl
</code></pre></div></div>

<h4 id="安装7版本的devtoolset">安装7版本的devtoolset</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum install devtoolset-7-gcc*
</code></pre></div></div>

<h4 id="激活">激活</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scl enable devtoolset-7 bash
</code></pre></div></div>

<h4 id="查看gcc版本">查看gcc版本</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -v
</code></pre></div></div>

<h4 id="下载安装包">下载安装包</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp
wget https://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz
tar xf glibc-2.23.tar.gz
cd glibc-2.23/
mkdir glibc-build
cd glibc-build 
</code></pre></div></div>

<h4 id="安装">安装</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>../configure --prefix=/usr
make
make install
</code></pre></div></div>

<h4 id="验证">验证</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd --version
ldd (GNU libc) 2.23

Copyright (C) 2016 Free Software Foundation, Inc.

This is free software; see the source for copying conditions.  There is NO

warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Roland McGrath and Ulrich Drepper.
</code></pre></div></div>

<h4 id="排错">排错</h4>
<p>1、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenv.c:279:6: error: suggest explicit braces to avoid ambiguous ‘else’ [-Werror=dangling-else]
   if (ep != NULL)
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>增加{}
</code></pre></div></div>

<p>2、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>../sysdeps/ieee754/dbl-64/e_pow.c:469:13: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
       if (n &lt;&lt; (k - 20))
           ~~^~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:471:17: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
       return (n &lt;&lt; (k - 21)) ? -1 : 1;
              ~~~^~~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:477:9: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
   if (m &lt;&lt; (k + 12))
       ~~^~~~~~~~~~~
../sysdeps/ieee754/dbl-64/e_pow.c:479:13: error: ‘&lt;&lt;’ in boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]
   return (m &lt;&lt; (k + 11)) ? -1 : 1;
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> if (n &lt;&lt; (k - 20)!=0)

 (n &lt;&lt; (k - 21)!=0) ? -1 : 1;

 (m &lt;&lt; (k + 12)!=0)

 (m &lt;&lt; (k + 11)!=0) ? -1 : 1;
</code></pre></div></div>

<p>3、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpc_parse.c: In function ‘get_prog_declaration’:
rpc_parse.c:543:23: error: ‘%d’ directive writing between 1 and 10 bytes into a region of size 7 [-Werror=format-overflow=]
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
                       ^~
rpc_parse.c:543:20: note: directive argument in the range [1, 2147483647]
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
                    ^~~~~~
rpc_parse.c:543:5: note: ‘sprintf’ output between 5 and 14 bytes into a destination of size 10
     sprintf (name, "%s%d", ARGNAME, num); /* default name of argument */
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sprintf (name, "%s%d", ARGNAME, (short)num)
</code></pre></div></div>

<p>4、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nis_call.c:682:6: error: suggest explicit braces to avoid ambiguous ‘else’ [-Werror=dangling-else]
   if (*loc != NULL)
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (*loc != NULL)
{ 
  for (i = 1; i &lt; 16; ++i)
    if (nis_server_cache[i] == NULL)
  {
    loc = &amp;nis_server_cache[i];
    break;
  }
    else if ((*loc)-&gt;uses &gt; nis_server_cache[i]-&gt;uses
         || ((*loc)-&gt;uses == nis_server_cache[i]-&gt;uses
         &amp;&amp; (*loc)-&gt;expires &gt; nis_server_cache[i]-&gt;expires))
  loc = &amp;nis_server_cache[i];
}
</code></pre></div></div>

<p>5、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nss_nisplus/nisplus-alias.c:300:12: error: argument 1 null where non-null expected [-Werror=nonnull]
   char buf[strlen (name) + 9 + tablename_len];
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>char buf[tablename_len + 9];
snprintf (buf, sizeof (buf), "[name=],%s", tablename_val);
</code></pre></div></div>

<p>6、</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gawk '/\.gnu\.glibc-stub\./ { \
	  sub(/\.gnu\.glibc-stub\./, "", $2); \
	  stubs[$2] = 1; } \
	END { for (s in stubs) print "#define __stub_" s }' &gt; /tmp/glibc-2.23/glibc-build/math/stubsT
gawk: error while loading shared libraries: /lib64/libm.so.6: invalid ELF header
make[2]: *** [/tmp/glibc-2.23/glibc-build/math/stubs] Error 127
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /lib64
unlink libm.so.6
ln -s libm-2.23.so libm.so.6
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Linux" /><summary type="html"><![CDATA[写CBPF需要更新系统的Glibc]]></summary></entry><entry><title type="html">`Python中的 __call__`</title><link href="/python-call/" rel="alternate" type="text/html" title="`Python中的 __call__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-call</id><content type="html" xml:base="/python-call/"><![CDATA[<p>如果python中的一个类定义了 <strong>call</strong> 方法，那么这个类它的实例就可以作为函数调用,也就是实现了 () 运算符，即可调用对象协议</p>

<h3 id="code">code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>


<span class="n">a</span> <span class="o">=</span> <span class="n">TmpTest</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
<span class="mi">4</span> <span class="mi">5</span>
</code></pre></div></div>

<p>在本文中不讨论装饰部分的内容，借用装饰器来讲解一个__call__方法的使用，如果需要将一个类作为装饰器，那需要为这个类实现__call__方法，一个使用__call__来实现类装饰器的例子</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">func</span><span class="o">=</span><span class="n">func</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">result</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>


<span class="o">@</span><span class="n">TmpTest</span>
<span class="k">def</span> <span class="nf">add_num</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>

<span class="k">print</span><span class="p">(</span><span class="n">add_num</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="mi">1</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[如果python中的一个类定义了 call 方法，那么这个类它的实例就可以作为函数调用,也就是实现了 () 运算符，即可调用对象协议]]></summary></entry><entry><title type="html">`Python中的 __enter__ __exit__`</title><link href="/python-enter-exit/" rel="alternate" type="text/html" title="`Python中的 __enter__ __exit__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-enter-exit</id><content type="html" xml:base="/python-enter-exit/"><![CDATA[<p>Python 中特殊方法的一些理解笔记</p>

<p>在python中实现了__enter__和__exit__方法，即支持上下文管理器协议。上下文管理器就是支持上下文管理器协议的对象，它是为了with而生。当with语句在开始运行时，会在上下文管理器对象上调用__enter__方法。with语句运行结束后，会在上下文管理器对象上调用__exit__方法</p>

<h3 id="语法">语法</h3>
<p>with的语法</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">EXPR</span> <span class="k">as</span> <span class="n">VAR</span><span class="p">:</span>
    <span class="n">BLOCK</span>
</code></pre></div></div>

<p>伪代码</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mgr</span> <span class="o">=</span> <span class="p">(</span><span class="n">EXPR</span><span class="p">)</span>   
<span class="nb">exit</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">mgr</span><span class="p">).</span><span class="n">__exit__</span>  <span class="c1"># Not calling it yet
</span><span class="n">value</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">mgr</span><span class="p">).</span><span class="n">__enter__</span><span class="p">(</span><span class="n">mgr</span><span class="p">)</span>    
<span class="n">exc</span> <span class="o">=</span> <span class="bp">True</span>     
<span class="k">try</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">VAR</span> <span class="o">=</span> <span class="n">value</span>  <span class="c1"># Only if "as VAR" is present
</span>        <span class="n">BLOCK</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="c1"># The exceptional case is handled here
</span>        <span class="n">exc</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">exit</span><span class="p">(</span><span class="n">mgr</span><span class="p">,</span> <span class="o">*</span><span class="n">sys</span><span class="p">.</span><span class="n">exc_info</span><span class="p">()):</span>
            <span class="k">raise</span>
        <span class="c1"># The exception is swallowed if exit() returns true
</span><span class="k">finally</span><span class="p">:</span>
    <span class="c1"># The normal and non-local-goto cases are handled here
</span>    <span class="k">if</span> <span class="n">exc</span><span class="p">:</span>
        <span class="nb">exit</span><span class="p">(</span><span class="n">mgr</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>生成上下文管理器mgr</li>
  <li>如果没有发现__exit__, __enter__两个方法，解释器会抛出AttributeError异常</li>
  <li>调用上下文管理器的 <strong>enter</strong>() 方法</li>
  <li>如果语法里的as VAR没有写，那么 伪代码里的 VAR= 这部分也会同样被忽略</li>
  <li>如果BLOCK中的代码正常结束，或者是通过break, continue ,return 来结束，<strong>exit</strong>()会使用三个None的参数来返回</li>
  <li>如果执行过程中出现异常，则使用 sys.exc_info的异常信息为参数调用 <strong>exit</strong>(exc_type, exc_value, exc_traceback)</li>
</ul>

<h3 id="对比">对比</h3>

<p>之前我们对文件的操作是这样的</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'filename'</span><span class="p">)</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Unexpected error:"</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">())</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>现在有了with语句可以使代码更加简洁，减少编码量,下面的语句会在执行完后自动关闭文件(即使出现异常也会)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example.info'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="code">code</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
       <span class="c1"># return self.f
</span>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>上面例子的返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="bp">None</span>
</code></pre></div></div>

<p>这个例子里面__enter__没有返回，所以with语句里的”as t”到的是None，修改一下上面的例子</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>
    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">_io</span><span class="p">.</span><span class="n">TextIOWrapper</span> <span class="n">name</span><span class="o">=</span><span class="s">'file'</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'cp936'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>如果在__init__或者__enter__中抛出异常，则不会进入到__exit__中</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>
        <span class="k">raise</span> <span class="nb">ImportError</span>
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__enter__"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>
    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__exit__"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__init__</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">14</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
  <span class="n">File</span> <span class="s">"D:/pythonScript/leetcode/leetcode.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">5</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__init__</span>
    <span class="k">raise</span> <span class="nb">ImportError</span>
<span class="nb">ImportError</span>
</code></pre></div></div>

<p>如果在__exit__中返回True,则不会产生异常</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TmpTest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="o">=</span><span class="n">filename</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__init__"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__enter__"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"__exit__ {} "</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">exc_type</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">True</span>

<span class="n">test</span><span class="o">=</span><span class="n">TmpTest</span><span class="p">(</span><span class="s">'file'</span><span class="p">)</span>
<span class="k">with</span> <span class="n">test</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">'test result: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
    <span class="k">raise</span> <span class="nb">ImportError</span>
<span class="k">print</span><span class="p">(</span><span class="s">"no error"</span><span class="p">)</span>
</code></pre></div></div>

<p>返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="n">__init__</span>
<span class="n">__enter__</span>
<span class="n">test</span> <span class="n">result</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">_io</span><span class="p">.</span><span class="n">TextIOWrapper</span> <span class="n">name</span><span class="o">=</span><span class="s">'file'</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'cp936'</span><span class="o">&gt;</span>
<span class="n">__exit__</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">ImportError</span><span class="s">'&gt;
no error
</span></code></pre></div></div>

<h3 id="参考">参考</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=with
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
https://www.python.org/dev/peps/pep-0343/
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python 中特殊方法的一些理解笔记]]></summary></entry><entry><title type="html">`Python中的 __len__、__getitem__、__setitem__、__delitem__、__contains__`</title><link href="/python-len-getitem-setitem-delitem-contains/" rel="alternate" type="text/html" title="`Python中的 __len__、__getitem__、__setitem__、__delitem__、__contains__`" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>/python-len-getitem-setitem-delitem-contains</id><content type="html" xml:base="/python-len-getitem-setitem-delitem-contains/"><![CDATA[<p>Python 中特殊方法的一些理解笔记</p>

<h3 id="__len__">__len__</h3>
<p>返回集合长度</p>

<h3 id="__getitem__self-item">__getitem__(self, item)</h3>
<p>使用索引访问元素</p>

<h3 id="__setitem__self-key-value">__setitem__(self, key, value)</h3>
<p>对索引赋值,使用 self[key] = value</p>

<h3 id="__delitem__self-key">__delitem__(self, key)</h3>
<p>删除索引值 del self[key]</p>

<h3 id="__contains__">__contains__</h3>
<p>实现in运算符，如果没有实现这个方法python也会调用__getitem__来使in运算符可用</p>

<h3 id="可变集合和不可变集合">可变集合和不可变集合</h3>
<ul>
  <li>可变集合需要实现: <strong>len</strong>  <strong>getitem</strong>    <strong>setitem</strong>  <strong>delitem</strong></li>
  <li>不可变集合需要实现: <strong>len</strong>  <strong>getitem</strong></li>
</ul>

<h3 id="code">code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TemTest</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">=</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="o">=</span><span class="n">TemTest</span><span class="p">()</span> <span class="c1">#实例化
</span><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">))</span> <span class="c1">#返回长度
</span>

<span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>   <span class="c1">#打印下标0的值
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span>  <span class="c1">#切片
</span>

<span class="n">test</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">10</span>       <span class="c1">#将下标3的值替换为10
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>


<span class="k">del</span> <span class="n">test</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>      <span class="c1">#删除下标3的值
</span><span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>


<span class="k">print</span><span class="p">(</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">test</span><span class="p">)</span>  <span class="c1">#测试in运算符
</span><span class="k">print</span><span class="p">(</span><span class="mi">3</span> <span class="ow">in</span> <span class="n">test</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span>
<span class="mi">0</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="bp">True</span>
<span class="bp">False</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Python" /><summary type="html"><![CDATA[Python 中特殊方法的一些理解笔记]]></summary></entry></feed>