<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-11-02T21:05:14+08:00</updated><id>/feed.xml</id><title type="html">尹亚亮</title><subtitle>An amazing website.</subtitle><author><name>Your Name</name></author><entry><title type="html">使用open()和create()创建文件</title><link href="/c-01/" rel="alternate" type="text/html" title="使用open()和create()创建文件" /><published>2022-11-02T00:00:00+08:00</published><updated>2022-11-02T00:00:00+08:00</updated><id>/c-01</id><content type="html" xml:base="/c-01/"><![CDATA[<p>使用open()和create()创建文件</p>

<h4 id="涉及函数">涉及函数</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int open<span class="o">(</span> const char <span class="k">*</span>pathname, int flags<span class="o">)</span><span class="p">;</span>
int open<span class="o">(</span> const char <span class="k">*</span>pathname, int flags, mode_t mode<span class="o">)</span><span class="p">;</span>

int creat<span class="o">(</span>const char <span class="k">*</span>pathname, mode_t mode<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<p>在下面的情形下两种函数的功能一致</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open<span class="o">(</span>const char<span class="k">*</span> pathname, <span class="o">(</span>O_CREAT|O_WRONLY|O_TRUNC<span class="o">)</span>,mode_t mode<span class="o">)</span><span class="p">;</span>
creat<span class="o">(</span>const char<span class="k">*</span> pathname,mode_t mode<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="命令">命令</h4>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"stdio.h"</span><span class="cp">
#include</span> <span class="cpf">"sys/types.h"</span><span class="cp">
#include</span> <span class="cpf">"sys/stat.h"</span><span class="cp">
#include</span> <span class="cpf">"fcntl.h"</span><span class="cp">
#include</span> <span class="cpf">"unistd.h"</span><span class="cp">
#include</span> <span class="cpf">"error.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
        <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"1.creat 2.open</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
                <span class="k">if</span><span class="p">((</span><span class="n">fd</span><span class="o">=</span><span class="n">creat</span><span class="p">(</span><span class="s">"examp.c"</span><span class="p">,</span><span class="n">S_IRWXU</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                <span class="p">{</span>
                        <span class="n">perror</span><span class="p">(</span><span class="s">"open"</span><span class="p">);</span>
                        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                        <span class="n">printf</span><span class="p">(</span><span class="s">"create file examp.c"</span><span class="p">);</span>
                <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">fd</span><span class="o">=</span><span class="n">open</span><span class="p">(</span><span class="s">"examp.c"</span><span class="p">,</span><span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_EXCL</span><span class="p">,</span><span class="n">S_IRUSR</span><span class="o">|</span><span class="n">S_IWUSR</span><span class="p">)))</span>
                <span class="p">{</span>
                        <span class="n">perror</span><span class="p">(</span><span class="s">"open"</span><span class="p">);</span>
                        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                        <span class="n">printf</span><span class="p">(</span><span class="s">"create file examp.c"</span><span class="p">);</span>
                <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"your choice wrong"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="参数">参数</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create()  # S_IRWXU00700 权限，代表该文件所有者具有可读、可写及可执行的权限

O_CREAT|O_EXCL # 检查文件是否存在。文件若不存在则建立该文件，否则将导致打开文件错误
S_IRUSR|S_IWUSR # 文件权限 600
</code></pre></div></div>

<h4 id="编译">编译</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">-o</span> <span class="nb">test </span>test.c 
</code></pre></div></div>

<h4 id="参考">参考</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://wizardforcel.gitbooks.io/linux-c-api-ref/content/143.html
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Linux" /><summary type="html"><![CDATA[使用open()和create()创建文件]]></summary></entry><entry><title type="html">docker 常用命令</title><link href="/docker-command/" rel="alternate" type="text/html" title="docker 常用命令" /><published>2022-11-01T00:00:00+08:00</published><updated>2022-11-01T00:00:00+08:00</updated><id>/docker-command</id><content type="html" xml:base="/docker-command/"><![CDATA[<p>Mysql 命令记录</p>

<h4 id="删除none的images">删除none的images</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images  | <span class="nb">grep</span> <span class="s1">'&lt;none&gt;'</span> | <span class="nb">awk</span> <span class="s1">'{print $3}'</span> | xargs  docker image <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[Mysql 命令记录]]></summary></entry><entry><title type="html">写一个C版本的ebpf测试程序</title><link href="/bcc-02/" rel="alternate" type="text/html" title="写一个C版本的ebpf测试程序" /><published>2022-10-30T00:00:00+08:00</published><updated>2022-10-30T00:00:00+08:00</updated><id>/bcc-02</id><content type="html" xml:base="/bcc-02/"><![CDATA[<h4 id="hello_kernc">hello_kern.c</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/bpf.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"bpf/bpf_helpers.h"</span><span class="cp">
</span>
<span class="cp">#define SEC(NAME) __attribute__((section(NAME), used))
</span>
<span class="c1">// 编译到tracepoint/syscalls/sys_enter_execve</span>
<span class="n">SEC</span><span class="p">(</span><span class="s">"tracepoint/syscalls/sys_enter_execve"</span><span class="p">)</span>
<span class="kt">int</span> <span class="nf">bpf_prog</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span>
<span class="p">{</span>
        <span class="kt">char</span> <span class="n">msg</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Hello BPF!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="n">bpf_trace_printk</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">msg</span><span class="p">));</span> <span class="c1">// 在内核跟踪日志打印消息</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 兼容内核使用</span>
<span class="kt">char</span> <span class="n">_license</span><span class="p">[]</span> <span class="n">SEC</span><span class="p">(</span><span class="s">"license"</span><span class="p">)</span> <span class="o">=</span> <span class="s">"GPL"</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="hello_userc">hello_user.c</h4>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"bpf_load.h"</span><span class="cp">
#include</span> <span class="cpf">"trace_helpers.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">load_bpf_file</span><span class="p">(</span><span class="s">"hello_kern.o"</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">read_trace_pipe</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="makefile">Makefile</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tprogs-y +<span class="o">=</span> hello
hello-objs :<span class="o">=</span> bpf_load.o hello_user.o <span class="si">$(</span>TRACE_HELPERS<span class="si">)</span>
always +<span class="o">=</span> hello_kern.o <span class="si">$(</span>TRACE_HELPERS<span class="si">)</span>
</code></pre></div></div>

<h4 id="编译">编译</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make M=samples/bpf
</code></pre></div></div>

<h4 id="运行输出">运行输出</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./hello 
</code></pre></div></div>
<p>再打开一个终端</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-l</span>
</code></pre></div></div>
<p>查看输出</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            bash-58784   <span class="o">[</span>009] d...1  6403.020850: bpf_trace_printk: Hello BPF!


            bash-58793   <span class="o">[</span>008] d...1  6429.165508: bpf_trace_printk: Hello BPF!
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="BCC" /><summary type="html"><![CDATA[hello_kern.c]]></summary></entry><entry><title type="html">Zabbix 对于 KVM 虚拟机资源监控</title><link href="/monitor-kvm-cpumem/" rel="alternate" type="text/html" title="Zabbix 对于 KVM 虚拟机资源监控" /><published>2022-10-27T00:00:00+08:00</published><updated>2022-10-27T00:00:00+08:00</updated><id>/monitor-kvm-cpumem</id><content type="html" xml:base="/monitor-kvm-cpumem/"><![CDATA[<p>采集KVM虚拟主机CPU以及内存使用资源情况</p>

<h4 id="安装">安装</h4>

<h5 id="centos">centos</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yum <span class="nt">-y</span> <span class="nb">install </span>libvirt-devel
</code></pre></div></div>

<h5 id="ubuntu">ubuntu</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>libvirt-dev
</code></pre></div></div>

<p>package</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> go get libvirt/libvirt-go
</code></pre></div></div>

<h4 id="代码">代码</h4>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">kvm</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"encoding/json"</span>
	<span class="s">"fmt"</span>
	<span class="s">"time"</span>

	<span class="s">"libvirt.org/go/libvirt"</span>
	<span class="s">"zabbix.com/pkg/plugin"</span>
	<span class="s">"zabbix.com/pkg/zbxerr"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Plugin</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">plugin</span><span class="o">.</span><span class="n">Base</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">impl</span> <span class="n">Plugin</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Plugin</span><span class="p">)</span> <span class="n">Export</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">params</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="n">ctx</span> <span class="n">plugin</span><span class="o">.</span><span class="n">ContextProvider</span><span class="p">)</span> <span class="p">(</span><span class="n">result</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
	<span class="k">case</span> <span class="s">"kvm.avtive.domain.discovery"</span><span class="o">:</span>
		<span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">virtual_host_discovery</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="no">nil</span>
	<span class="k">case</span> <span class="s">"domain.info"</span><span class="o">:</span>
		<span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">virtual_domain_info</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="no">nil</span>
	<span class="k">default</span><span class="o">:</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">plugin</span><span class="o">.</span><span class="n">UnsupportedMetricError</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">kvmkDiscovery</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Kvm</span> <span class="kt">string</span> <span class="s">`json:"{#KVM}"`</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">domainInfo</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">MemUnUsed</span> <span class="kt">uint64</span> <span class="s">`json:"MEMUNUSED"`</span>
	<span class="n">CPUUsage</span>  <span class="kt">uint64</span> <span class="s">`json:"CPUUsage"`</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Plugin</span><span class="p">)</span> <span class="n">virtual_domain_info</span><span class="p">(</span><span class="n">params</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">result</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">!=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Invalid parameter."</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">domainName</span> <span class="o">:=</span> <span class="n">params</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>

	<span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">libvirt</span><span class="o">.</span><span class="n">NewConnect</span><span class="p">(</span><span class="s">"qemu:///system"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
	<span class="k">var</span> <span class="n">domainifo</span> <span class="n">domainInfo</span>

	<span class="k">var</span> <span class="n">cpu_time_last</span> <span class="kt">uint64</span>
	<span class="k">var</span> <span class="n">cpu_time_pre</span> <span class="kt">uint64</span>
	<span class="k">var</span> <span class="n">memory_unused</span> <span class="kt">uint64</span>
	<span class="k">var</span> <span class="n">cpuUsage</span> <span class="kt">uint64</span>
	<span class="k">for</span> <span class="n">count</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="m">2</span><span class="p">;</span> <span class="n">count</span><span class="o">++</span> <span class="p">{</span>

		<span class="n">doms</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">conn</span><span class="o">.</span><span class="n">ListAllDomains</span><span class="p">(</span><span class="n">libvirt</span><span class="o">.</span><span class="n">CONNECT_LIST_DOMAINS_ACTIVE</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">dom</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">doms</span> <span class="p">{</span>
			<span class="n">name</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">dom</span><span class="o">.</span><span class="n">GetName</span><span class="p">()</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="n">name</span> <span class="o">!=</span> <span class="n">domainName</span> <span class="p">{</span>
				<span class="n">dom</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>
				<span class="k">continue</span>
			<span class="p">}</span>
			<span class="c">// memory</span>
			<span class="n">meminfo</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">dom</span><span class="o">.</span><span class="n">MemoryStats</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>

			<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">tag</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">meminfo</span> <span class="p">{</span>
				<span class="k">if</span> <span class="n">tag</span><span class="o">.</span><span class="n">Tag</span> <span class="o">==</span> <span class="m">5</span> <span class="p">{</span>
					<span class="n">memory_unused</span> <span class="o">=</span> <span class="n">tag</span><span class="o">.</span><span class="n">Val</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="c">// Query cpu total stats</span>
			<span class="n">cpuStats</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">dom</span><span class="o">.</span><span class="n">GetCPUStats</span><span class="p">(</span><span class="o">-</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
			<span class="p">}</span>
			<span class="n">cpu_time_pre</span> <span class="o">=</span> <span class="n">cpu_time_last</span>
			<span class="n">cpu_time_last</span> <span class="o">=</span> <span class="n">cpuStats</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">CpuTime</span>
			<span class="n">cpuUsage</span> <span class="o">=</span> <span class="m">100</span> <span class="o">*</span> <span class="p">(</span><span class="n">cpu_time_last</span> <span class="o">-</span> <span class="n">cpu_time_pre</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="m">1</span> <span class="o">*</span> <span class="m">1000000000</span><span class="p">)</span>

			<span class="n">dom</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">1</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">domainifo</span><span class="o">.</span><span class="n">CPUUsage</span> <span class="o">=</span> <span class="n">cpuUsage</span>
	<span class="n">domainifo</span><span class="o">.</span><span class="n">MemUnUsed</span> <span class="o">=</span> <span class="n">memory_unused</span>
	<span class="k">if</span> <span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">domainifo</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">zbxerr</span><span class="o">.</span><span class="n">ErrorCannotMarshalJSON</span><span class="o">.</span><span class="n">Wrap</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Plugin</span><span class="p">)</span> <span class="n">virtual_host_discovery</span><span class="p">()</span> <span class="p">(</span><span class="n">result</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">libvirt</span><span class="o">.</span><span class="n">NewConnect</span><span class="p">(</span><span class="s">"qemu:///system"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
	<span class="n">kvm</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="n">kvmkDiscovery</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
	<span class="c">// 获取所有开启的虚拟机名称</span>

	<span class="n">doms</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">conn</span><span class="o">.</span><span class="n">ListAllDomains</span><span class="p">(</span><span class="n">libvirt</span><span class="o">.</span><span class="n">CONNECT_LIST_DOMAINS_ACTIVE</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">dom</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">doms</span> <span class="p">{</span>

		<span class="n">name</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">dom</span><span class="o">.</span><span class="n">GetName</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>

		<span class="n">kvm</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">kvm</span><span class="p">,</span> <span class="n">kvmkDiscovery</span><span class="p">{</span><span class="n">Kvm</span><span class="o">:</span> <span class="n">name</span><span class="p">})</span>
		<span class="n">dom</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kvm</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">zbxerr</span><span class="o">.</span><span class="n">ErrorCannotMarshalJSON</span><span class="o">.</span><span class="n">Wrap</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">plugin</span><span class="o">.</span><span class="n">RegisterMetrics</span><span class="p">(</span><span class="o">&amp;</span><span class="n">impl</span><span class="p">,</span> <span class="s">"Kvm"</span><span class="p">,</span>
		<span class="s">"kvm.avtive.domain.discovery"</span><span class="p">,</span> <span class="s">"Returns availabe domain."</span><span class="p">,</span>
		<span class="s">"domain.info"</span><span class="p">,</span> <span class="s">"Extract information about a domain."</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="效果">效果</h4>

<p><img src="/assets/images/zabbix/03.png" /></p>

<h4 id="参考">参考</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://people.redhat.com/rjones/virt-top/faq.html
https://gitlab.com/libvirt/libvirt-go/blob/v7.4.0/domain.go#L369
https://pkg.go.dev/libvirt.org/libvirt-go
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Monitor" /><summary type="html"><![CDATA[采集KVM虚拟主机CPU以及内存使用资源情况]]></summary></entry><entry><title type="html">Terraform 安装使用</title><link href="/terraform/" rel="alternate" type="text/html" title="Terraform 安装使用" /><published>2022-10-25T00:00:00+08:00</published><updated>2022-10-25T00:00:00+08:00</updated><id>/terraform</id><content type="html" xml:base="/terraform/"><![CDATA[<p>Terraform创建腾讯CVM</p>

<h4 id="什么是terraform">什么是terraform</h4>

<p>HashiCorp Terraform 是一种基础架构即代码工具，可让在可读的配置文件中定义云和本地资源，可以对其进行版本控制、重用和共享。可以使用一致的工作流程在整个生命周期内配置和管理所有基础架构。Terraform 可以管理计算、存储和网络资源等低级组件，以及DNS 条目和 SaaS 功能等高级组件。</p>

<h4 id="使用">使用</h4>

<ul>
  <li>以_configurations_的形式获取凭证和输入，在目标云上创建一个资源,</li>
  <li>配置以Terraform的语法进行资源的描述。基本上是声明式的语法。</li>
  <li>Terraform使用云服务商提供的API来创建资源，社区提供了1700多个provider来提供管理（https://registry.terraform.io/）,支持扩展</li>
</ul>

<h4 id="优势">优势</h4>

<ul>
  <li>可以管理多个云平台上的基础架构</li>
  <li>时间优化，可以在短时间内编写配置，几分钟就可以创建云资源</li>
  <li>变更更容易了和改代码一样了</li>
  <li>Terraform 的状态允许在整个部署过程中跟踪资源更改</li>
  <li>支持版本控制</li>
</ul>

<h4 id="工作流程">工作流程</h4>

<p><img src="/assets/images/application/1.png" /></p>

<h4 id="安装">安装</h4>

<h5 id="安装-1">安装</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils
<span class="nb">sudo </span>yum-config-manager <span class="nt">--add-repo</span> https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
<span class="nb">sudo </span>yum <span class="nt">-y</span> <span class="nb">install </span>terraform 
</code></pre></div></div>

<h5 id="验证">验证</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform -help</span>
Usage: terraform <span class="o">[</span>global options] &lt;subcommand&gt; <span class="o">[</span>args]

The available commands <span class="k">for </span>execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory <span class="k">for </span>other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive <span class="nb">command </span>prompt
  <span class="nb">fmt           </span>Reformat your configuration <span class="k">in </span>the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps <span class="k">in </span>an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials <span class="k">for </span>a remote host
  <span class="nb">logout        </span>Remove locally-stored credentials <span class="k">for </span>a remote host
  output        Show output values from your root module
  providers     Show the providers required <span class="k">for </span>this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  <span class="nb">test          </span>Experimental support <span class="k">for </span>module integration testing
  untaint       Remove the <span class="s1">'tainted'</span> state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options <span class="o">(</span>use these before the subcommand, <span class="k">if </span>any<span class="o">)</span>:
  <span class="nt">-chdir</span><span class="o">=</span>DIR    Switch to a different working directory before executing the
                given subcommand.
  <span class="nt">-help</span>         Show this <span class="nb">help </span>output, or the <span class="nb">help </span><span class="k">for </span>a specified subcommand.
  <span class="nt">-version</span>      An <span class="nb">alias </span><span class="k">for </span>the <span class="s2">"version"</span> subcommand.
</code></pre></div></div>

<h5 id="补全">补全</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch</span> ~/.bashrc
terraform <span class="nt">-install-autocomplete</span>
</code></pre></div></div>

<h4 id="简单测试">简单测试</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir learn-terraform-docker-container
cd learn-terraform-docker-container
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> main.tf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "~&gt; 2.13.0"
    }
  }
}

provider "docker" {}

resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = false
}

resource "docker_container" "nginx" {
  image = docker_image.nginx.latest
  name  = "tutorial"
  ports {
    internal = 80
    external = 8000
  }
}
</span><span class="no">EOF
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> terraform init
 terraform apply
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># curl localhost:8000
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to nginx!&lt;/title&gt;
&lt;style&gt;
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
&lt;p&gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&lt;/p&gt;

&lt;p&gt;For online documentation and support please refer to
&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
Commercial support is available at
&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># docker ps</span>
CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                  NAMES
8fde98406749   5d58c024174d   <span class="s2">"/docker-entrypoint.…"</span>   About a minute ago   Up About a minute   0.0.0.0:8000-&gt;80/tcp   tutorial
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy
</code></pre></div></div>

<h4 id="构建腾讯基础设施">构建腾讯基础设施</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir tencent
cd tencent
</code></pre></div></div>

<h5 id="初始化环境">初始化环境</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat &gt; provider.tf &lt;&lt; EOF
terraform {
  required_providers {
    tencentcloud = {
      source = "tencentcloudstack/tencentcloud"
    }
  }
}

# Configure the TencentCloud Provider
provider "tencentcloud" {
  secret_id  = "my-secret-id"
  secret_key = "my-secret-key"
  region     = "ap-guangzhou"
}
EOF
</code></pre></div></div>

<h5 id="创建一台cvm">创建一台CVM</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource "tencentcloud_instance" "web" {
  instance_name              = "test web server"
  availability_zone          = "ap-beijing-6"
  image_id                   = "img-hbbgxy7f"
  instance_type              = "S6.MEDIUM2"
  system_disk_type           = "CLOUD_PREMIUM"
  system_disk_size           = 50
  security_groups            = ["sg-4m6i7s6v"]
  count                      = 1
}
</code></pre></div></div>

<h5 id="测试执行">测试执行</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform plan</span>
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  <span class="c"># tencentcloud_instance.web[0] will be created</span>
  + resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
      + allocate_public_ip                      <span class="o">=</span> <span class="nb">false</span>
      + availability_zone                       <span class="o">=</span> <span class="s2">"ap-beijing-6"</span>
      + create_time                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + disable_monitor_service                 <span class="o">=</span> <span class="nb">false</span>
      + disable_security_service                <span class="o">=</span> <span class="nb">false</span>
      + expired_time                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + force_delete                            <span class="o">=</span> <span class="nb">false</span>
      + <span class="nb">id</span>                                      <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + image_id                                <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span>
      + instance_charge_type                    <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span>
      + instance_charge_type_prepaid_renew_flag <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_name                           <span class="o">=</span> <span class="s2">"test web server"</span>
      + instance_status                         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_type                           <span class="o">=</span> <span class="s2">"S6.MEDIUM2"</span>
      + internet_charge_type                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + internet_max_bandwidth_out              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_ids                                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_name                                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + private_ip                              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + project_id                              <span class="o">=</span> 0
      + public_ip                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + running_flag                            <span class="o">=</span> <span class="nb">true</span>
      + security_groups                         <span class="o">=</span> <span class="o">[</span>
          + <span class="s2">"sg-4m6i7s6v"</span>,
        <span class="o">]</span>
      + subnet_id                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_id                          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_size                        <span class="o">=</span> 50
      + system_disk_type                        <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span>
      + vpc_id                                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>

      + data_disks <span class="o">{</span>
          + data_disk_id           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_size         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_snapshot_id  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_type         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + delete_with_instance   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + encrypt                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + throughput_performance <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>

Plan: 1 to add, 0 to change, 0 to destroy.
</code></pre></div></div>

<h5 id="执行创建">执行创建</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform apply</span>

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  <span class="c"># tencentcloud_instance.web[0] will be created</span>
  + resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
      + allocate_public_ip                      <span class="o">=</span> <span class="nb">false</span>
      + availability_zone                       <span class="o">=</span> <span class="s2">"ap-beijing-6"</span>
      + create_time                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + disable_monitor_service                 <span class="o">=</span> <span class="nb">false</span>
      + disable_security_service                <span class="o">=</span> <span class="nb">false</span>
      + expired_time                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + force_delete                            <span class="o">=</span> <span class="nb">false</span>
      + <span class="nb">id</span>                                      <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + image_id                                <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span>
      + instance_charge_type                    <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span>
      + instance_charge_type_prepaid_renew_flag <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_name                           <span class="o">=</span> <span class="s2">"test web server"</span>
      + instance_status                         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_type                           <span class="o">=</span> <span class="s2">"S6.MEDIUM2"</span>
      + internet_charge_type                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + internet_max_bandwidth_out              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_ids                                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_name                                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + private_ip                              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + project_id                              <span class="o">=</span> 0
      + public_ip                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + running_flag                            <span class="o">=</span> <span class="nb">true</span>
      + security_groups                         <span class="o">=</span> <span class="o">[</span>
          + <span class="s2">"sg-4m6i7s6v"</span>,
        <span class="o">]</span>
      + subnet_id                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_id                          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_size                        <span class="o">=</span> 50
      + system_disk_type                        <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span>
      + vpc_id                                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>

      + data_disks <span class="o">{</span>
          + data_disk_id           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_size         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_snapshot_id  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_type         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + delete_with_instance   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + encrypt                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + throughput_performance <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only <span class="s1">'yes'</span> will be accepted to approve.

  Enter a value: <span class="nb">yes

</span>tencentcloud_instance.web[0]: Creating...
tencentcloud_instance.web[0]: Still creating... <span class="o">[</span>10s elapsed]
tencentcloud_instance.web[0]: Still creating... <span class="o">[</span>20s elapsed]
tencentcloud_instance.web[0]: Still creating... <span class="o">[</span>30s elapsed]
tencentcloud_instance.web[0]: Creation <span class="nb">complete </span>after 38s <span class="o">[</span><span class="nb">id</span><span class="o">=</span>ins-pvmqc3pr]

Apply <span class="nb">complete</span><span class="o">!</span> Resources: 1 added, 0 changed, 0 destroyed.
</code></pre></div></div>

<p><img src="/assets/images/application/2.png" /></p>

<h5 id="查询实例数据">查询实例数据</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform show</span>
<span class="c"># tencentcloud_instance.web[0]:</span>
resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
    allocate_public_ip         <span class="o">=</span> <span class="nb">false
    </span>availability_zone          <span class="o">=</span> <span class="s2">"ap-beijing-6"</span>
    create_time                <span class="o">=</span> <span class="s2">"2022-10-25T08:49:16Z"</span>
    disable_monitor_service    <span class="o">=</span> <span class="nb">false
    </span>disable_security_service   <span class="o">=</span> <span class="nb">false
    </span>force_delete               <span class="o">=</span> <span class="nb">false
    id</span>                         <span class="o">=</span> <span class="s2">"ins-pvmqc3pr"</span>
    image_id                   <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span>
    instance_charge_type       <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span>
    instance_name              <span class="o">=</span> <span class="s2">"test web server"</span>
    instance_status            <span class="o">=</span> <span class="s2">"RUNNING"</span>
    instance_type              <span class="o">=</span> <span class="s2">"S6.MEDIUM2"</span>
    internet_max_bandwidth_out <span class="o">=</span> 0
    key_ids                    <span class="o">=</span> <span class="o">[]</span>
    private_ip                 <span class="o">=</span> <span class="s2">"172.21.48.7"</span>
    project_id                 <span class="o">=</span> 0
    running_flag               <span class="o">=</span> <span class="nb">true
    </span>security_groups            <span class="o">=</span> <span class="o">[</span>
        <span class="s2">"sg-4m6i7s6v"</span>,
    <span class="o">]</span>
    subnet_id                  <span class="o">=</span> <span class="s2">"subnet-k8mir1zl"</span>
    system_disk_id             <span class="o">=</span> <span class="s2">"disk-2t8ene3n"</span>
    system_disk_size           <span class="o">=</span> 50
    system_disk_type           <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span>
    vpc_id                     <span class="o">=</span> <span class="s2">"vpc-bgsgnv7o"</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="删除实例数据">删除实例数据</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform destroy</span>
tencentcloud_instance.web[0]: Refreshing state... <span class="o">[</span><span class="nb">id</span><span class="o">=</span>ins-pvmqc3pr]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  - destroy

Terraform will perform the following actions:

  <span class="c"># tencentcloud_instance.web[0] will be destroyed</span>
  - resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
      - allocate_public_ip         <span class="o">=</span> <span class="nb">false</span> -&gt; null
      - availability_zone          <span class="o">=</span> <span class="s2">"ap-beijing-6"</span> -&gt; null
      - create_time                <span class="o">=</span> <span class="s2">"2022-10-25T08:49:16Z"</span> -&gt; null
      - disable_monitor_service    <span class="o">=</span> <span class="nb">false</span> -&gt; null
      - disable_security_service   <span class="o">=</span> <span class="nb">false</span> -&gt; null
      - force_delete               <span class="o">=</span> <span class="nb">false</span> -&gt; null
      - <span class="nb">id</span>                         <span class="o">=</span> <span class="s2">"ins-pvmqc3pr"</span> -&gt; null
      - image_id                   <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span> -&gt; null
      - instance_charge_type       <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span> -&gt; null
      - instance_name              <span class="o">=</span> <span class="s2">"test web server"</span> -&gt; null
      - instance_status            <span class="o">=</span> <span class="s2">"RUNNING"</span> -&gt; null
      - instance_type              <span class="o">=</span> <span class="s2">"S6.MEDIUM2"</span> -&gt; null
      - internet_max_bandwidth_out <span class="o">=</span> 0 -&gt; null
      - key_ids                    <span class="o">=</span> <span class="o">[]</span> -&gt; null
      - private_ip                 <span class="o">=</span> <span class="s2">"172.21.48.7"</span> -&gt; null
      - project_id                 <span class="o">=</span> 0 -&gt; null
      - running_flag               <span class="o">=</span> <span class="nb">true</span> -&gt; null
      - security_groups            <span class="o">=</span> <span class="o">[</span>
          - <span class="s2">"sg-4m6i7s6v"</span>,
        <span class="o">]</span> -&gt; null
      - subnet_id                  <span class="o">=</span> <span class="s2">"subnet-k8mir1zl"</span> -&gt; null
      - system_disk_id             <span class="o">=</span> <span class="s2">"disk-2t8ene3n"</span> -&gt; null
      - system_disk_size           <span class="o">=</span> 50 -&gt; null
      - system_disk_type           <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span> -&gt; null
      - tags                       <span class="o">=</span> <span class="o">{}</span> -&gt; null
      - vpc_id                     <span class="o">=</span> <span class="s2">"vpc-bgsgnv7o"</span> -&gt; null
    <span class="o">}</span>

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only <span class="s1">'yes'</span> will be accepted to confirm.

  Enter a value: <span class="nb">yes

</span>tencentcloud_instance.web[0]: Destroying... <span class="o">[</span><span class="nb">id</span><span class="o">=</span>ins-pvmqc3pr]
tencentcloud_instance.web[0]: Still destroying... <span class="o">[</span><span class="nb">id</span><span class="o">=</span>ins-pvmqc3pr, 10s elapsed]
tencentcloud_instance.web[0]: Destruction <span class="nb">complete </span>after 11s

Destroy <span class="nb">complete</span><span class="o">!</span> Resources: 1 destroyed.
</code></pre></div></div>

<h5 id="无资源测试">无资源测试</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># terraform plan</span>

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  <span class="c"># tencentcloud_instance.web[0] will be created</span>
  + resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
      + allocate_public_ip                      <span class="o">=</span> <span class="nb">false</span>
      + availability_zone                       <span class="o">=</span> <span class="s2">"ap-beijing-6"</span>
      + create_time                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + disable_monitor_service                 <span class="o">=</span> <span class="nb">false</span>
      + disable_security_service                <span class="o">=</span> <span class="nb">false</span>
      + expired_time                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + force_delete                            <span class="o">=</span> <span class="nb">false</span>
      + <span class="nb">id</span>                                      <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + image_id                                <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span>
      + instance_charge_type                    <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span>
      + instance_charge_type_prepaid_renew_flag <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_name                           <span class="o">=</span> <span class="s2">"test web server"</span>
      + instance_status                         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_type                           <span class="o">=</span> <span class="s2">"S5se.LARGE16"</span>
      + internet_charge_type                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + internet_max_bandwidth_out              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_ids                                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_name                                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + private_ip                              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + project_id                              <span class="o">=</span> 0
      + public_ip                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + running_flag                            <span class="o">=</span> <span class="nb">true</span>
      + security_groups                         <span class="o">=</span> <span class="o">[</span>
          + <span class="s2">"sg-4m6i7s6v"</span>,
        <span class="o">]</span>
      + subnet_id                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_id                          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_size                        <span class="o">=</span> 50
      + system_disk_type                        <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span>
      + vpc_id                                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>

      + data_disks <span class="o">{</span>
          + data_disk_id           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_size         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_snapshot_id  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_type         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + delete_with_instance   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + encrypt                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + throughput_performance <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn<span class="s1">'t use the -out option to save this plan, so Terraform can'</span>t guarantee to take exactly these actions <span class="k">if </span>you run
<span class="s2">"terraform apply"</span> now.
</code></pre></div></div>

<h5 id="无资源创建测试">无资源创建测试</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  <span class="c"># tencentcloud_instance.web[0] will be created</span>
  + resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
      + allocate_public_ip                      <span class="o">=</span> <span class="nb">false</span>
      + availability_zone                       <span class="o">=</span> <span class="s2">"ap-beijing-6"</span>
      + create_time                             <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + disable_monitor_service                 <span class="o">=</span> <span class="nb">false</span>
      + disable_security_service                <span class="o">=</span> <span class="nb">false</span>
      + expired_time                            <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + force_delete                            <span class="o">=</span> <span class="nb">false</span>
      + <span class="nb">id</span>                                      <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + image_id                                <span class="o">=</span> <span class="s2">"img-hbbgxy7f"</span>
      + instance_charge_type                    <span class="o">=</span> <span class="s2">"POSTPAID_BY_HOUR"</span>
      + instance_charge_type_prepaid_renew_flag <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_name                           <span class="o">=</span> <span class="s2">"test web server"</span>
      + instance_status                         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + instance_type                           <span class="o">=</span> <span class="s2">"S5se.LARGE16"</span>
      + internet_charge_type                    <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + internet_max_bandwidth_out              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_ids                                 <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + key_name                                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + private_ip                              <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + project_id                              <span class="o">=</span> 0
      + public_ip                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + running_flag                            <span class="o">=</span> <span class="nb">true</span>
      + security_groups                         <span class="o">=</span> <span class="o">[</span>
          + <span class="s2">"sg-4m6i7s6v"</span>,
        <span class="o">]</span>
      + subnet_id                               <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_id                          <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
      + system_disk_size                        <span class="o">=</span> 50
      + system_disk_type                        <span class="o">=</span> <span class="s2">"CLOUD_PREMIUM"</span>
      + vpc_id                                  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>

      + data_disks <span class="o">{</span>
          + data_disk_id           <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_size         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_snapshot_id  <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + data_disk_type         <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + delete_with_instance   <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + encrypt                <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
          + throughput_performance <span class="o">=</span> <span class="o">(</span>known after apply<span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only <span class="s1">'yes'</span> will be accepted to approve.

  Enter a value: <span class="nb">yes

</span>tencentcloud_instance.web[0]: Creating...
╷
│ Error: <span class="o">[</span>TencentCloudSDKError] <span class="nv">Code</span><span class="o">=</span>ResourceInsufficient.SpecifiedInstanceType, <span class="nv">Message</span><span class="o">=</span>The specified <span class="nb">type </span>of instance is understocked., <span class="nv">RequestId</span><span class="o">=</span>c978845f-cd62-46d0-8b91-60d9aa13e889
│ 
│   with tencentcloud_instance.web[0],
│   on cvm.tf line 1, <span class="k">in </span>resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span>:
│    1: resource <span class="s2">"tencentcloud_instance"</span> <span class="s2">"web"</span> <span class="o">{</span>
│ 
╵
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Application" /><summary type="html"><![CDATA[Terraform创建腾讯CVM]]></summary></entry><entry><title type="html">Daemonset</title><link href="/kubernetes-kubeadm-daemonset/" rel="alternate" type="text/html" title="Daemonset" /><published>2022-10-23T00:00:00+08:00</published><updated>2022-10-23T00:00:00+08:00</updated><id>/kubernetes-kubeadm-daemonset</id><content type="html" xml:base="/kubernetes-kubeadm-daemonset/"><![CDATA[<p>daemonset</p>

<h3 id="创建及删除daemonset">创建及删除daemonset</h3>

<ul>
  <li>daemonset会在所有的节点上创建一个pod,有几个节点就创建几个pod,每个节点只有一个</li>
  <li>一般用于监控、日志等，每个节点上运行一个pod</li>
  <li>master上不会产生Pod,因为master上有污点</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl describe nodes master | <span class="nb">grep</span> ^Taints
Taints:             node-role.kubernetes.io/master:NoSchedule
</code></pre></div></div>

<h4 id="查看">查看</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get ds
No resources found <span class="k">in </span>nsdeploy namespace.
</code></pre></div></div>

<h4 id="创建及删除ds">创建及删除ds</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>ds
<span class="nb">cd </span>ds/
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl create ns nsds
namespace/nsds created
<span class="o">[</span>root@master ds]# kubens nsds
Context <span class="s2">"kubernetes-admin@kubernetes"</span> modified.
Active namespace is <span class="s2">"nsds"</span><span class="nb">.</span>
</code></pre></div></div>

<p>daemonset和deployment的yaml只有四点不同,</p>

<ul>
  <li>把kind改成Daemonset</li>
  <li>deployment有副本数,daemonset没有副本数</li>
  <li>删除.spec下的strategy:{}</li>
  <li>删除最后一行的status:{}</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">DaemonSet</span>
<span class="na">metadata</span><span class="pi">:</span>  
  <span class="na">name</span><span class="pi">:</span>  <span class="s">ds1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span>  <span class="s">busybox</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span>  <span class="s">busybox</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span>  <span class="s">busybox</span>
        <span class="na">command</span><span class="pi">:</span>  <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">sleep</span><span class="nv"> </span><span class="s">36000"</span><span class="pi">]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl apply <span class="nt">-f</span> ds1.yaml 
daemonset.apps/ds1 created
</code></pre></div></div>

<h4 id="查看pod的运行">查看pod的运行</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get pods <span class="nt">-o</span> wide
NAME        READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
ds1-2b2cq   1/1     Running   0          27s   10.244.104.48    node2   &lt;none&gt;           &lt;none&gt;
ds1-b2rgv   1/1     Running   0          27s   10.244.166.169   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h4 id="删除daemonset">删除daemonset</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl delete ds ds1
daemonset.apps <span class="s2">"ds1"</span> deleted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get ds
No resources found <span class="k">in </span>nsds namespace.
</code></pre></div></div>

<h3 id="指定pod运行在特定的节点">指定pod运行在特定的节点</h3>

<p>可以通过标签的方式制定daemonset的pod在指定的节点上运行</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">DaemonSet</span>
<span class="na">metadata</span><span class="pi">:</span>  
  <span class="na">name</span><span class="pi">:</span>  <span class="s">ds1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span>  <span class="s">busybox</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span>  <span class="s">busybox</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">nodeSelector</span><span class="pi">:</span>
        <span class="na">diskxx</span><span class="pi">:</span>  <span class="s">ssdxx</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span>  <span class="s">busybox</span>
        <span class="na">command</span><span class="pi">:</span>  <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">sleep</span><span class="nv"> </span><span class="s">36000"</span><span class="pi">]</span>
</code></pre></div></div>

<p>这里通过nodeSelector来指定pod运行在含有标签diskxx==ssdxx的节点上</p>

<h3 id="其它控制器-replicationcontroller-rc">其它控制器 ReplicationController (rc)</h3>

<p>rc和deployment的作用一样，使用方法也一样</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get rc
No resources found <span class="k">in </span>nsds namespace.
</code></pre></div></div>

<h4 id="创建rc所需要的yaml文件">创建rc所需要的yaml文件</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">ReplicationController</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">myrc</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span>  <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span>  <span class="s">nginx</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">nginx</span>
        <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span>  <span class="m">80</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl apply <span class="nt">-f</span> rc1.yaml 
replicationcontroller/myrc created
</code></pre></div></div>

<h4 id="查看-1">查看</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get rc
NAME   DESIRED   CURRENT   READY   AGE
myrc   3         3         3       30s
<span class="o">[</span>root@master ds]# kubectl get pods
NAME         READY   STATUS    RESTARTS   AGE
myrc-cqj4m   1/1     Running   0          38s
myrc-hdjz8   1/1     Running   0          38s
myrc-s77mw   1/1     Running   0          38s
</code></pre></div></div>

<h4 id="扩展">扩展</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl scale rc myrc <span class="nt">--replicas</span><span class="o">=</span>5
replicationcontroller/myrc scaled
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get pods
NAME         READY   STATUS    RESTARTS   AGE
myrc-bzphd   1/1     Running   0          11s
myrc-cqj4m   1/1     Running   0          94s
myrc-hdjz8   1/1     Running   0          94s
myrc-kn5zc   1/1     Running   0          11s
myrc-s77mw   1/1     Running   0          94s
</code></pre></div></div>

<h4 id="更新">更新</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get rc <span class="nt">-o</span> wide
NAME   DESIRED   CURRENT   READY   AGE    CONTAINERS   IMAGES   SELECTOR
myrc   5         5         5       2m6s   nginx        nginx    <span class="nv">app</span><span class="o">=</span>nginx
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl <span class="nb">set </span>image rc myrc <span class="nv">nginx</span><span class="o">=</span>nginx:1.9
replicationcontroller/myrc image updated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get rc <span class="nt">-o</span> wide
NAME   DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES      SELECTOR
myrc   5         5         5       2m42s   nginx        nginx:1.9   <span class="nv">app</span><span class="o">=</span>nginx
</code></pre></div></div>

<h4 id="删除">删除</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete rc myrc
</code></pre></div></div>

<h3 id="其他控制器-rplicaset-rs">其他控制器 RplicaSet (rs)</h3>

<p>和deployment作用一样</p>

<h4 id="查看-2">查看</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get rs
No resources found <span class="k">in </span>nsds namespace.
</code></pre></div></div>

<h4 id="创建">创建</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">ReplicaSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">myrs</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span>  <span class="s">rs1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span>  <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span>  <span class="s">rsx</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span>  <span class="s">rsx</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl apply <span class="nt">-f</span> rs1.yaml 
replicaset.apps/myrs created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get pods
NAME         READY   STATUS    RESTARTS   AGE
myrs-mc2j6   1/1     Running   0          23s
myrs-rbg92   1/1     Running   0          23s
myrs-zx9db   1/1     Running   0          23s
</code></pre></div></div>

<h4 id="扩展-1">扩展</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl scale rs myrs <span class="nt">--replicas</span><span class="o">=</span>5
replicaset.apps/myrs scaled
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl get pods <span class="nt">-o</span> wide
NAME         READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
myrs-htmgf   1/1     Running   0          14s   10.244.166.178   node1   &lt;none&gt;           &lt;none&gt;
myrs-mc2j6   1/1     Running   0          84s   10.244.166.176   node1   &lt;none&gt;           &lt;none&gt;
myrs-rbg92   1/1     Running   0          84s   10.244.166.177   node1   &lt;none&gt;           &lt;none&gt;
myrs-skxft   1/1     Running   0          14s   10.244.166.179   node1   &lt;none&gt;           &lt;none&gt;
myrs-zx9db   1/1     Running   0          84s   10.244.166.175   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h4 id="删除-1">删除</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ds]# kubectl delete rs myrs
replicaset.apps <span class="s2">"myrs"</span> deleted
</code></pre></div></div>

<h4 id="对比">对比</h4>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>api</th>
      <th>select</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>deploment</td>
      <td>apps/v1</td>
      <td>selector<br />matchLabels</td>
    </tr>
    <tr>
      <td>daemonset</td>
      <td>apps/v1</td>
      <td>selector<br />matchLaels</td>
    </tr>
    <tr>
      <td>ReplicationController</td>
      <td>v1</td>
      <td>selector</td>
    </tr>
    <tr>
      <td>ReplicaSet</td>
      <td>apps/v1</td>
      <td>selector<br />matchLabels</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[daemonset]]></summary></entry><entry><title type="html">解决Zabbix 关于 TCP状态监控取值占用CPU高BUG的解决方案</title><link href="/monitor-tcp-state/" rel="alternate" type="text/html" title="解决Zabbix 关于 TCP状态监控取值占用CPU高BUG的解决方案" /><published>2022-10-21T00:00:00+08:00</published><updated>2022-10-21T00:00:00+08:00</updated><id>/monitor-tcp-state</id><content type="html" xml:base="/monitor-tcp-state/"><![CDATA[<p>修复zabbix CPU占用高的bug</p>

<h4 id="故障现象">故障现象</h4>

<p><img src="/assets/images/zabbix/01.png" /></p>

<h4 id="现象分析">现象分析</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perf <span class="nb">stat</span> <span class="nt">-d</span> ./zabbix_agent2 <span class="nt">-t</span> net.tcp.socket.count[,,,,established]
net.tcp.socket.count[,,,,established]         <span class="o">[</span>s|3208] Performance counter stats <span class="k">for</span> <span class="s1">'./zabbix_agent2 -t net.tcp.socket.count[,,,,established]'</span>:          1,389.13 msec task-clock                <span class="c">#    0.598 CPUs utilized          </span>
             2,602      context-switches          <span class="c">#    0.002 M/sec                  </span>
                 5      cpu-migrations            <span class="c">#    0.004 K/sec                  </span>
             2,576      page-faults               <span class="c">#    0.002 M/sec                  </span>
   &lt;not supported&gt;      cycles                                                      
   &lt;not supported&gt;      instructions                                                
   &lt;not supported&gt;      branches                                                    
   &lt;not supported&gt;      branch-misses                                               
   &lt;not supported&gt;      L1-dcache-loads                                             
   &lt;not supported&gt;      L1-dcache-load-misses                                       
   &lt;not supported&gt;      LLC-loads                                                   
   &lt;not supported&gt;      LLC-load-misses                                                    2.323596300 seconds <span class="nb">time </span>elapsed       1.171183000 seconds user
       0.217171000 seconds sys
</code></pre></div></div>

<p><img src="/assets/images/zabbix/02.png" /></p>

<h4 id="解决代码">解决代码</h4>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">eeoss</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"encoding/json"</span>
    <span class="s">"fmt"</span>
    <span class="s">"syscall"</span>
    <span class="s">"zabbix.com/pkg/plugin"</span>
    <span class="s">"github.com/vishvananda/netlink/nl"</span>
<span class="p">)</span>
<span class="c">// Plugin -</span>
<span class="k">type</span> <span class="n">Plugin</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">plugin</span><span class="o">.</span><span class="n">Base</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">impl</span> <span class="n">Plugin</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Plugin</span><span class="p">)</span> <span class="n">Export</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">params</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="n">ctx</span> <span class="n">plugin</span><span class="o">.</span><span class="n">ContextProvider</span><span class="p">)</span> <span class="p">(</span><span class="n">result</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"tcp.count"</span><span class="o">:</span>
        <span class="k">return</span> <span class="n">tcpmMain</span><span class="p">()</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">plugin</span><span class="o">.</span><span class="n">UnsupportedMetricError</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">plugin</span><span class="o">.</span><span class="n">RegisterMetrics</span><span class="p">(</span><span class="o">&amp;</span><span class="n">impl</span><span class="p">,</span> <span class="s">"Eeotcp"</span><span class="p">,</span>
        <span class="s">"tcp.count"</span><span class="p">,</span> <span class="s">"Count tcp state."</span><span class="p">,</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">tcp_state_count</span><span class="p">()</span> <span class="p">(</span><span class="n">tcpStateCount</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tcpStateCount</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="c">// Create a new netlink request</span>
    <span class="n">socket_fd</span> <span class="o">:=</span> <span class="n">nl</span><span class="o">.</span><span class="n">NewNetlinkRequest</span><span class="p">(</span><span class="n">nl</span><span class="o">.</span><span class="n">SOCK_DIAG_BY_FAMILY</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">NLM_F_DUMP</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c">// returns a new NetlinkMessage InetDiagReqV2</span>
        <span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L37</span>
        <span class="n">msg</span> <span class="o">:=</span> <span class="n">NewInetDiagReqV2</span><span class="p">(</span>
            <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span>
            <span class="n">syscall</span><span class="o">.</span><span class="n">IPPROTO_TCP</span><span class="p">,</span>
            <span class="n">AllTCPStates</span><span class="p">)</span>
        <span class="n">msg</span><span class="o">.</span><span class="n">Ext</span> <span class="o">|=</span> <span class="p">(</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">INET_DIAG_INFO</span> <span class="o">-</span> <span class="m">1</span><span class="p">))</span>
        <span class="n">socket_fd</span><span class="o">.</span><span class="n">AddData</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c">// return [][]byte</span>
    <span class="n">res</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">socket_fd</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">syscall</span><span class="o">.</span><span class="n">NETLINK_INET_DIAG</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">data</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">res</span> <span class="p">{</span>
        <span class="n">state</span> <span class="o">:=</span> <span class="n">TcpStateNames</span><span class="p">[</span><span class="n">ParseInetDiagMsg</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">State</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
            <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">]</span> <span class="o">+=</span> <span class="m">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">]</span> <span class="o">=</span> <span class="m">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">tcpStateCount</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">tcpmMain</span><span class="p">()</span> <span class="p">(</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tcp_state_count</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">jsonArray</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
    <span class="k">if</span> <span class="no">nil</span> <span class="o">!=</span> <span class="n">err</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Cannot create JSON array: %s"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">jsonArray</span><span class="p">),</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">eeoss</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"syscall"</span>
    <span class="s">"unsafe"</span>
<span class="p">)</span>
<span class="c">// https://pkg.go.dev/github.com/elastic/gosigar/sys/linux</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">AllTCPStates</span> <span class="o">=</span> <span class="o">^</span><span class="kt">uint32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
<span class="p">)</span>
<span class="c">// https://github.com/torvalds/linux/blob/5924bbecd0267d87c24110cbe2041b5075173a25/include/net/tcp_states.h#L16</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">TCP_ESTABLISHED</span> <span class="o">=</span> <span class="no">iota</span> <span class="o">+</span> <span class="m">1</span>
    <span class="n">TCP_SYN_SENT</span>
    <span class="n">TCP_SYN_RECV</span>
    <span class="n">TCP_FIN_WAIT1</span>
    <span class="n">TCP_FIN_WAIT2</span>
    <span class="n">TCP_TIME_WAIT</span>
    <span class="n">TCP_CLOSE</span>
    <span class="n">TCP_CLOSE_WAIT</span>
    <span class="n">TCP_LAST_ACK</span>
    <span class="n">TCP_LISTEN</span>
    <span class="n">TCP_CLOSING</span> <span class="c">/* Now a valid state */</span>
<span class="p">)</span>
<span class="k">var</span> <span class="n">TcpStateNames</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">uint8</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
    <span class="n">TCP_ESTABLISHED</span><span class="o">:</span> <span class="s">"ESTAB"</span><span class="p">,</span>
    <span class="n">TCP_SYN_SENT</span><span class="o">:</span>    <span class="s">"SYN-SENT"</span><span class="p">,</span>
    <span class="n">TCP_SYN_RECV</span><span class="o">:</span>    <span class="s">"SYN-RECV"</span><span class="p">,</span>
    <span class="n">TCP_FIN_WAIT1</span><span class="o">:</span>   <span class="s">"FIN-WAIT-1"</span><span class="p">,</span>
    <span class="n">TCP_FIN_WAIT2</span><span class="o">:</span>   <span class="s">"FIN-WAIT-2"</span><span class="p">,</span>
    <span class="n">TCP_TIME_WAIT</span><span class="o">:</span>   <span class="s">"TIME-WAIT"</span><span class="p">,</span>
    <span class="n">TCP_CLOSE</span><span class="o">:</span>       <span class="s">"UNCONN"</span><span class="p">,</span>
    <span class="n">TCP_CLOSE_WAIT</span><span class="o">:</span>  <span class="s">"CLOSE-WAIT"</span><span class="p">,</span>
    <span class="n">TCP_LAST_ACK</span><span class="o">:</span>    <span class="s">"LAST-ACK"</span><span class="p">,</span>
    <span class="n">TCP_LISTEN</span><span class="o">:</span>      <span class="s">"LISTEN"</span><span class="p">,</span>
    <span class="n">TCP_CLOSING</span><span class="o">:</span>     <span class="s">"CLOSING"</span><span class="p">,</span>
<span class="p">}</span>
<span class="c">// Extensions that can be used in the InetDiagReqV2 request to ask for</span>
<span class="c">// additional data.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L103</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">INET_DIAG_NONE</span>    <span class="o">=</span> <span class="m">0</span>
    <span class="n">INET_DIAG_MEMINFO</span> <span class="o">=</span> <span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="no">iota</span>
    <span class="n">INET_DIAG_INFO</span>
    <span class="n">INET_DIAG_VEGASINFO</span>
    <span class="n">INET_DIAG_CONG</span>
    <span class="n">INET_DIAG_TOS</span>
    <span class="n">INET_DIAG_TCLASS</span>
    <span class="n">INET_DIAG_SKMEMINFO</span>
    <span class="n">INET_DIAG_SHUTDOWN</span>
    <span class="n">INET_DIAG_DCTCPINFO</span>
    <span class="n">INET_DIAG_PROTOCOL</span> <span class="c">/* response attribute only */</span>
    <span class="n">INET_DIAG_SKV6ONLY</span>
    <span class="n">INET_DIAG_LOCALS</span>
    <span class="n">INET_DIAG_PEERS</span>
    <span class="n">INET_DIAG_PAD</span>
    <span class="n">INET_DIAG_MARK</span>
<span class="p">)</span>
<span class="c">// V2 Request</span>
<span class="k">var</span> <span class="n">SizeofInetDiagReqV2</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Sizeof</span><span class="p">(</span><span class="n">InetDiagReqV2</span><span class="p">{}))</span>
<span class="c">// InetDiagReqV2 (inet_diag_req_v2) is used to request diagnostic data.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L37</span>
<span class="k">type</span> <span class="n">InetDiagReqV2</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Family</span>   <span class="kt">uint8</span>
    <span class="n">Protocol</span> <span class="kt">uint8</span>
    <span class="n">Ext</span>      <span class="kt">uint8</span>
    <span class="n">Pad</span>      <span class="kt">uint8</span>
    <span class="n">States</span>   <span class="kt">uint32</span>
    <span class="n">ID</span>       <span class="n">InetDiagSockID</span>
<span class="p">}</span>
<span class="c">// InetDiagSockID (inet_diag_sockid) contains the socket identity.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L13</span>
<span class="k">type</span> <span class="n">InetDiagSockID</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">SPort</span>  <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">byte</span>    <span class="c">// Source port (big-endian).</span>
    <span class="n">DPort</span>  <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">byte</span>    <span class="c">// Destination port (big-endian).</span>
    <span class="n">Src</span>    <span class="p">[</span><span class="m">4</span><span class="p">][</span><span class="m">4</span><span class="p">]</span><span class="kt">byte</span> <span class="c">// Source IP</span>
    <span class="n">Dst</span>    <span class="p">[</span><span class="m">4</span><span class="p">][</span><span class="m">4</span><span class="p">]</span><span class="kt">byte</span> <span class="c">// Destination IP</span>
    <span class="n">If</span>     <span class="kt">uint32</span>
    <span class="n">Cookie</span> <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">uint32</span>
<span class="p">}</span>
<span class="c">// InetDiagMsg (inet_diag_msg) is the base info structure. It contains socket</span>
<span class="c">// identity (addrs/ports/cookie) and the information shown by netstat.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L86</span>
<span class="k">type</span> <span class="n">InetDiagMsg</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Family</span>  <span class="kt">uint8</span> <span class="c">// Address family.</span>
    <span class="n">State</span>   <span class="kt">uint8</span> <span class="c">// TCP State</span>
    <span class="n">Timer</span>   <span class="kt">uint8</span>
    <span class="n">Retrans</span> <span class="kt">uint8</span>
    <span class="n">ID</span> <span class="n">InetDiagSockID</span>
    <span class="n">Expires</span> <span class="kt">uint32</span>
    <span class="n">RQueue</span>  <span class="kt">uint32</span> <span class="c">// Recv-Q</span>
    <span class="n">WQueue</span>  <span class="kt">uint32</span> <span class="c">// Send-Q</span>
    <span class="n">UID</span>     <span class="kt">uint32</span> <span class="c">// UID</span>
    <span class="n">Inode</span>   <span class="kt">uint32</span> <span class="c">// Inode of socket.</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">FamilyNames</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">uint8</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
    <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET</span><span class="o">:</span>  <span class="s">"tcp"</span><span class="p">,</span>
    <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET6</span><span class="o">:</span> <span class="s">"tcp6"</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">InetDiagReqV2</span><span class="p">)</span> <span class="n">Serialize</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="m">56</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="n">req</span><span class="p">)))[</span><span class="o">:</span><span class="p">]</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">InetDiagReqV2</span><span class="p">)</span> <span class="n">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">SizeofInetDiagReqV2</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">NewInetDiagReqV2</span><span class="p">(</span><span class="n">family</span><span class="p">,</span> <span class="n">protocol</span> <span class="kt">uint8</span><span class="p">,</span> <span class="n">states</span> <span class="kt">uint32</span><span class="p">)</span> <span class="o">*</span><span class="n">InetDiagReqV2</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">InetDiagReqV2</span><span class="p">{</span>
        <span class="n">Family</span><span class="o">:</span>   <span class="n">family</span><span class="p">,</span>
        <span class="n">Protocol</span><span class="o">:</span> <span class="n">protocol</span><span class="p">,</span>
        <span class="n">States</span><span class="o">:</span>   <span class="n">states</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">msg</span> <span class="o">*</span><span class="n">InetDiagMsg</span><span class="p">)</span> <span class="n">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">TcpStateNames</span><span class="p">[</span><span class="n">msg</span><span class="o">.</span><span class="n">State</span><span class="p">])</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">ParseInetDiagMsg</span><span class="p">(</span><span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="o">*</span><span class="n">InetDiagMsg</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">InetDiagMsg</span><span class="p">)(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="m">0</span><span class="p">]))</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="测试结果">测试结果</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># time ./zabbix_agent2 -t net.tcp.socket.count[,,,,established]</span>
net.tcp.socket.count[,,,,established]         <span class="o">[</span>s|3783]
real    0m2.814s
user    0m2.055s
sys     0m0.413s
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># zabbix_agent2 -t tcp.count</span>
tcp.count                                     <span class="o">[</span>s|<span class="o">{</span><span class="s2">"CLOSE-WAIT"</span>:530,<span class="s2">"ESTAB"</span>:3797,<span class="s2">"FIN-WAIT-2"</span>:527,<span class="s2">"LISTEN"</span>:4,<span class="s2">"SYN-SENT"</span>:2,<span class="s2">"TIME-WAIT"</span>:176<span class="o">}]</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Monitor" /><summary type="html"><![CDATA[修复zabbix CPU占用高的bug]]></summary></entry><entry><title type="html">Deployment</title><link href="/kubernetes-kubeadm-deployment/" rel="alternate" type="text/html" title="Deployment" /><published>2022-10-18T00:00:00+08:00</published><updated>2022-10-18T00:00:00+08:00</updated><id>/kubernetes-kubeadm-deployment</id><content type="html" xml:base="/kubernetes-kubeadm-deployment/"><![CDATA[<p>deployment</p>

<h3 id="创建及删除deployment">创建及删除deployment</h3>

<p>利用deployment提高pod的健壮性,deployment是一个控制器,保证环境中有一定数量的pod</p>

<h4 id="通过yaml方式创建">通过yaml方式创建</h4>

<p>不建议使用命令行创建,从1.8之后不了–image之外,不再支持其他选项</p>

<p>kubectl create deplyment 名字 –image=镜像 –dry-run=client -o yaml &gt; d1.yaml</p>

<h4 id="创建目录">创建目录</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>deploy
<span class="nb">cd </span>deploy
</code></pre></div></div>

<h4 id="创建命名空间">创建命名空间</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create ns nsdeploy
kubens nsdeploy
</code></pre></div></div>

<h4 id="生成文件">生成文件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create deployment test1 <span class="nt">--image</span><span class="o">=</span>nginx <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml <span class="o">&gt;</span> d1.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>                             <span class="c1"># deploy 标签,可以和后面的pod的标签不一直</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">test1</span>                         <span class="c1"># deployment 名字</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>                         <span class="c1"># 副本数量</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>                      <span class="c1"># 两个APP的名字必须一致</span>
  <span class="na">strategy</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>                         <span class="c1"># 至 resources 都是pod的设置</span>
      <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>                    <span class="c1"># 两个APP的名字必须一致</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<h4 id="创建">创建</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl apply <span class="nt">-f</span> d1.yaml
deployment.apps/test1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-gpgwc   1/1   Running   0     2s    10.244.166.156   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Running   0     2s    10.244.104.30    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Running   0     2s    10.244.104.31    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="验证">验证</h4>

<p>删除一个pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl delete pods test1-78747d7d6c-gpgwc
pod <span class="s2">"test1-78747d7d6c-gpgwc"</span> deleted
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-htwnb   1/1   Running   0     14s   10.244.104.32   node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Running   0     34s   10.244.104.30   node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Running   0     34s   10.244.104.31   node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="健壮测试">健壮测试</h4>

<p>关闭一个pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# poweroff 
</code></pre></div></div>

<p>故障的几分钟内master仍会等待pod恢复.若等几分钟还没恢复，会执行删除，删除完毕后.master会重新调度新的pod替代</p>

<p>node2开机后被标记的pod会被删除</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8fmxt   1/1   Running       0     60s     10.244.166.157   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-hnq47   1/1   Running       0     60s     10.244.166.158   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-htwnb   1/1   Terminating   0     8m11s   10.244.104.32    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Terminating   0     8m31s   10.244.104.30    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Terminating   0     8m31s   10.244.104.31    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running       0     60s     10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="删除deployment的方法">删除deployment的方法</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete -f d1.yaml
kubectl delete deploy 名字
</code></pre></div></div>

<h3 id="伸缩pod副本数">伸缩pod副本数</h3>

<h4 id="通过命令行修改">通过命令行修改</h4>

<p>kubectl scale deplyment 名称 –replicas=新的副本数量</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>5
deployment.apps/test1 scaled
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8fmxt   1/1   Running   0     4m28s   10.244.166.157   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-8lvwv   1/1   Running   0     3s      10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-hnq47   1/1   Running   0     4m28s   10.244.166.158   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     4m28s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     3s      10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="编辑deployment的方式">编辑deployment的方式</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit deployments test1
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8lvwv   1/1   Running   0     98s    10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     6m3s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     98s    10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="修改yaml">修改yaml</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl apply <span class="nt">-f</span> d1.yaml
deployment.apps/test1 configured
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8lvwv   1/1   Running   0     2m3s    10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-fdd4c   1/1   Running   0     3s      10.244.104.36    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     6m28s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-wxk76   1/1   Running   0     3s      10.244.104.35    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     2m3s    10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h3 id="更新及回滚容器所使用的镜像">更新及回滚容器所使用的镜像</h3>

<p>水平自动更新HPA,可以根据CPU负载通知deployment,让其更新pod数目以减轻pod的负载</p>

<p>kubectl autoscale deployment 名字 –min=M –max=N –cpu-percent=X</p>

<p>最少运行M个Pod，确保CPU不超过X%, 否则就扩展pod的副本数量,最大扩展到N，cou默认是80</p>

<h4 id="查看当前是否有hpa配置">查看当前是否有HPA配置</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get hpa
No resources found <span class="k">in </span>nsdeploy namespace.
</code></pre></div></div>

<h4 id="创建hpa这是最多运行5个最少运行2个pod">创建hpa,这是最多运行5个,最少运行2个pod</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl autoscale deployment test1 <span class="nt">--min</span><span class="o">=</span>2 <span class="nt">--max</span><span class="o">=</span>5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get hpa
NAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE
test1   Deployment/test1   &lt;unknown&gt;/80%   2         5         0          11s
</code></pre></div></div>

<h4 id="把副本数量设置为1">把副本数量设置为1</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>1
deployment.apps/test1 scaled
</code></pre></div></div>

<p>最用运行数量为2个</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
test1-78747d7d6c-kqh9x   1/1     Running   0          13m
test1-78747d7d6c-vm2kf   1/1     Running   0          10s
</code></pre></div></div>

<h4 id="删除-hpa">删除 hpa</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>0
deployment.apps/test1 scaled
</code></pre></div></div>

<h4 id="创建hpacpu不可以超过80">创建HPA，cpu不可以超过80</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl edit deployment test1
deployment.apps/test1 edited
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">resources</span><span class="pi">:</span> 
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span>  <span class="s">400m</span>
</code></pre></div></div>

<h4 id="把deplyment的副本数量设置1">把deplyment的副本数量设置1</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>1
deployment.apps/test1 scaled
</code></pre></div></div>

<h3 id="回滚和升级">回滚和升级</h3>

<h4 id="升级">升级</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployments <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES   SELECTOR
test1   2/2     2            2           31m   nginx        nginx    <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<p>三种方法</p>

<p>1、kubectl edit deploy</p>

<p>2、修改deployment的yaml文件</p>

<p>3、命令行修改</p>

<h4 id="命令行语法">命令行语法</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">set </span>image deploy 名字 容器名<span class="o">=</span>镜像 &lt; <span class="nt">--record</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>record可选</p>

<h4 id="把-test1的镜像更换为nginxlatest">把 test1的镜像更换为nginx:latest</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:latest
deployment.apps/test1 image updated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployment <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR
test1   2/2     2            2           35m   nginx        nginx:latest   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h4 id="换成179">换成1.7.9</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl get deployment <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES        SELECTOR
test1   2/2     2            2           35m   nginx        nginx:1.7.9   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h4 id="查看变化过程">查看变化过程</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl rollout <span class="nb">history </span>deployment test1
deployment.apps/test1 
REVISION  CHANGE-CAUSE
1         &lt;none&gt;
2         &lt;none&gt;
3         &lt;none&gt;
4         &lt;none&gt;
</code></pre></div></div>

<h4 id="切换增加record">切换增加record</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl rollout <span class="nb">history </span>deployment test1
deployment.apps/test1 
REVISION  CHANGE-CAUSE
1         &lt;none&gt;
2         &lt;none&gt;
3         &lt;none&gt;
5         kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.9 <span class="nt">--record</span><span class="o">=</span><span class="nb">true
</span>6         kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h3 id="回滚">回滚</h3>

<p>kubectl rollout undo deployment 名字</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl rollout undo deployment 名字 <span class="nt">--to-revision</span><span class="o">=</span>版本
</code></pre></div></div>

<p>版本指的是编号为5的变更记录</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl rollout undo deployment/test1 <span class="nt">--to-revision</span><span class="o">=</span>5
deployment.apps/test1 rolled back
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployments. <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES      SELECTOR
test1   2/2     2            2           41m   nginx        nginx:1.9   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h3 id="滚动升级">滚动升级</h3>

<p>两个参数:</p>

<p>maxSurge:   用来指定最多一次创建几个pod,可以是百分比,也可以是具体数目</p>

<p>maxUnavailable: 用来指定最多删除几个pid,可以是数字或者百分比</p>

<h4 id="设置deployment">设置deployment</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit deployment test1
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">rollingUpdate</span><span class="pi">:</span>
      <span class="na">maxSurge</span><span class="pi">:</span> <span class="s">25%</span>
      <span class="na">maxUnavailable</span><span class="pi">:</span> <span class="s">25%</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">RollingUpdate</span>
</code></pre></div></div>

<p>修改为1</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
</code></pre></div></div>

<p>删一个，建一个</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS              RESTARTS   AGE
test1-5545c6d5df-c4bbz   0/1     ContainerCreating   0          1s
test1-5545c6d5df-mhs78   0/1     ContainerCreating   0          1s
test1-5f75995b7b-drr4f   0/1     Terminating         0          11m
test1-5f75995b7b-lt5xs   1/1     Running             0          11m
<span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS        RESTARTS   AGE
test1-5545c6d5df-c4bbz   1/1     Running       0          5s
test1-5545c6d5df-mhs78   1/1     Running       0          5s
test1-5f75995b7b-drr4f   0/1     Terminating   0          11m
test1-5f75995b7b-lt5xs   0/1     Terminating   0          11m
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[deployment]]></summary></entry><entry><title type="html">密码管理</title><link href="/kubernetes-kubeadm-password/" rel="alternate" type="text/html" title="密码管理" /><published>2022-09-27T00:00:00+08:00</published><updated>2022-09-27T00:00:00+08:00</updated><id>/kubernetes-kubeadm-password</id><content type="html" xml:base="/kubernetes-kubeadm-password/"><![CDATA[<p>密码管理的几种方式</p>

<h2 id="创建及删除secret">创建及删除secret</h2>

<p>避免mysql类型的容器变量保存在yaml里不安全,可以使用secret,保存方式为</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>键=值 或者是 key=value
</code></pre></div></div>

<h4 id="创建secret">创建secret</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# <span class="nb">mkdir </span>secret
<span class="o">[</span>root@master ~]# <span class="nb">cd </span>secret/
</code></pre></div></div>

<p>创建一个新的命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create ns nssec
namespace/nssec created
<span class="o">[</span>root@master secret]# kubens nssec
Context <span class="s2">"kubernetes-admin@kubernetes"</span> modified.
Active namespace is <span class="s2">"nssec"</span><span class="nb">.</span>
</code></pre></div></div>

<h4 id="命令行">命令行</h4>

<p>kubectl create secret generic 名字 –from-literal=k1=v1 –from-literal=k2=v2</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建一个名字为 mysecret1 的 secret</span>
<span class="o">[</span>root@master secret]# kubectl create secret generic mysecret1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">xx</span><span class="o">=</span>tom <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">yy</span><span class="o">=</span>redhat
secret/mysecret1 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-twgk8   kubernetes.io/service-account-token   3      2m56s
mysecret1             Opaque                                2      20s
</code></pre></div></div>

<p>secret有三种类型</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1、 Opaque: base64编码格式的secret，用来存储密码、密钥,数据可以通过base64解码
2、 kubernetes.io/dockerconfigjson: 用来存储私有docker registry的认证信息
3、 kubernetes.io/sevice-account-token: 用来被serviceaccount引用
</code></pre></div></div>

<p>创建serviceaccount时, kubernets会默认创建对应的secret.pod如果使用了serviceaccout,对应的secret会自动挂在到Pod目录/run/secrets/kubernets.io/serviceaccount</p>

<p>查看mysecret1的具体属性</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl describe secrets mysecret1
Name:         mysecret1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Type:  Opaque

Data
<span class="o">====</span>
xx:  3 bytes
yy:  6 bytes
</code></pre></div></div>

<p>这里可以看到两个变量,分别是xx和yy,但具体是什么这里看不出来</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl describe secrets mysecret1
Name:         mysecret1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Type:  Opaque

Data
<span class="o">====</span>
xx:  3 bytes
yy:  6 bytes
<span class="o">[</span>root@master secret]# kubectl get secret mysecret1 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  xx: dG9t
  yy: cmVkaGF0
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:38:45Z"</span>
  name: mysecret1
  namespace: nssec
  resourceVersion: <span class="s2">"98855"</span>
  uid: 388779de-d3aa-4a9e-bfbf-7f7d63b1af9a
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>上面data字段里就是mysecret1的键值对,需要base64解码才可以看到具体值</p>

<p>解码</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="s2">"dG9t"</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
tom[root@master secret]#  <span class="nb">echo</span> <span class="s2">"cmVkaGF0"</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
redhat[root@master secret]# 
</code></pre></div></div>

<h4 id="把文件创建为secret">把文件创建为secret</h4>

<p>文件名作为key，内容作为value.</p>

<p>kubectl create secret generic mysecret2 –from-file=file1 –from-file=file2</p>

<p>作用是把一个文件的内容写入secret里,通过卷的方式来引用这个secret,就可以把此文件写入pod里了</p>

<p>查看hosts</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">cat</span> /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>创建secret</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts
secret/mysecret2 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:49:12Z"</span>
  name: mysecret2
  namespace: nssec
  resourceVersion: <span class="s2">"99732"</span>
  uid: 1e095123-849f-4cde-b092-ac574252075c
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>hosts代表文件，下面是内容</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.data.hosts}'</span>
<span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
</code></pre></div></div>

<p>解码</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.data.hosts}'</span> | <span class="nb">base64</span> <span class="nt">-d</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>创建一个包含两个文件的secret mysecret3</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret3 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
secret/mysecret3 created
</code></pre></div></div>

<p>获取mysecret3的键值对</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret3 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
  issue: <span class="nv">XFMKS2VybmVsIFxyIG9uIGFuIFxtCgo</span><span class="o">=</span>
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:51:57Z"</span>
  name: mysecret3
  namespace: nssec
  resourceVersion: <span class="s2">"99966"</span>
  uid: f68c6996-7f6a-476f-b81c-85770498cda2
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>这种方法一般用于给pod传递文件</p>

<h4 id="变量文件的方法">变量文件的方法</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>变量 1 = 值 1
变量 2 = 值 2
</code></pre></div></div>

<p>创建变量文件env.txt</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">cat </span>env.txt 
<span class="nv">xx</span><span class="o">=</span>tom
<span class="nv">yy</span><span class="o">=</span>redhat
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret4 <span class="nt">--from-env-file</span><span class="o">=</span>env.txt
secret/mysecret4 created
</code></pre></div></div>

<h4 id="通过yaml文件的方式">通过yaml文件的方式</h4>

<p>先求出base64的值</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"tom"</span> | <span class="nb">base64
</span>dG9t
<span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"redhat"</span> | <span class="nb">base64
</span>cmVkaGF0
</code></pre></div></div>

<p>创建yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">mysecret5</span>
<span class="na">type</span><span class="pi">:</span>  <span class="s">Opaque</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">xx</span><span class="pi">:</span>  <span class="s">dG9t</span>
  <span class="na">redhat</span><span class="pi">:</span>  <span class="s">cmVkaGF0</span>
</code></pre></div></div>

<p>创建secret</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> secret5.yaml 
secret/mysecret5 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-twgk8   kubernetes.io/service-account-token   3      24m
mysecret1             Opaque                                2      21m
mysecret2             Opaque                                1      11m
mysecret3             Opaque                                2      8m19s
mysecret4             Opaque                                2      3m26s
mysecret5             Opaque                                2      20s
</code></pre></div></div>

<h4 id="删除secret">删除secret</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl delete secrets mysecret5
secret <span class="s2">"mysecret5"</span> deleted
</code></pre></div></div>

<h3 id="在pod里以变量和卷的方式引用secret">在pod里以变量和卷的方式引用secret</h3>

<h4 id="以卷的方式">以卷的方式</h4>

<p>在pod的yaml文件里,创建一个类型为secret的卷，然后挂在到容器里某个制定的目录里。容器创建好后,会在容器的挂在目录里创建一个文件，此文件的文件名为secret里的key.文件内容对应key的value.以卷的方式引用secret的主要作用是往pod里传递文件</p>

<p>创建pod的yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod1</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">secret</span><span class="pi">:</span>
      <span class="na">secretName</span><span class="pi">:</span>  <span class="s">mysecret2</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/etc/test"</span>
<span class="na">status</span><span class="pi">:</span>  <span class="pi">{}</span>
</code></pre></div></div>

<p>在pod1里吧xx这个卷挂在到/etc/test/目录里.容器里会有hosts文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod1.yaml 
pod/pod1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">cat</span> /etc/test/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>删除pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete <span class="nt">-f</span> pod1.yaml
</code></pre></div></div>

<p>修改pod1.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod1</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">secret</span><span class="pi">:</span>
      <span class="na">secretName</span><span class="pi">:</span>  <span class="s">mysecret3</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/etc/test/issue"</span>
      <span class="na">subPath</span><span class="pi">:</span>  <span class="s">issue</span>
<span class="na">status</span><span class="pi">:</span>  <span class="pi">{}</span>
</code></pre></div></div>

<p>mysecret3里有两个文件，如果只想使用一个,可以使用subPath来解决</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod1.yaml 
pod/pod1 created
<span class="o">[</span>root@master secret]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">ls</span> /etc/test/
issue
</code></pre></div></div>

<p>如果修改服务的配置文件,比如nginx的配置文件,可以不需要重新编译镜像</p>

<h4 id="以变量的方式">以变量的方式</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">env</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">变量名</span>
  <span class="na">value</span><span class="pi">:</span>  <span class="s">值</span>
</code></pre></div></div>

<p>如果是从secret引用值,这里写valueFrom</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">env</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">变量名</span>
  <span class="na">valueFrom</span><span class="pi">:</span>
    <span class="na">secretKeyRef</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span>  <span class="s">secretX</span>
      <span class="na">key</span><span class="pi">:</span>  <span class="s">keyX</span>
</code></pre></div></div>

<p>变量的值会使用secretX里的keyX这个键对应的值</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">mysql</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod2</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">MYSQL_ROOT_PASSWORD</span>
      <span class="na">valueFrom</span><span class="pi">:</span> 
        <span class="na">secretKeyRef</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span>  <span class="s">mysecret1</span>
          <span class="na">key</span><span class="pi">:</span>  <span class="s">yy</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod2.yaml
pod/pod2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
pod1   1/1     Running   0          11m   10.244.104.22   node2   &lt;none&gt;           &lt;none&gt;
pod2   1/1     Running   0          16s   10.244.104.23   node2   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h3 id="创建及删除configmap">创建及删除configmap</h3>

<p>主要作用:</p>

<ul>
  <li>存储密码</li>
  <li>往pod里传递文件</li>
  <li>格式: 键=值</li>
</ul>

<p>和secret的区别:</p>

<ul>
  <li>不使用base64编码</li>
</ul>

<p>查看命令</p>

<p>kubectl get configmaps</p>

<p>创建方法</p>

<ul>
  <li>直接指定key和value</li>
  <li>把一个文件内容作为value</li>
  <li>直接写yaml</li>
</ul>

<h4 id="命令行的方式">命令行的方式</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create cm 名字 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key</span><span class="o">=</span>v1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">k2</span><span class="o">=</span>v2 ...
</code></pre></div></div>

<p>创建一个my1的configmap</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">xx</span><span class="o">=</span>tom <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">yy</span><span class="o">=</span>redhat
configmap/my1 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get configmaps
NAME               DATA   AGE
kube-root-ca.crt   1      47h
my1                2      26s
<span class="o">[</span>root@master ~]# kubectl describe configmaps my1
Name:         my1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
xx:
<span class="nt">----</span>
tom
yy:
<span class="nt">----</span>
redhat
Events:  &lt;none&gt;
</code></pre></div></div>

<h4 id="文件方式">文件方式</h4>

<p>kubectl create configmap my2 –from-file=file1</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
configmap/my2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
configmap/my2 created
<span class="o">[</span>root@master ~]# 
<span class="o">[</span>root@master ~]# kubectl get cm
NAME               DATA   AGE
kube-root-ca.crt   1      47h
my1                2      2m37s
my2                2      16s
<span class="o">[</span>root@master ~]# kubectl describe cm my2
Name:         my2
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
hosts:
<span class="nt">----</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 

issue:
<span class="nt">----</span>
<span class="se">\S</span>
Kernel <span class="se">\r</span> on an <span class="se">\m</span>


Events:  &lt;none&gt;
</code></pre></div></div>

<p>或者</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl describe cm my2
Name:         my2
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
hosts:
<span class="nt">----</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 

issue:
<span class="nt">----</span>
<span class="se">\S</span>
Kernel <span class="se">\r</span> on an <span class="se">\m</span>


Events:  &lt;none&gt;
<span class="o">[</span>root@master ~]# kubectl get cm my2 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="s2">"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><span class="se">\n</span><span class="s2">::1
    </span><span class="se">\ </span><span class="s2">       localhost localhost.localdomain localhost6 localhost6.localdomain6</span><span class="se">\n</span><span class="s2">192.168.122.200
    master</span><span class="se">\n</span><span class="s2">192.168.122.202 node1 </span><span class="se">\n</span><span class="s2">192.168.122.203 node2 </span><span class="se">\n</span><span class="s2">"</span>
  issue: |+
    <span class="se">\S</span>
    Kernel <span class="se">\r</span> on an <span class="se">\m</span>

kind: ConfigMap
metadata:
  creationTimestamp: <span class="s2">"2022-07-21T15:06:23Z"</span>
  name: my2
  namespace: nssec
  resourceVersion: <span class="s2">"106264"</span>
  uid: 68f8f1b3-f44e-4303-91c9-628e55904fb9
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get cm my2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'.{.data.hosts}'</span>
.127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<h4 id="使用configmap">使用configmap</h4>

<p>以卷的方式</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span> 
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod3</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod3</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">configMap</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span>  <span class="s">my2</span>   <span class="c1"># 关联my2的 configmap</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod3</span>
    <span class="na">resources</span><span class="pi">:</span>  <span class="pi">{}</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">/etc/test"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl apply <span class="nt">-f</span> pod.yaml 
pod/pod3 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">ls</span> /etc/test
hosts
issue
</code></pre></div></div>

<p>查看文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">ls</span> /etc/test
hosts
issue
<span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">cat</span> /etc/test/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>如果只想挂载一个文件则使用subPath</p>

<h4 id="以变量的方式-1">以变量的方式</h4>

<p>创建pod的yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod4</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod4</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">hub.c.163.com/library/mysql:latest</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod4</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">MYSQL_ROOT_PASSWORD</span>
      <span class="na">valueFrom</span><span class="pi">:</span>
        <span class="na">configMapKeyRef</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span>  <span class="s">my1</span>
          <span class="na">key</span><span class="pi">:</span>  <span class="s">yy</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl apply <span class="nt">-f</span> pod4.yaml 
pod/pod4 created
</code></pre></div></div>

<p>获取IP</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
pod1   1/1     Running   1          46h   10.244.104.25    node2   &lt;none&gt;           &lt;none&gt;
pod2   1/1     Running   1          46h   10.244.104.24    node2   &lt;none&gt;           &lt;none&gt;
pod3   1/1     Running   0          11m   10.244.166.152   node1   &lt;none&gt;           &lt;none&gt;
pod4   1/1     Running   0          23s   10.244.166.153   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>检查</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# mysql <span class="nt">-uroot</span> <span class="nt">-h10</span>.244.166.153 <span class="nt">-predhat</span>
Welcome to the MariaDB monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span><span class="nb">.</span>
Your MySQL connection <span class="nb">id </span>is 4
Server version: 5.7.18 MySQL Community Server <span class="o">(</span>GPL<span class="o">)</span>

Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type <span class="s1">'help;'</span> or <span class="s1">'\h'</span> <span class="k">for </span>help. Type <span class="s1">'\c'</span> to clear the current input statement.

MySQL <span class="o">[(</span>none<span class="o">)]&gt;</span> 
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[密码管理的几种方式]]></summary></entry><entry><title type="html">docker 部署redis sentinel</title><link href="/docker-03/" rel="alternate" type="text/html" title="docker 部署redis sentinel" /><published>2022-09-19T00:00:00+08:00</published><updated>2022-09-19T00:00:00+08:00</updated><id>/docker-03</id><content type="html" xml:base="/docker-03/"><![CDATA[<p>Redis Docker Sentinel</p>

<h4 id="docker-安装">Docker 安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash &lt;<span class="o">(</span>wget <span class="nt">-O-</span> get.docker.com<span class="o">)</span>
</code></pre></div></div>

<h4 id="docker-compose-安装">Docker Compose 安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#https://docs.docker.com/compose/install/linux/</span>
curl <span class="nt">-SL</span> https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-linux-x86_64 <span class="nt">-o</span> /usr/local/bin/docker-compose

<span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose
docker-compose <span class="nt">--version</span>
</code></pre></div></div>

<h4 id="修改内核参数">修改内核参数</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> /etc/sysctl.d/docker-compose.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
net.core.somaxconn = 1024
net.ipv4.tcp_syncookies = 0 
vm.overcommit_memory = 1
</span><span class="no">EOF 

</span>sysctl <span class="nt">--system</span> 
</code></pre></div></div>

<h4 id="关闭防火墙">关闭防火墙</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl stop firewalld
systemctl disable firewalld
</code></pre></div></div>

<h4 id="目录结构">目录结构</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /data/redis
tree

├── sentinel
│   ├── docker-compose.yaml
│   ├── redis-sentinel-1.conf
│   ├── redis-sentinel-2.conf
│   └── redis-sentinel-3.conf
└── server
    ├── data
    │   ├── redis-master
    │   │   └── dump.rdb
    │   ├── redis-slave-1
    │   │   └── dump.rdb
    │   └── redis-slave-2
    │       └── dump.rdb
    ├── docker-compose.yaml
    ├── redis-master.conf
    ├── redis-slave1.conf
    └── redis-slave2.conf
</code></pre></div></div>

<h4 id="sentinel配置">sentinel配置</h4>

<h5 id="redis-sentinel-1conf">redis-sentinel-1.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>

port 26379

requirepass 123456

sentinel monitor mymaster 192.168.122.203 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h5 id="redis-sentinel-2conf">redis-sentinel-2.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>
port 26380

requirepass 123456

sentinel monitor mymaster 192.168.122.203 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h5 id="redis-sentinel-3conf">redis-sentinel-3.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>

port 26381

requirepass 123456

sentinel monitor mymaster 127.0.0.1 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h4 id="server配置">server配置</h4>

<h5 id="redis-masterconf">redis-master.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6379

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>
</code></pre></div></div>

<h5 id="redis-slave1conf">redis-slave1.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6380

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>

slaveof 192.168.122.203 6379

masterauth <span class="s2">"123456"</span>
</code></pre></div></div>

<h5 id="redis-slave2conf">redis-slave2.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6381

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>

slaveof 192.168.122.203 6379

masterauth <span class="s2">"123456"</span>
</code></pre></div></div>

<h4 id="docker-compose配置">Docker Compose配置</h4>

<h5 id="sentinel">sentinel</h5>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>

<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">redis-sentinel-1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-1.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
  <span class="na">redis-sentinel-2</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-2.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
  <span class="na">redis-sentinel-3</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-3</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-3.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
</code></pre></div></div>

<h5 id="server">server</h5>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>

<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">redis-server-master</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-master</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-master.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-master:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
  <span class="na">redis-server-slave-1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-slave-1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">redis-server-master</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-slave1.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-slave-1:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
  <span class="na">redis-server-slave-2</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-slave-2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">redis-server-master</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-slave2.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-slave-2:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="运行">运行</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /data/redis/server/
docker-compose up <span class="nt">-d</span>
<span class="nb">cd</span> /data/redis/sentinel
docker-compose up <span class="nt">-d</span>
</code></pre></div></div>

<h4 id="测试脚本">测试脚本</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">redis</span>

<span class="kn">from</span> <span class="nn">redis.sentinel</span> <span class="kn">import</span> <span class="n">Sentinel</span>

<span class="n">sentinel</span> <span class="o">=</span> <span class="n">Sentinel</span><span class="p">([(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26379</span><span class="p">),(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26380</span><span class="p">),(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26381</span><span class="p">)],</span> <span class="n">socket_timeout</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span><span class="n">sentinel_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">'password'</span><span class="p">:</span> <span class="s">'123456'</span><span class="p">})</span>
<span class="k">print</span> <span class="p">(</span><span class="n">sentinel</span><span class="p">.</span><span class="n">discover_master</span><span class="p">(</span><span class="s">'local-master'</span><span class="p">))</span>
<span class="k">print</span> <span class="p">(</span><span class="n">sentinel</span><span class="p">.</span><span class="n">discover_slaves</span><span class="p">(</span><span class="s">'local-master'</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="redis-cli">redis-cli</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nt">-h</span> 192.168.122.203 <span class="nt">-p</span> 6379
192.168.122.203:6379&gt; AUTH 123456
OK
192.168.122.203:6379&gt; ping
PONG
192.168.122.203:6379&gt;
</code></pre></div></div>

<h4 id="info">Info</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Replication</span>
role:master
connected_slaves:2
slave0:ip<span class="o">=</span>192.168.122.203,port<span class="o">=</span>6381,state<span class="o">=</span>online,offset<span class="o">=</span>101925,lag<span class="o">=</span>1
slave1:ip<span class="o">=</span>192.168.122.203,port<span class="o">=</span>6380,state<span class="o">=</span>online,offset<span class="o">=</span>101925,lag<span class="o">=</span>1
master_replid:efc50a97c93df3faa5764eb66f046bc211067d3b
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:102075
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:102075
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[Redis Docker Sentinel]]></summary></entry></feed>