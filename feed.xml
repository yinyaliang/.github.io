<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-10-21T17:57:46+08:00</updated><id>/feed.xml</id><title type="html">尹亚亮</title><subtitle>An amazing website.</subtitle><author><name>Your Name</name></author><entry><title type="html">TCP状态采集</title><link href="/monitor-tcp-state/" rel="alternate" type="text/html" title="TCP状态采集" /><published>2022-10-21T00:00:00+08:00</published><updated>2022-10-21T00:00:00+08:00</updated><id>/monitor-tcp-state</id><content type="html" xml:base="/monitor-tcp-state/"><![CDATA[<p>获取TCP状态值</p>

<h4 id="代码">代码</h4>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">eeoss</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"encoding/json"</span>
    <span class="s">"fmt"</span>
    <span class="s">"syscall"</span>
    <span class="s">"zabbix.com/pkg/plugin"</span>
    <span class="s">"github.com/vishvananda/netlink/nl"</span>
<span class="p">)</span>
<span class="c">// Plugin -</span>
<span class="k">type</span> <span class="n">Plugin</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">plugin</span><span class="o">.</span><span class="n">Base</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">impl</span> <span class="n">Plugin</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Plugin</span><span class="p">)</span> <span class="n">Export</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">params</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="n">ctx</span> <span class="n">plugin</span><span class="o">.</span><span class="n">ContextProvider</span><span class="p">)</span> <span class="p">(</span><span class="n">result</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">key</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"tcp.count"</span><span class="o">:</span>
        <span class="k">return</span> <span class="n">tcpmMain</span><span class="p">()</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">plugin</span><span class="o">.</span><span class="n">UnsupportedMetricError</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">plugin</span><span class="o">.</span><span class="n">RegisterMetrics</span><span class="p">(</span><span class="o">&amp;</span><span class="n">impl</span><span class="p">,</span> <span class="s">"Eeotcp"</span><span class="p">,</span>
        <span class="s">"tcp.count"</span><span class="p">,</span> <span class="s">"Count tcp state."</span><span class="p">,</span>
    <span class="p">)</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">tcp_state_count</span><span class="p">()</span> <span class="p">(</span><span class="n">tcpStateCount</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tcpStateCount</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="c">// Create a new netlink request</span>
    <span class="n">socket_fd</span> <span class="o">:=</span> <span class="n">nl</span><span class="o">.</span><span class="n">NewNetlinkRequest</span><span class="p">(</span><span class="n">nl</span><span class="o">.</span><span class="n">SOCK_DIAG_BY_FAMILY</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">NLM_F_DUMP</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c">// returns a new NetlinkMessage InetDiagReqV2</span>
        <span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L37</span>
        <span class="n">msg</span> <span class="o">:=</span> <span class="n">NewInetDiagReqV2</span><span class="p">(</span>
            <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span>
            <span class="n">syscall</span><span class="o">.</span><span class="n">IPPROTO_TCP</span><span class="p">,</span>
            <span class="n">AllTCPStates</span><span class="p">)</span>
        <span class="n">msg</span><span class="o">.</span><span class="n">Ext</span> <span class="o">|=</span> <span class="p">(</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">INET_DIAG_INFO</span> <span class="o">-</span> <span class="m">1</span><span class="p">))</span>
        <span class="n">socket_fd</span><span class="o">.</span><span class="n">AddData</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c">// return [][]byte</span>
    <span class="n">res</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">socket_fd</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">syscall</span><span class="o">.</span><span class="n">NETLINK_INET_DIAG</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">data</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">res</span> <span class="p">{</span>
        <span class="n">state</span> <span class="o">:=</span> <span class="n">TcpStateNames</span><span class="p">[</span><span class="n">ParseInetDiagMsg</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">State</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
            <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">]</span> <span class="o">+=</span> <span class="m">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">tcpStateCount</span><span class="p">[</span><span class="n">state</span><span class="p">]</span> <span class="o">=</span> <span class="m">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">tcpStateCount</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">tcpmMain</span><span class="p">()</span> <span class="p">(</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tcp_state_count</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">jsonArray</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
    <span class="k">if</span> <span class="no">nil</span> <span class="o">!=</span> <span class="n">err</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Cannot create JSON array: %s"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">string</span><span class="p">(</span><span class="n">jsonArray</span><span class="p">),</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">eeoss</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"syscall"</span>
    <span class="s">"unsafe"</span>
<span class="p">)</span>
<span class="c">// https://pkg.go.dev/github.com/elastic/gosigar/sys/linux</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">AllTCPStates</span> <span class="o">=</span> <span class="o">^</span><span class="kt">uint32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
<span class="p">)</span>
<span class="c">// https://github.com/torvalds/linux/blob/5924bbecd0267d87c24110cbe2041b5075173a25/include/net/tcp_states.h#L16</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">TCP_ESTABLISHED</span> <span class="o">=</span> <span class="no">iota</span> <span class="o">+</span> <span class="m">1</span>
    <span class="n">TCP_SYN_SENT</span>
    <span class="n">TCP_SYN_RECV</span>
    <span class="n">TCP_FIN_WAIT1</span>
    <span class="n">TCP_FIN_WAIT2</span>
    <span class="n">TCP_TIME_WAIT</span>
    <span class="n">TCP_CLOSE</span>
    <span class="n">TCP_CLOSE_WAIT</span>
    <span class="n">TCP_LAST_ACK</span>
    <span class="n">TCP_LISTEN</span>
    <span class="n">TCP_CLOSING</span> <span class="c">/* Now a valid state */</span>
<span class="p">)</span>
<span class="k">var</span> <span class="n">TcpStateNames</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">uint8</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
    <span class="n">TCP_ESTABLISHED</span><span class="o">:</span> <span class="s">"ESTAB"</span><span class="p">,</span>
    <span class="n">TCP_SYN_SENT</span><span class="o">:</span>    <span class="s">"SYN-SENT"</span><span class="p">,</span>
    <span class="n">TCP_SYN_RECV</span><span class="o">:</span>    <span class="s">"SYN-RECV"</span><span class="p">,</span>
    <span class="n">TCP_FIN_WAIT1</span><span class="o">:</span>   <span class="s">"FIN-WAIT-1"</span><span class="p">,</span>
    <span class="n">TCP_FIN_WAIT2</span><span class="o">:</span>   <span class="s">"FIN-WAIT-2"</span><span class="p">,</span>
    <span class="n">TCP_TIME_WAIT</span><span class="o">:</span>   <span class="s">"TIME-WAIT"</span><span class="p">,</span>
    <span class="n">TCP_CLOSE</span><span class="o">:</span>       <span class="s">"UNCONN"</span><span class="p">,</span>
    <span class="n">TCP_CLOSE_WAIT</span><span class="o">:</span>  <span class="s">"CLOSE-WAIT"</span><span class="p">,</span>
    <span class="n">TCP_LAST_ACK</span><span class="o">:</span>    <span class="s">"LAST-ACK"</span><span class="p">,</span>
    <span class="n">TCP_LISTEN</span><span class="o">:</span>      <span class="s">"LISTEN"</span><span class="p">,</span>
    <span class="n">TCP_CLOSING</span><span class="o">:</span>     <span class="s">"CLOSING"</span><span class="p">,</span>
<span class="p">}</span>
<span class="c">// Extensions that can be used in the InetDiagReqV2 request to ask for</span>
<span class="c">// additional data.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L103</span>
<span class="k">const</span> <span class="p">(</span>
    <span class="n">INET_DIAG_NONE</span>    <span class="o">=</span> <span class="m">0</span>
    <span class="n">INET_DIAG_MEMINFO</span> <span class="o">=</span> <span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="no">iota</span>
    <span class="n">INET_DIAG_INFO</span>
    <span class="n">INET_DIAG_VEGASINFO</span>
    <span class="n">INET_DIAG_CONG</span>
    <span class="n">INET_DIAG_TOS</span>
    <span class="n">INET_DIAG_TCLASS</span>
    <span class="n">INET_DIAG_SKMEMINFO</span>
    <span class="n">INET_DIAG_SHUTDOWN</span>
    <span class="n">INET_DIAG_DCTCPINFO</span>
    <span class="n">INET_DIAG_PROTOCOL</span> <span class="c">/* response attribute only */</span>
    <span class="n">INET_DIAG_SKV6ONLY</span>
    <span class="n">INET_DIAG_LOCALS</span>
    <span class="n">INET_DIAG_PEERS</span>
    <span class="n">INET_DIAG_PAD</span>
    <span class="n">INET_DIAG_MARK</span>
<span class="p">)</span>
<span class="c">// V2 Request</span>
<span class="k">var</span> <span class="n">SizeofInetDiagReqV2</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Sizeof</span><span class="p">(</span><span class="n">InetDiagReqV2</span><span class="p">{}))</span>
<span class="c">// InetDiagReqV2 (inet_diag_req_v2) is used to request diagnostic data.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L37</span>
<span class="k">type</span> <span class="n">InetDiagReqV2</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Family</span>   <span class="kt">uint8</span>
    <span class="n">Protocol</span> <span class="kt">uint8</span>
    <span class="n">Ext</span>      <span class="kt">uint8</span>
    <span class="n">Pad</span>      <span class="kt">uint8</span>
    <span class="n">States</span>   <span class="kt">uint32</span>
    <span class="n">ID</span>       <span class="n">InetDiagSockID</span>
<span class="p">}</span>
<span class="c">// InetDiagSockID (inet_diag_sockid) contains the socket identity.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L13</span>
<span class="k">type</span> <span class="n">InetDiagSockID</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">SPort</span>  <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">byte</span>    <span class="c">// Source port (big-endian).</span>
    <span class="n">DPort</span>  <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">byte</span>    <span class="c">// Destination port (big-endian).</span>
    <span class="n">Src</span>    <span class="p">[</span><span class="m">4</span><span class="p">][</span><span class="m">4</span><span class="p">]</span><span class="kt">byte</span> <span class="c">// Source IP</span>
    <span class="n">Dst</span>    <span class="p">[</span><span class="m">4</span><span class="p">][</span><span class="m">4</span><span class="p">]</span><span class="kt">byte</span> <span class="c">// Destination IP</span>
    <span class="n">If</span>     <span class="kt">uint32</span>
    <span class="n">Cookie</span> <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">uint32</span>
<span class="p">}</span>
<span class="c">// InetDiagMsg (inet_diag_msg) is the base info structure. It contains socket</span>
<span class="c">// identity (addrs/ports/cookie) and the information shown by netstat.</span>
<span class="c">// https://github.com/torvalds/linux/blob/v4.0/include/uapi/linux/inet_diag.h#L86</span>
<span class="k">type</span> <span class="n">InetDiagMsg</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Family</span>  <span class="kt">uint8</span> <span class="c">// Address family.</span>
    <span class="n">State</span>   <span class="kt">uint8</span> <span class="c">// TCP State</span>
    <span class="n">Timer</span>   <span class="kt">uint8</span>
    <span class="n">Retrans</span> <span class="kt">uint8</span>
    <span class="n">ID</span> <span class="n">InetDiagSockID</span>
    <span class="n">Expires</span> <span class="kt">uint32</span>
    <span class="n">RQueue</span>  <span class="kt">uint32</span> <span class="c">// Recv-Q</span>
    <span class="n">WQueue</span>  <span class="kt">uint32</span> <span class="c">// Send-Q</span>
    <span class="n">UID</span>     <span class="kt">uint32</span> <span class="c">// UID</span>
    <span class="n">Inode</span>   <span class="kt">uint32</span> <span class="c">// Inode of socket.</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">FamilyNames</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">uint8</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
    <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET</span><span class="o">:</span>  <span class="s">"tcp"</span><span class="p">,</span>
    <span class="n">syscall</span><span class="o">.</span><span class="n">AF_INET6</span><span class="o">:</span> <span class="s">"tcp6"</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">InetDiagReqV2</span><span class="p">)</span> <span class="n">Serialize</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="m">56</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="n">req</span><span class="p">)))[</span><span class="o">:</span><span class="p">]</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">InetDiagReqV2</span><span class="p">)</span> <span class="n">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">SizeofInetDiagReqV2</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">NewInetDiagReqV2</span><span class="p">(</span><span class="n">family</span><span class="p">,</span> <span class="n">protocol</span> <span class="kt">uint8</span><span class="p">,</span> <span class="n">states</span> <span class="kt">uint32</span><span class="p">)</span> <span class="o">*</span><span class="n">InetDiagReqV2</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">InetDiagReqV2</span><span class="p">{</span>
        <span class="n">Family</span><span class="o">:</span>   <span class="n">family</span><span class="p">,</span>
        <span class="n">Protocol</span><span class="o">:</span> <span class="n">protocol</span><span class="p">,</span>
        <span class="n">States</span><span class="o">:</span>   <span class="n">states</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">msg</span> <span class="o">*</span><span class="n">InetDiagMsg</span><span class="p">)</span> <span class="n">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">TcpStateNames</span><span class="p">[</span><span class="n">msg</span><span class="o">.</span><span class="n">State</span><span class="p">])</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">ParseInetDiagMsg</span><span class="p">(</span><span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="o">*</span><span class="n">InetDiagMsg</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">InetDiagMsg</span><span class="p">)(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="m">0</span><span class="p">]))</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="测试">测试</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># time ./zabbix_agent2 -t net.tcp.socket.count[,,,,established]</span>
net.tcp.socket.count[,,,,established]         <span class="o">[</span>s|3783]
real    0m2.814s
user    0m2.055s
sys     0m0.413s
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># zabbix_agent2 -t tcp.count</span>
tcp.count                                     <span class="o">[</span>s|<span class="o">{</span><span class="s2">"CLOSE-WAIT"</span>:530,<span class="s2">"ESTAB"</span>:3797,<span class="s2">"FIN-WAIT-2"</span>:527,<span class="s2">"LISTEN"</span>:4,<span class="s2">"SYN-SENT"</span>:2,<span class="s2">"TIME-WAIT"</span>:176<span class="o">}]</span>
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Monitor" /><summary type="html"><![CDATA[获取TCP状态值]]></summary></entry><entry><title type="html">Deployment</title><link href="/kubernetes-kubeadm-deployment/" rel="alternate" type="text/html" title="Deployment" /><published>2022-10-18T00:00:00+08:00</published><updated>2022-10-18T00:00:00+08:00</updated><id>/kubernetes-kubeadm-deployment</id><content type="html" xml:base="/kubernetes-kubeadm-deployment/"><![CDATA[<p>deployment</p>

<h3 id="创建及删除deployment">创建及删除deployment</h3>

<p>利用deployment提高pod的健壮性,deployment是一个控制器,保证环境中有一定数量的pod</p>

<h4 id="通过yaml方式创建">通过yaml方式创建</h4>

<p>不建议使用命令行创建,从1.8之后不了–image之外,不再支持其他选项</p>

<p>kubectl create deplyment 名字 –image=镜像 –dry-run=client -o yaml &gt; d1.yaml</p>

<h4 id="创建目录">创建目录</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>deploy
<span class="nb">cd </span>deploy
</code></pre></div></div>

<h4 id="创建命名空间">创建命名空间</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create ns nsdeploy
kubens nsdeploy
</code></pre></div></div>

<h4 id="生成文件">生成文件</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create deployment test1 <span class="nt">--image</span><span class="o">=</span>nginx <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml <span class="o">&gt;</span> d1.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>                             <span class="c1"># deploy 标签,可以和后面的pod的标签不一直</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">test1</span>                         <span class="c1"># deployment 名字</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>                         <span class="c1"># 副本数量</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>                      <span class="c1"># 两个APP的名字必须一致</span>
  <span class="na">strategy</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>                         <span class="c1"># 至 resources 都是pod的设置</span>
      <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">test1</span>                    <span class="c1"># 两个APP的名字必须一致</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<h4 id="创建">创建</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl apply <span class="nt">-f</span> d1.yaml
deployment.apps/test1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-gpgwc   1/1   Running   0     2s    10.244.166.156   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Running   0     2s    10.244.104.30    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Running   0     2s    10.244.104.31    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="验证">验证</h4>

<p>删除一个pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl delete pods test1-78747d7d6c-gpgwc
pod <span class="s2">"test1-78747d7d6c-gpgwc"</span> deleted
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-htwnb   1/1   Running   0     14s   10.244.104.32   node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Running   0     34s   10.244.104.30   node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Running   0     34s   10.244.104.31   node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="健壮测试">健壮测试</h4>

<p>关闭一个pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# poweroff 
</code></pre></div></div>

<p>故障的几分钟内master仍会等待pod恢复.若等几分钟还没恢复，会执行删除，删除完毕后.master会重新调度新的pod替代</p>

<p>node2开机后被标记的pod会被删除</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8fmxt   1/1   Running       0     60s     10.244.166.157   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-hnq47   1/1   Running       0     60s     10.244.166.158   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-htwnb   1/1   Terminating   0     8m11s   10.244.104.32    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-j4ttk   1/1   Terminating   0     8m31s   10.244.104.30    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-k7tcx   1/1   Terminating   0     8m31s   10.244.104.31    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running       0     60s     10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="删除deployment的方法">删除deployment的方法</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete -f d1.yaml
kubectl delete deploy 名字
</code></pre></div></div>

<h3 id="伸缩pod副本数">伸缩pod副本数</h3>

<h4 id="通过命令行修改">通过命令行修改</h4>

<p>kubectl scale deplyment 名称 –replicas=新的副本数量</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>5
deployment.apps/test1 scaled
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8fmxt   1/1   Running   0     4m28s   10.244.166.157   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-8lvwv   1/1   Running   0     3s      10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-hnq47   1/1   Running   0     4m28s   10.244.166.158   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     4m28s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     3s      10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="编辑deployment的方式">编辑deployment的方式</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit deployments test1
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8lvwv   1/1   Running   0     98s    10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     6m3s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     98s    10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h4 id="修改yaml">修改yaml</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl apply <span class="nt">-f</span> d1.yaml
deployment.apps/test1 configured
<span class="o">[</span>root@master deploy]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
test1-78747d7d6c-8lvwv   1/1   Running   0     2m3s    10.244.104.34    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-fdd4c   1/1   Running   0     3s      10.244.104.36    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-kqh9x   1/1   Running   0     6m28s   10.244.166.159   node1   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-wxk76   1/1   Running   0     3s      10.244.104.35    node2   &lt;none&gt;   &lt;none&gt;
test1-78747d7d6c-z7ww4   1/1   Running   0     2m3s    10.244.104.33    node2   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<h3 id="更新及回滚容器所使用的镜像">更新及回滚容器所使用的镜像</h3>

<p>水平自动更新HPA,可以根据CPU负载通知deployment,让其更新pod数目以减轻pod的负载</p>

<p>kubectl autoscale deployment 名字 –min=M –max=N –cpu-percent=X</p>

<p>最少运行M个Pod，确保CPU不超过X%, 否则就扩展pod的副本数量,最大扩展到N，cou默认是80</p>

<h4 id="查看当前是否有hpa配置">查看当前是否有HPA配置</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get hpa
No resources found <span class="k">in </span>nsdeploy namespace.
</code></pre></div></div>

<h4 id="创建hpa这是最多运行5个最少运行2个pod">创建hpa,这是最多运行5个,最少运行2个pod</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl autoscale deployment test1 <span class="nt">--min</span><span class="o">=</span>2 <span class="nt">--max</span><span class="o">=</span>5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get hpa
NAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE
test1   Deployment/test1   &lt;unknown&gt;/80%   2         5         0          11s
</code></pre></div></div>

<h4 id="把副本数量设置为1">把副本数量设置为1</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>1
deployment.apps/test1 scaled
</code></pre></div></div>

<p>最用运行数量为2个</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
test1-78747d7d6c-kqh9x   1/1     Running   0          13m
test1-78747d7d6c-vm2kf   1/1     Running   0          10s
</code></pre></div></div>

<h4 id="删除-hpa">删除 hpa</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>0
deployment.apps/test1 scaled
</code></pre></div></div>

<h4 id="创建hpacpu不可以超过80">创建HPA，cpu不可以超过80</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl edit deployment test1
deployment.apps/test1 edited
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">resources</span><span class="pi">:</span> 
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span>  <span class="s">400m</span>
</code></pre></div></div>

<h4 id="把deplyment的副本数量设置1">把deplyment的副本数量设置1</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl scale deployment test1 <span class="nt">--replicas</span><span class="o">=</span>1
deployment.apps/test1 scaled
</code></pre></div></div>

<h3 id="回滚和升级">回滚和升级</h3>

<h4 id="升级">升级</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployments <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES   SELECTOR
test1   2/2     2            2           31m   nginx        nginx    <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<p>三种方法</p>

<p>1、kubectl edit deploy</p>

<p>2、修改deployment的yaml文件</p>

<p>3、命令行修改</p>

<h4 id="命令行语法">命令行语法</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">set </span>image deploy 名字 容器名<span class="o">=</span>镜像 &lt; <span class="nt">--record</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>record可选</p>

<h4 id="把-test1的镜像更换为nginxlatest">把 test1的镜像更换为nginx:latest</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:latest
deployment.apps/test1 image updated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployment <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR
test1   2/2     2            2           35m   nginx        nginx:latest   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h4 id="换成179">换成1.7.9</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl get deployment <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES        SELECTOR
test1   2/2     2            2           35m   nginx        nginx:1.7.9   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h4 id="查看变化过程">查看变化过程</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl rollout <span class="nb">history </span>deployment test1
deployment.apps/test1 
REVISION  CHANGE-CAUSE
1         &lt;none&gt;
2         &lt;none&gt;
3         &lt;none&gt;
4         &lt;none&gt;
</code></pre></div></div>

<h4 id="切换增加record">切换增加record</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl rollout <span class="nb">history </span>deployment test1
deployment.apps/test1 
REVISION  CHANGE-CAUSE
1         &lt;none&gt;
2         &lt;none&gt;
3         &lt;none&gt;
5         kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.9 <span class="nt">--record</span><span class="o">=</span><span class="nb">true
</span>6         kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h3 id="回滚">回滚</h3>

<p>kubectl rollout undo deployment 名字</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl rollout undo deployment 名字 <span class="nt">--to-revision</span><span class="o">=</span>版本
</code></pre></div></div>

<p>版本指的是编号为5的变更记录</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl rollout undo deployment/test1 <span class="nt">--to-revision</span><span class="o">=</span>5
deployment.apps/test1 rolled back
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl get deployments. <span class="nt">-o</span> wide
NAME    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES      SELECTOR
test1   2/2     2            2           41m   nginx        nginx:1.9   <span class="nv">app</span><span class="o">=</span>test1
</code></pre></div></div>

<h3 id="滚动升级">滚动升级</h3>

<p>两个参数:</p>

<p>maxSurge:   用来指定最多一次创建几个pod,可以是百分比,也可以是具体数目</p>

<p>maxUnavailable: 用来指定最多删除几个pid,可以是数字或者百分比</p>

<h4 id="设置deployment">设置deployment</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl edit deployment test1
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">rollingUpdate</span><span class="pi">:</span>
      <span class="na">maxSurge</span><span class="pi">:</span> <span class="s">25%</span>
      <span class="na">maxUnavailable</span><span class="pi">:</span> <span class="s">25%</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">RollingUpdate</span>
</code></pre></div></div>

<p>修改为1</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
</code></pre></div></div>

<p>删一个，建一个</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master deploy]# kubectl <span class="nb">set </span>image deploy test1 <span class="nv">nginx</span><span class="o">=</span>nginx:1.7.9 <span class="nt">--record</span>
deployment.apps/test1 image updated
<span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS              RESTARTS   AGE
test1-5545c6d5df-c4bbz   0/1     ContainerCreating   0          1s
test1-5545c6d5df-mhs78   0/1     ContainerCreating   0          1s
test1-5f75995b7b-drr4f   0/1     Terminating         0          11m
test1-5f75995b7b-lt5xs   1/1     Running             0          11m
<span class="o">[</span>root@master deploy]# kubectl get pods
NAME                     READY   STATUS        RESTARTS   AGE
test1-5545c6d5df-c4bbz   1/1     Running       0          5s
test1-5545c6d5df-mhs78   1/1     Running       0          5s
test1-5f75995b7b-drr4f   0/1     Terminating   0          11m
test1-5f75995b7b-lt5xs   0/1     Terminating   0          11m
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[deployment]]></summary></entry><entry><title type="html">密码管理</title><link href="/kubernetes-kubeadm-password/" rel="alternate" type="text/html" title="密码管理" /><published>2022-09-27T00:00:00+08:00</published><updated>2022-09-27T00:00:00+08:00</updated><id>/kubernetes-kubeadm-password</id><content type="html" xml:base="/kubernetes-kubeadm-password/"><![CDATA[<p>密码管理的几种方式</p>

<h2 id="创建及删除secret">创建及删除secret</h2>

<p>避免mysql类型的容器变量保存在yaml里不安全,可以使用secret,保存方式为</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>键=值 或者是 key=value
</code></pre></div></div>

<h4 id="创建secret">创建secret</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# <span class="nb">mkdir </span>secret
<span class="o">[</span>root@master ~]# <span class="nb">cd </span>secret/
</code></pre></div></div>

<p>创建一个新的命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create ns nssec
namespace/nssec created
<span class="o">[</span>root@master secret]# kubens nssec
Context <span class="s2">"kubernetes-admin@kubernetes"</span> modified.
Active namespace is <span class="s2">"nssec"</span><span class="nb">.</span>
</code></pre></div></div>

<h4 id="命令行">命令行</h4>

<p>kubectl create secret generic 名字 –from-literal=k1=v1 –from-literal=k2=v2</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建一个名字为 mysecret1 的 secret</span>
<span class="o">[</span>root@master secret]# kubectl create secret generic mysecret1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">xx</span><span class="o">=</span>tom <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">yy</span><span class="o">=</span>redhat
secret/mysecret1 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-twgk8   kubernetes.io/service-account-token   3      2m56s
mysecret1             Opaque                                2      20s
</code></pre></div></div>

<p>secret有三种类型</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1、 Opaque: base64编码格式的secret，用来存储密码、密钥,数据可以通过base64解码
2、 kubernetes.io/dockerconfigjson: 用来存储私有docker registry的认证信息
3、 kubernetes.io/sevice-account-token: 用来被serviceaccount引用
</code></pre></div></div>

<p>创建serviceaccount时, kubernets会默认创建对应的secret.pod如果使用了serviceaccout,对应的secret会自动挂在到Pod目录/run/secrets/kubernets.io/serviceaccount</p>

<p>查看mysecret1的具体属性</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl describe secrets mysecret1
Name:         mysecret1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Type:  Opaque

Data
<span class="o">====</span>
xx:  3 bytes
yy:  6 bytes
</code></pre></div></div>

<p>这里可以看到两个变量,分别是xx和yy,但具体是什么这里看不出来</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl describe secrets mysecret1
Name:         mysecret1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Type:  Opaque

Data
<span class="o">====</span>
xx:  3 bytes
yy:  6 bytes
<span class="o">[</span>root@master secret]# kubectl get secret mysecret1 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  xx: dG9t
  yy: cmVkaGF0
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:38:45Z"</span>
  name: mysecret1
  namespace: nssec
  resourceVersion: <span class="s2">"98855"</span>
  uid: 388779de-d3aa-4a9e-bfbf-7f7d63b1af9a
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>上面data字段里就是mysecret1的键值对,需要base64解码才可以看到具体值</p>

<p>解码</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="s2">"dG9t"</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
tom[root@master secret]#  <span class="nb">echo</span> <span class="s2">"cmVkaGF0"</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
redhat[root@master secret]# 
</code></pre></div></div>

<h4 id="把文件创建为secret">把文件创建为secret</h4>

<p>文件名作为key，内容作为value.</p>

<p>kubectl create secret generic mysecret2 –from-file=file1 –from-file=file2</p>

<p>作用是把一个文件的内容写入secret里,通过卷的方式来引用这个secret,就可以把此文件写入pod里了</p>

<p>查看hosts</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">cat</span> /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>创建secret</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts
secret/mysecret2 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:49:12Z"</span>
  name: mysecret2
  namespace: nssec
  resourceVersion: <span class="s2">"99732"</span>
  uid: 1e095123-849f-4cde-b092-ac574252075c
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>hosts代表文件，下面是内容</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.data.hosts}'</span>
<span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
</code></pre></div></div>

<p>解码</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.data.hosts}'</span> | <span class="nb">base64</span> <span class="nt">-d</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>创建一个包含两个文件的secret mysecret3</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret3 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
secret/mysecret3 created
</code></pre></div></div>

<p>获取mysecret3的键值对</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets mysecret3 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="nv">MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjEyMi4yMDAgbWFzdGVyCjE5Mi4xNjguMTIyLjIwMiBub2RlMSAKMTkyLjE2OC4xMjIuMjAzIG5vZGUyIAo</span><span class="o">=</span>
  issue: <span class="nv">XFMKS2VybmVsIFxyIG9uIGFuIFxtCgo</span><span class="o">=</span>
kind: Secret
metadata:
  creationTimestamp: <span class="s2">"2022-07-19T15:51:57Z"</span>
  name: mysecret3
  namespace: nssec
  resourceVersion: <span class="s2">"99966"</span>
  uid: f68c6996-7f6a-476f-b81c-85770498cda2
<span class="nb">type</span>: Opaque
</code></pre></div></div>

<p>这种方法一般用于给pod传递文件</p>

<h4 id="变量文件的方法">变量文件的方法</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>变量 1 = 值 1
变量 2 = 值 2
</code></pre></div></div>

<p>创建变量文件env.txt</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">cat </span>env.txt 
<span class="nv">xx</span><span class="o">=</span>tom
<span class="nv">yy</span><span class="o">=</span>redhat
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl create secret generic mysecret4 <span class="nt">--from-env-file</span><span class="o">=</span>env.txt
secret/mysecret4 created
</code></pre></div></div>

<h4 id="通过yaml文件的方式">通过yaml文件的方式</h4>

<p>先求出base64的值</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"tom"</span> | <span class="nb">base64
</span>dG9t
<span class="o">[</span>root@master secret]# <span class="nb">echo</span> <span class="nt">-n</span> <span class="s2">"redhat"</span> | <span class="nb">base64
</span>cmVkaGF0
</code></pre></div></div>

<p>创建yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">mysecret5</span>
<span class="na">type</span><span class="pi">:</span>  <span class="s">Opaque</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">xx</span><span class="pi">:</span>  <span class="s">dG9t</span>
  <span class="na">redhat</span><span class="pi">:</span>  <span class="s">cmVkaGF0</span>
</code></pre></div></div>

<p>创建secret</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> secret5.yaml 
secret/mysecret5 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-twgk8   kubernetes.io/service-account-token   3      24m
mysecret1             Opaque                                2      21m
mysecret2             Opaque                                1      11m
mysecret3             Opaque                                2      8m19s
mysecret4             Opaque                                2      3m26s
mysecret5             Opaque                                2      20s
</code></pre></div></div>

<h4 id="删除secret">删除secret</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl delete secrets mysecret5
secret <span class="s2">"mysecret5"</span> deleted
</code></pre></div></div>

<h3 id="在pod里以变量和卷的方式引用secret">在pod里以变量和卷的方式引用secret</h3>

<h4 id="以卷的方式">以卷的方式</h4>

<p>在pod的yaml文件里,创建一个类型为secret的卷，然后挂在到容器里某个制定的目录里。容器创建好后,会在容器的挂在目录里创建一个文件，此文件的文件名为secret里的key.文件内容对应key的value.以卷的方式引用secret的主要作用是往pod里传递文件</p>

<p>创建pod的yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod1</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">secret</span><span class="pi">:</span>
      <span class="na">secretName</span><span class="pi">:</span>  <span class="s">mysecret2</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/etc/test"</span>
<span class="na">status</span><span class="pi">:</span>  <span class="pi">{}</span>
</code></pre></div></div>

<p>在pod1里吧xx这个卷挂在到/etc/test/目录里.容器里会有hosts文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod1.yaml 
pod/pod1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">cat</span> /etc/test/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>删除pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete <span class="nt">-f</span> pod1.yaml
</code></pre></div></div>

<p>修改pod1.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod1</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">secret</span><span class="pi">:</span>
      <span class="na">secretName</span><span class="pi">:</span>  <span class="s">mysecret3</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod1</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/etc/test/issue"</span>
      <span class="na">subPath</span><span class="pi">:</span>  <span class="s">issue</span>
<span class="na">status</span><span class="pi">:</span>  <span class="pi">{}</span>
</code></pre></div></div>

<p>mysecret3里有两个文件，如果只想使用一个,可以使用subPath来解决</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod1.yaml 
pod/pod1 created
<span class="o">[</span>root@master secret]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">ls</span> /etc/test/
issue
</code></pre></div></div>

<p>如果修改服务的配置文件,比如nginx的配置文件,可以不需要重新编译镜像</p>

<h4 id="以变量的方式">以变量的方式</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">env</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">变量名</span>
  <span class="na">value</span><span class="pi">:</span>  <span class="s">值</span>
</code></pre></div></div>

<p>如果是从secret引用值,这里写valueFrom</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">env</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">变量名</span>
  <span class="na">valueFrom</span><span class="pi">:</span>
    <span class="na">secretKeyRef</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span>  <span class="s">secretX</span>
      <span class="na">key</span><span class="pi">:</span>  <span class="s">keyX</span>
</code></pre></div></div>

<p>变量的值会使用secretX里的keyX这个键对应的值</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">mysql</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod2</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">MYSQL_ROOT_PASSWORD</span>
      <span class="na">valueFrom</span><span class="pi">:</span> 
        <span class="na">secretKeyRef</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span>  <span class="s">mysecret1</span>
          <span class="na">key</span><span class="pi">:</span>  <span class="s">yy</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl apply <span class="nt">-f</span> pod2.yaml
pod/pod2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master secret]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
pod1   1/1     Running   0          11m   10.244.104.22   node2   &lt;none&gt;           &lt;none&gt;
pod2   1/1     Running   0          16s   10.244.104.23   node2   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h3 id="创建及删除configmap">创建及删除configmap</h3>

<p>主要作用:</p>

<ul>
  <li>存储密码</li>
  <li>往pod里传递文件</li>
  <li>格式: 键=值</li>
</ul>

<p>和secret的区别:</p>

<ul>
  <li>不使用base64编码</li>
</ul>

<p>查看命令</p>

<p>kubectl get configmaps</p>

<p>创建方法</p>

<ul>
  <li>直接指定key和value</li>
  <li>把一个文件内容作为value</li>
  <li>直接写yaml</li>
</ul>

<h4 id="命令行的方式">命令行的方式</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create cm 名字 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">key</span><span class="o">=</span>v1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">k2</span><span class="o">=</span>v2 ...
</code></pre></div></div>

<p>创建一个my1的configmap</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my1 <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">xx</span><span class="o">=</span>tom <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">yy</span><span class="o">=</span>redhat
configmap/my1 created
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get configmaps
NAME               DATA   AGE
kube-root-ca.crt   1      47h
my1                2      26s
<span class="o">[</span>root@master ~]# kubectl describe configmaps my1
Name:         my1
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
xx:
<span class="nt">----</span>
tom
yy:
<span class="nt">----</span>
redhat
Events:  &lt;none&gt;
</code></pre></div></div>

<h4 id="文件方式">文件方式</h4>

<p>kubectl create configmap my2 –from-file=file1</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
configmap/my2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl create configmap my2 <span class="nt">--from-file</span><span class="o">=</span>/etc/hosts <span class="nt">--from-file</span><span class="o">=</span>/etc/issue
configmap/my2 created
<span class="o">[</span>root@master ~]# 
<span class="o">[</span>root@master ~]# kubectl get cm
NAME               DATA   AGE
kube-root-ca.crt   1      47h
my1                2      2m37s
my2                2      16s
<span class="o">[</span>root@master ~]# kubectl describe cm my2
Name:         my2
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
hosts:
<span class="nt">----</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 

issue:
<span class="nt">----</span>
<span class="se">\S</span>
Kernel <span class="se">\r</span> on an <span class="se">\m</span>


Events:  &lt;none&gt;
</code></pre></div></div>

<p>或者</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl describe cm my2
Name:         my2
Namespace:    nssec
Labels:       &lt;none&gt;
Annotations:  &lt;none&gt;

Data
<span class="o">====</span>
hosts:
<span class="nt">----</span>
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 

issue:
<span class="nt">----</span>
<span class="se">\S</span>
Kernel <span class="se">\r</span> on an <span class="se">\m</span>


Events:  &lt;none&gt;
<span class="o">[</span>root@master ~]# kubectl get cm my2 <span class="nt">-o</span> yaml
apiVersion: v1
data:
  hosts: <span class="s2">"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><span class="se">\n</span><span class="s2">::1
    </span><span class="se">\ </span><span class="s2">       localhost localhost.localdomain localhost6 localhost6.localdomain6</span><span class="se">\n</span><span class="s2">192.168.122.200
    master</span><span class="se">\n</span><span class="s2">192.168.122.202 node1 </span><span class="se">\n</span><span class="s2">192.168.122.203 node2 </span><span class="se">\n</span><span class="s2">"</span>
  issue: |+
    <span class="se">\S</span>
    Kernel <span class="se">\r</span> on an <span class="se">\m</span>

kind: ConfigMap
metadata:
  creationTimestamp: <span class="s2">"2022-07-21T15:06:23Z"</span>
  name: my2
  namespace: nssec
  resourceVersion: <span class="s2">"106264"</span>
  uid: 68f8f1b3-f44e-4303-91c9-628e55904fb9
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get cm my2 <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'.{.data.hosts}'</span>
.127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<h4 id="使用configmap">使用configmap</h4>

<p>以卷的方式</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span> 
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod3</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod3</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
    <span class="na">configMap</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span>  <span class="s">my2</span>   <span class="c1"># 关联my2的 configmap</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod3</span>
    <span class="na">resources</span><span class="pi">:</span>  <span class="pi">{}</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">xx</span>
      <span class="na">mountPath</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">/etc/test"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl apply <span class="nt">-f</span> pod.yaml 
pod/pod3 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">ls</span> /etc/test
hosts
issue
</code></pre></div></div>

<p>查看文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">ls</span> /etc/test
hosts
issue
<span class="o">[</span>root@master tmp]# kubectl <span class="nb">exec </span>pod3 <span class="nt">--</span> <span class="nb">cat</span> /etc/test/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.122.200 master
192.168.122.202 node1 
192.168.122.203 node2 
</code></pre></div></div>

<p>如果只想挂载一个文件则使用subPath</p>

<h4 id="以变量的方式-1">以变量的方式</h4>

<p>创建pod的yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span>  <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span>  <span class="s">pod4</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">pod4</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>  <span class="s">hub.c.163.com/library/mysql:latest</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span>  <span class="s">pod4</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">MYSQL_ROOT_PASSWORD</span>
      <span class="na">valueFrom</span><span class="pi">:</span>
        <span class="na">configMapKeyRef</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span>  <span class="s">my1</span>
          <span class="na">key</span><span class="pi">:</span>  <span class="s">yy</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl apply <span class="nt">-f</span> pod4.yaml 
pod/pod4 created
</code></pre></div></div>

<p>获取IP</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
pod1   1/1     Running   1          46h   10.244.104.25    node2   &lt;none&gt;           &lt;none&gt;
pod2   1/1     Running   1          46h   10.244.104.24    node2   &lt;none&gt;           &lt;none&gt;
pod3   1/1     Running   0          11m   10.244.166.152   node1   &lt;none&gt;           &lt;none&gt;
pod4   1/1     Running   0          23s   10.244.166.153   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>检查</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# mysql <span class="nt">-uroot</span> <span class="nt">-h10</span>.244.166.153 <span class="nt">-predhat</span>
Welcome to the MariaDB monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span><span class="nb">.</span>
Your MySQL connection <span class="nb">id </span>is 4
Server version: 5.7.18 MySQL Community Server <span class="o">(</span>GPL<span class="o">)</span>

Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type <span class="s1">'help;'</span> or <span class="s1">'\h'</span> <span class="k">for </span>help. Type <span class="s1">'\c'</span> to clear the current input statement.

MySQL <span class="o">[(</span>none<span class="o">)]&gt;</span> 
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[密码管理的几种方式]]></summary></entry><entry><title type="html">docker 部署redis sentinel</title><link href="/docker-03/" rel="alternate" type="text/html" title="docker 部署redis sentinel" /><published>2022-09-19T00:00:00+08:00</published><updated>2022-09-19T00:00:00+08:00</updated><id>/docker-03</id><content type="html" xml:base="/docker-03/"><![CDATA[<p>Redis Docker Sentinel</p>

<h4 id="docker-安装">Docker 安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash &lt;<span class="o">(</span>wget <span class="nt">-O-</span> get.docker.com<span class="o">)</span>
</code></pre></div></div>

<h4 id="docker-compose-安装">Docker Compose 安装</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#https://docs.docker.com/compose/install/linux/</span>
curl <span class="nt">-SL</span> https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-linux-x86_64 <span class="nt">-o</span> /usr/local/bin/docker-compose

<span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose
docker-compose <span class="nt">--version</span>
</code></pre></div></div>

<h4 id="修改内核参数">修改内核参数</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> /etc/sysctl.d/docker-compose.conf <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> 
net.core.somaxconn = 1024
net.ipv4.tcp_syncookies = 0 
vm.overcommit_memory = 1
</span><span class="no">EOF 

</span>sysctl <span class="nt">--system</span> 
</code></pre></div></div>

<h4 id="关闭防火墙">关闭防火墙</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl stop firewalld
systemctl disable firewalld
</code></pre></div></div>

<h4 id="目录结构">目录结构</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /data/redis
tree

├── sentinel
│   ├── docker-compose.yaml
│   ├── redis-sentinel-1.conf
│   ├── redis-sentinel-2.conf
│   └── redis-sentinel-3.conf
└── server
    ├── data
    │   ├── redis-master
    │   │   └── dump.rdb
    │   ├── redis-slave-1
    │   │   └── dump.rdb
    │   └── redis-slave-2
    │       └── dump.rdb
    ├── docker-compose.yaml
    ├── redis-master.conf
    ├── redis-slave1.conf
    └── redis-slave2.conf
</code></pre></div></div>

<h4 id="sentinel配置">sentinel配置</h4>

<h5 id="redis-sentinel-1conf">redis-sentinel-1.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>

port 26379

requirepass 123456

sentinel monitor mymaster 192.168.122.203 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h5 id="redis-sentinel-2conf">redis-sentinel-2.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>
port 26380

requirepass 123456

sentinel monitor mymaster 192.168.122.203 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h5 id="redis-sentinel-3conf">redis-sentinel-3.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#bind 0.0.0.0</span>

port 26381

requirepass 123456

sentinel monitor mymaster 127.0.0.1 6379 1

sentinel auth-pass mymaster 123456

sentinel down-after-milliseconds mymaster 30000
</code></pre></div></div>

<h4 id="server配置">server配置</h4>

<h5 id="redis-masterconf">redis-master.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6379

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>
</code></pre></div></div>

<h5 id="redis-slave1conf">redis-slave1.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6380

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>

slaveof 192.168.122.203 6379

masterauth <span class="s2">"123456"</span>
</code></pre></div></div>

<h5 id="redis-slave2conf">redis-slave2.conf</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bind </span>192.168.122.203

port 6381

always-show-logo no

requirepass 123456

rename-command KEYS <span class="s2">""</span>

slaveof 192.168.122.203 6379

masterauth <span class="s2">"123456"</span>
</code></pre></div></div>

<h4 id="docker-compose配置">Docker Compose配置</h4>

<h5 id="sentinel">sentinel</h5>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>

<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">redis-sentinel-1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-1.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
  <span class="na">redis-sentinel-2</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-2.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
  <span class="na">redis-sentinel-3</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-sentinel-3</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-sentinel-3.conf:/usr/local/etc/redis/redis-sentinel.conf</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-sentinel"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis-sentinel.conf"</span><span class="pi">]</span>
</code></pre></div></div>

<h5 id="server">server</h5>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>

<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">redis-server-master</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-master</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-master.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-master:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
  <span class="na">redis-server-slave-1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-slave-1</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">redis-server-master</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-slave1.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-slave-1:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
  <span class="na">redis-server-slave-2</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.0.16</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis-server-slave-2</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">network_mode</span><span class="pi">:</span> <span class="s">host</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">redis-server-master</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">TZ</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Asia/Shanghai"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./redis-slave2.conf:/usr/local/etc/redis/redis.conf</span>
      <span class="pi">-</span> <span class="s">./data/redis-slave-2:/data</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">redis-server"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">/usr/local/etc/redis/redis.conf"</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="运行">运行</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /data/redis/server/
docker-compose up <span class="nt">-d</span>
<span class="nb">cd</span> /data/redis/sentinel
docker-compose up <span class="nt">-d</span>
</code></pre></div></div>

<h4 id="测试脚本">测试脚本</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">redis</span>

<span class="kn">from</span> <span class="nn">redis.sentinel</span> <span class="kn">import</span> <span class="n">Sentinel</span>

<span class="n">sentinel</span> <span class="o">=</span> <span class="n">Sentinel</span><span class="p">([(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26379</span><span class="p">),(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26380</span><span class="p">),(</span><span class="s">'192.168.122.203'</span><span class="p">,</span> <span class="mi">26381</span><span class="p">)],</span> <span class="n">socket_timeout</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span><span class="n">sentinel_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">'password'</span><span class="p">:</span> <span class="s">'123456'</span><span class="p">})</span>
<span class="k">print</span> <span class="p">(</span><span class="n">sentinel</span><span class="p">.</span><span class="n">discover_master</span><span class="p">(</span><span class="s">'local-master'</span><span class="p">))</span>
<span class="k">print</span> <span class="p">(</span><span class="n">sentinel</span><span class="p">.</span><span class="n">discover_slaves</span><span class="p">(</span><span class="s">'local-master'</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="redis-cli">redis-cli</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nt">-h</span> 192.168.122.203 <span class="nt">-p</span> 6379
192.168.122.203:6379&gt; AUTH 123456
OK
192.168.122.203:6379&gt; ping
PONG
192.168.122.203:6379&gt;
</code></pre></div></div>

<h4 id="info">Info</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Replication</span>
role:master
connected_slaves:2
slave0:ip<span class="o">=</span>192.168.122.203,port<span class="o">=</span>6381,state<span class="o">=</span>online,offset<span class="o">=</span>101925,lag<span class="o">=</span>1
slave1:ip<span class="o">=</span>192.168.122.203,port<span class="o">=</span>6380,state<span class="o">=</span>online,offset<span class="o">=</span>101925,lag<span class="o">=</span>1
master_replid:efc50a97c93df3faa5764eb66f046bc211067d3b
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:102075
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:102075
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[Redis Docker Sentinel]]></summary></entry><entry><title type="html">docker 部署 mysql</title><link href="/docker-04/" rel="alternate" type="text/html" title="docker 部署 mysql" /><published>2022-09-19T00:00:00+08:00</published><updated>2022-09-19T00:00:00+08:00</updated><id>/docker-04</id><content type="html" xml:base="/docker-04/"><![CDATA[<p>Mysql Docker</p>

<h4 id="dockerfile">Dockerfile</h4>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> mysql:8.0.20</span>

<span class="k">ADD</span><span class="s"> devops.sql /docker-entrypoint-initdb.d</span>
</code></pre></div></div>

<h4 id="build">Build</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> osp/mysql-init <span class="nb">.</span> 
</code></pre></div></div>

<h4 id="docker-login">Docker Login</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker login
<span class="c">#账户</span>
<span class="c">#密码</span>
</code></pre></div></div>

<h4 id="docker-push">Docker Push</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker tag osp/mysql-init registry.eeo-inc.com/omdev/osp-mysql-init:v01
docker push registry.eeo-inc.com/omdev/osp-mysql-init:v01
</code></pre></div></div>

<h4 id="docker-pull">Docker Pull</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull registry.eeo-inc.com/omdev/osp-mysql-init:v01
</code></pre></div></div>

<h4 id="docker-run">Docker Run</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run  <span class="se">\</span>
    <span class="nt">--name</span> osp-dev-8.0.20  <span class="se">\</span>
    <span class="nt">-t</span> <span class="nt">--net</span> host  <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">MYSQL_DATABASE</span><span class="o">=</span>osp  <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">MYSQL_USER</span><span class="o">=</span>osp-test  <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">MYSQL_PASSWORD</span><span class="o">=</span><span class="nb">test</span> <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">MYSQL_TCP_PORT</span><span class="o">=</span>61106 <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>zabbix <span class="se">\</span>
    <span class="nt">-v</span> /var/lib/mysql:/var/lib/mysql <span class="se">\</span>
    <span class="nt">-d</span> registry.eeo-inc.com/omdev/osp-mysql-init:v01     <span class="se">\</span>
    <span class="nt">--character-set-server</span><span class="o">=</span>utf8     <span class="se">\</span>
    <span class="nt">--collation-server</span><span class="o">=</span>utf8_bin  <span class="se">\</span>
    <span class="nt">--default-authentication-plugin</span><span class="o">=</span>mysql_native_password
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Docker" /><summary type="html"><![CDATA[Mysql Docker]]></summary></entry><entry><title type="html">Pod 管理</title><link href="/kubernetes-kubeadm-pod/" rel="alternate" type="text/html" title="Pod 管理" /><published>2022-09-08T00:00:00+08:00</published><updated>2022-09-08T00:00:00+08:00</updated><id>/kubernetes-kubeadm-pod</id><content type="html" xml:base="/kubernetes-kubeadm-pod/"><![CDATA[<h3 id="创建和删除pod">创建和删除pod</h3>

<p>pod是k8s里最小调度单元</p>

<h4 id="下载镜像">下载镜像</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull hub.c.163.com/library/centos:7
docker pull nginx
docker pull nginx:1.7.9
docker pull nginx:1.9
docker pull busybox
docker pull alpine
docker pull perl
</code></pre></div></div>

<h4 id="查看">查看</h4>

<p>默认命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods
No resources found <span class="k">in </span>default namespace.
</code></pre></div></div>

<p>指定命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods <span class="nt">-n</span> kube-system
NAME                                       READY   STATUS    RESTARTS   AGE
calico-kube-controllers-7cc8dd57d9-dhv5r   1/1     Running   0          161m
calico-node-54njj                          1/1     Running   2          4h43m
calico-node-559jn                          1/1     Running   1          4h43m
calico-node-w6rwp                          1/1     Running   1          4h27m
coredns-545d6fc579-j9f7q                   1/1     Running   1          5h
coredns-545d6fc579-t7st8                   1/1     Running   1          5h
etcd-master                                1/1     Running   1          5h
kube-apiserver-master                      1/1     Running   1          5h
kube-controller-manager-master             1/1     Running   1          5h
kube-proxy-j28gq                           1/1     Running   1          5h
kube-proxy-jgsxd                           1/1     Running   2          4h54m
kube-proxy-qrf8c                           1/1     Running   1          4h27m
kube-scheduler-master                      1/1     Running   1          5h
metrics-server-6b7f4dfdcb-tjfcj            1/1     Running   0          159m
</code></pre></div></div>

<p>所有命名空间</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods <span class="nt">-A</span>
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-7cc8dd57d9-dhv5r   1/1     Running   0          161m
kube-system   calico-node-54njj                          1/1     Running   2          4h44m
kube-system   calico-node-559jn                          1/1     Running   1          4h44m
kube-system   calico-node-w6rwp                          1/1     Running   1          4h28m
kube-system   coredns-545d6fc579-j9f7q                   1/1     Running   1          5h
kube-system   coredns-545d6fc579-t7st8                   1/1     Running   1          5h
kube-system   etcd-master                                1/1     Running   1          5h1m
kube-system   kube-apiserver-master                      1/1     Running   1          5h1m
kube-system   kube-controller-manager-master             1/1     Running   1          5h1m
kube-system   kube-proxy-j28gq                           1/1     Running   1          5h
kube-system   kube-proxy-jgsxd                           1/1     Running   2          4h54m
kube-system   kube-proxy-qrf8c                           1/1     Running   1          4h28m
kube-system   kube-scheduler-master                      1/1     Running   1          5h1m
kube-system   metrics-server-6b7f4dfdcb-tjfcj            1/1     Running   0          160m
</code></pre></div></div>

<h4 id="创建">创建</h4>

<p>kubectl run 名字 –image=镜像</p>

<p>指定pod的标签</p>

<p>kubectl run 名字 –image=镜像 –labels=标签=值   多个标签使用多个–labels</p>

<p>指定变量</p>

<p>kubectl run 名字 –image=镜像 –env=”变量名=值”  多个变量使用多个–env</p>

<p>指定端口</p>

<p>kubectl run 名字 –image=镜像 –port=端口号</p>

<p>指定下载策略</p>

<p>kubectl run 名字 –image=镜像 –image-pull-policy=镜像现在策略</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run pod1 <span class="nt">--image</span><span class="o">=</span>nginx
</code></pre></div></div>

<p>默认镜像下载策略为Always,即使本地有镜像也会去下载,建议加上 –image-pull-policy=IfNotPresent</p>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
pod1   1/1     Running   0          74s
</code></pre></div></div>

<p>查看运行的节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE    IP             NODE    NOMINATED NODE   READINESS GATES
pod1   1/1     Running   0          114s   10.244.104.3   node2   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h4 id="删除">删除</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete pod pod1 <span class="nt">--force</span>
</code></pre></div></div>

<p>–force 加快删除速度</p>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master tmp]# kubectl get pods
No resources found <span class="k">in </span>default namespace.
</code></pre></div></div>

<h4 id="生成yaml文件创建pod">生成yaml文件创建pod</h4>

<p>kubectl run 名字 –image=镜像 –dry-run=client -o yaml &gt; pod.yaml</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>pod<span class="p">;</span><span class="nb">cd </span>pod
kubectl run pod1 <span class="nt">--image</span><span class="o">=</span>nginx <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml <span class="o">&gt;</span> pod.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">pod1</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>  <span class="c1"># 新增</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">pod1</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>解释</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1    　　　　　　# 必选，版本号</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod         　　　　　　# 必选，Pod</span>
<span class="na">metadata</span><span class="pi">:</span>         <span class="s">　　　　　　# 必选，元数据</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">String    　　　　　　# 必选，Pod名称</span>
  <span class="s">namespace</span><span class="err">:</span> <span class="s">String    　　　</span> <span class="c1"># 必选，Pod所属的命名空间</span>
  <span class="na">labels</span><span class="pi">:</span>            <span class="s">　　　　</span> <span class="c1"># 自定义标签，Map格式</span>
    <span class="na">Key</span><span class="pi">:</span> <span class="s">Value    　　　　　　# 键值对</span>
  <span class="na">annotations</span><span class="pi">:</span>    <span class="s">　　　　　　# 自定义注解</span>
    <span class="s">Key</span><span class="err">:</span> <span class="s">Value    　　　　　</span>  <span class="c1"># 键值对</span>
<span class="na">spec</span><span class="pi">:</span>            <span class="s">　　　　　　</span> <span class="c1"># 必选，Pod中容器的详细属性</span>
  <span class="na">containers</span><span class="pi">:</span>        <span class="s">　　　　</span> <span class="c1"># 必选，Pod中容器列表</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String   　　　　</span>   <span class="c1"># 必选，容器名称</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">String    　　　　</span> <span class="c1"># 必选，容器的镜像地址和名称</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">Always | Never | IfNotPresent</span><span class="pi">}</span>   
<span class="err"> </span><span class="s">　　　　</span>                     <span class="c1"># 获取镜像的策略，Always表示下载镜像，IfnotPresent 表示优先使用本地镜像，否则下载镜像，Never表示仅使用本地镜像。</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">String</span><span class="pi">]</span>         <span class="c1"># 容器的启动命令列表(覆盖)，如不指定，使用打包镜像时的启动命令。</span>
    <span class="na">args</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">String</span><span class="pi">]</span>            <span class="c1"># 容器的启动命令参数列表</span>
    <span class="na">workingDir</span><span class="pi">:</span> <span class="s">String</span>        <span class="c1"># 容器的工作目录</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>             <span class="c1"># 挂载到容器内部的存储卷配置</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>            <span class="c1"># 引用Pod定义的共享存储卷的名，需用Pod.spec.volumes[]部分定义的卷名</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s">String</span>       <span class="c1"># 存储卷在容器内Mount的绝对路径，应少于512字符</span>
      <span class="na">readOnly</span><span class="pi">:</span> <span class="s">boolean</span>       <span class="c1"># 是否为只读模式</span>
<span class="err">  </span><span class="na">ports</span><span class="pi">:</span>                      <span class="c1"># 容器需要暴露的端口库号列表</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>              <span class="c1"># 端口号名称</span>
    <span class="na">containerPort</span><span class="pi">:</span> <span class="s">Int</span>        <span class="c1"># 容器需要监听的端口号</span>
    <span class="na">hostPort</span><span class="pi">:</span> <span class="s">Int</span>             <span class="c1"># 可选，容器所在主机需要监听的端口号，默认与Container相同</span>
  <span class="na">env</span><span class="pi">:</span>                        <span class="c1"># 容器运行前需设置的环境变量列表</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>              <span class="c1"># 环境变量名称</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s">String</span>             <span class="c1"># 环境变量的值</span>
  <span class="na">resources</span><span class="pi">:</span>                  <span class="c1"># 资源限制和请求的设置</span>
    <span class="na">limits</span><span class="pi">:</span>                   <span class="c1"># 资源限制的设置</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="s">String</span>             <span class="c1"># Cpu的限制，单位为Core数，将用于docker run --cpu-shares参数，如果整数后跟m，表示占用权重，1Core=1000m</span>
      <span class="na">memory</span><span class="pi">:</span> <span class="s">String</span>          <span class="c1"># 内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>
    <span class="na">requests</span><span class="pi">:</span>                 <span class="c1"># 资源请求的设置</span>
      <span class="na">cpu</span><span class="pi">:</span> <span class="s">string</span>             <span class="c1"># CPU请求，容器启动的初始可用数量</span>
      <span class="na">memory</span><span class="pi">:</span> <span class="s">string</span>          <span class="c1"># 内存请求，容器启动的初始可用数量</span>
  <span class="na">livenessProbe</span><span class="pi">:</span>   
<span class="err"> </span><span class="s">　　　　</span>           <span class="c1"># 对Pod内容器健康检查设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可。</span>
    <span class="na">exec</span><span class="pi">:</span>                     <span class="c1"># 对Pod容器内检查方式设置为exec方式</span>
      <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">String</span><span class="pi">]</span>       <span class="c1"># exec方式需要制定的命令或脚本</span>
    <span class="na">httpGet</span><span class="pi">:</span>                  <span class="c1"># 对Pod容器内检查方式设置为HttpGet方式，需要指定path、port</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">String</span>            <span class="c1"># 网址URL路径（去除对应的域名或IP地址的部分）</span>
      <span class="na">port</span><span class="pi">:</span> <span class="s">Int</span>               <span class="c1"># 对应端口</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">String</span>            <span class="c1"># 域名或IP地址</span>
      <span class="na">schema</span><span class="pi">:</span> <span class="s">String</span>          <span class="c1"># 对应的检测协议，如http</span>
      <span class="na">HttpHeaders</span><span class="pi">:</span>            <span class="c1"># 指定报文头部信息</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>
        <span class="na">value</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">tcpSocket</span><span class="pi">:</span>                <span class="c1"># 对Pod容器内检查方式设置为tcpSocket方式</span>
      <span class="na">port</span><span class="pi">:</span> <span class="s">Int</span>
    <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="s">Int</span>  <span class="c1"># 容器启动完成后首次探测的时间，单位为秒</span>
    <span class="na">timeoutSeconds</span><span class="pi">:</span> <span class="s">Int</span>       <span class="c1"># 对容器健康检查探测等待响应的超时时间，单位为秒，默认为1秒</span>
    <span class="na">periodSeconds</span><span class="pi">:</span> <span class="s">Int</span>        <span class="c1"># 对容器监控检查的定期探测时间设置，单位为秒，默认10秒一次</span>
    <span class="na">successThreshold</span><span class="pi">:</span> <span class="s">Int</span>     <span class="c1"># 探测几次成功后认为成功</span>
    <span class="na">failureThreshold</span><span class="pi">:</span> <span class="s">Int</span>     <span class="c1"># 探测几次失败后认为失败</span>
    <span class="na">securityContext</span><span class="pi">:</span>
      <span class="na">privileged</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">Always | Never | OnFailure</span><span class="pi">}</span> 
<span class="err"> </span><span class="s">　　　　</span>           <span class="c1"># Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码才重启，Nerver表示不再重启该Pod</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>              <span class="c1"># 设置NodeSelector表示将该Pod调度到包含这个label的node上，以Key:Value的格式指定</span>
    <span class="na">Key</span><span class="pi">:</span> <span class="s">Value</span>               <span class="c1"># 调度到指定的标签Node上</span>
  <span class="na">imagePullSecrets</span><span class="pi">:</span>          <span class="c1"># Pull镜像时使用的secret名称，以Key:SecretKey格式指定</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>
  <span class="na">hostNetwork</span><span class="pi">:</span> <span class="no">false</span>         <span class="c1"># 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>
  <span class="na">volumes</span><span class="pi">:</span>                   <span class="c1"># 在该Pod上定义共享存储卷列表</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>             <span class="c1"># 共享存储卷名称（Volumes类型有多种）</span>
    <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{</span> <span class="pi">}</span>            <span class="c1"># 类型为emptyDir的存储卷，与Pod同生命周期的一个临时目录，为空值</span>
    <span class="na">hostPath</span><span class="pi">:</span> <span class="s">String</span>         <span class="c1"># 类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">String</span>             <span class="c1"># Pod所在宿主机的目录，将被用于同期中Mount的目录</span>
  <span class="na">secret</span><span class="pi">:</span>                    <span class="c1"># 类型为Secret的存储卷，挂载集群与定义的Secret对象到容器内部</span>
    <span class="na">secretname</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">items</span><span class="pi">:</span>                   <span class="c1"># 当仅需挂载一个Secret对象中的指定Key时使用</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">String</span>
     <span class="na">path</span><span class="pi">:</span> <span class="s">String</span>
  <span class="na">configMap</span><span class="pi">:</span>                 <span class="c1"># 类型为ConfigMap的存储卷，挂载预定义的ConfigMap对象到容器内部</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">items</span><span class="pi">:</span>                   <span class="c1"># 当仅需挂载一个ConfigMap对象中的指定Key时使用</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">String</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">String</span>
</code></pre></div></div>

<p>参考: https://www.cnblogs.com/kevingrace/p/11309409.html</p>

<h4 id="使用yaml文件创建">使用yaml文件创建</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> pod.yaml
pod/pod1 created
</code></pre></div></div>

<p>验证</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
pod1   1/1     Running   0          24s
</code></pre></div></div>

<h4 id="创建pod时指定pod运行其它进程">创建pod时指定pod运行其它进程</h4>

<p>kubectl run 名字 –image=镜像 –dry-run=client -o yaml – “命令” &gt;pod.yaml</p>

<p>kubectl run 名字 –image=镜像 –dry-run=client -o yaml – sh -c “命令” &gt;pod.yaml</p>

<p>–两边要有空格</p>

<p>–dry-run=client -o yaml 下载–前面，命令卸载– 后面</p>

<p>pod中执行echo aa,休眠1000秒</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run pod2 <span class="nt">--image</span><span class="o">=</span>nginx <span class="nt">--image-pull-policy</span><span class="o">=</span>IfNotPresent <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml <span class="nt">--</span> sh <span class="nt">-c</span> <span class="s2">"echo aa; sleep 1000"</span><span class="o">&gt;</span> pod2.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">args</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">sh</span>
    <span class="pi">-</span> <span class="s">-c</span>
    <span class="pi">-</span> <span class="s">echo aa; sleep </span><span class="m">1000</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">pod2</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>创建</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> pod2.yaml
pod/pod2 created
</code></pre></div></div>

<p>删除</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete <span class="nt">-f</span> pod2.yaml
</code></pre></div></div>

<h4 id="pod创建多容器">pod创建多容器</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">aa;</span><span class="nv"> </span><span class="s">sleep</span><span class="nv"> </span><span class="s">1000"</span><span class="pi">]</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">c1</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">c2</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
pod1   1/1     Running   0          9m46s
pod2   2/2     Running   0          13s
</code></pre></div></div>

<p>查看标签</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">--show-labels</span>
NAME   READY   STATUS    RESTARTS   AGE   LABELS
pod1   1/1     Running   0          10m   <span class="nv">run</span><span class="o">=</span>pod1
pod2   2/2     Running   0          40s   <span class="nv">run</span><span class="o">=</span>pod2
</code></pre></div></div>

<p>指定标签查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-l</span> <span class="nv">run</span><span class="o">=</span>pod2
NAME   READY   STATUS    RESTARTS   AGE
pod2   2/2     Running   0          67s
</code></pre></div></div>

<h3 id="在pod里执行命令">在pod里执行命令</h3>

<p>kubectl exec pod 名字 – 命令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">ls</span> /usr/share/nginx/html
50x.html
index.html
</code></pre></div></div>

<p>拷贝文件</p>

<p>kubectl cp /path1/fil1 pod:/path2/ 把物理机文件/path1/file1拷贝到pod的path2里</p>

<p>kubectl cp pod:/path1/fil1 /path2/ 把pod的文件path2里 拷贝到物理机/path1/file1</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">cp</span> /etc/hosts pod1:/usr/share/nginx/html
<span class="o">[</span>root@master ~]# kubectl <span class="nb">exec </span>pod1 <span class="nt">--</span> <span class="nb">ls</span> /usr/share/nginx/html
50x.html
hosts
index.html
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">cp </span>pod1:/usr/share/nginx/html/ /tmp
<span class="nb">tar</span>: Removing leading <span class="sb">`</span>/<span class="s1">' from member names
[root@master ~]# ls /tmp/
50x.html 
</span></code></pre></div></div>

<p>进入pod获取bash</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> pod1 <span class="nt">--</span> bash
root@pod1:/# <span class="nb">exit
exit</span>
</code></pre></div></div>

<p>多个pod默认进入第一个</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> pod2 <span class="nt">--</span> bash
Defaulted container <span class="s2">"c1"</span> out of: c1, c2
root@pod2:/# <span class="nb">exit
exit</span>
<span class="o">[</span>root@master ~]# 
</code></pre></div></div>

<p>使用 -c 指定容器名</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> pod2 <span class="nt">-c</span> c2 <span class="nt">--</span> bash 
root@pod2:/# <span class="nb">exit
exit</span>
</code></pre></div></div>

<p>查看pod属性</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl describe pod pod2
Name:         pod2
Namespace:    default
Priority:     0
Node:         node1/192.168.122.202
Start Time:   Mon, 11 Jul 2022 01:35:21 +0800
Labels:       <span class="nv">run</span><span class="o">=</span>pod2
Annotations:  cni.projectcalico.org/containerID: 81dcb5949057c2d0a998f5119020dd76ee12dc2d9faa79e30c00d93709d21e5e
              cni.projectcalico.org/podIP: 10.244.166.134/32
              cni.projectcalico.org/podIPs: 10.244.166.134/32
Status:       Running
IP:           10.244.166.134
IPs:
  IP:  10.244.166.134
Containers:
  c1:
    Container ID:  docker://0449ea9f0ea0921a06b1f11e8ac89414c11db12e28aee93882c5d574906684bb
    Image:         nginx
    Image ID:      docker-pullable://nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31
    Port:          &lt;none&gt;
    Host Port:     &lt;none&gt;
    Command:
      sh
      <span class="nt">-c</span>
      <span class="nb">echo </span>aa<span class="p">;</span> <span class="nb">sleep </span>1000
    State:          Running
      Started:      Mon, 11 Jul 2022 23:55:07 +0800
    Last State:     Terminated
      Reason:       Error
      Exit Code:    137
      Started:      Mon, 11 Jul 2022 01:35:22 +0800
      Finished:     Mon, 11 Jul 2022 01:37:13 +0800
    Ready:          True
    Restart Count:  1
    Environment:    &lt;none&gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-789mj <span class="o">(</span>ro<span class="o">)</span>
  c2:
    Container ID:   docker://39c132c6c5a53c4b1667b44c303e3d25d7280de889bd7bf2509dcde1d2b44623
    Image:          nginx
    Image ID:       docker-pullable://nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31
    Port:           &lt;none&gt;
    Host Port:      &lt;none&gt;
    State:          Running
      Started:      Mon, 11 Jul 2022 23:55:07 +0800
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Mon, 11 Jul 2022 01:35:23 +0800
      Finished:     Mon, 11 Jul 2022 01:37:03 +0800
    Ready:          True
    Restart Count:  1
    Environment:    &lt;none&gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-789mj <span class="o">(</span>ro<span class="o">)</span>
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  kube-api-access-789mj:
    Type:                    Projected <span class="o">(</span>a volume that contains injected data from multiple sources<span class="o">)</span>
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       &lt;nil&gt;
    DownwardAPI:             <span class="nb">true
</span>QoS Class:                   BestEffort
Node-Selectors:              &lt;none&gt;
Tolerations:                 node.kubernetes.io/not-ready:NoExecute <span class="nv">op</span><span class="o">=</span>Exists <span class="k">for </span>300s
                             node.kubernetes.io/unreachable:NoExecute <span class="nv">op</span><span class="o">=</span>Exists <span class="k">for </span>300s
Events:
  Type    Reason          Age                From               Message
  <span class="nt">----</span>    <span class="nt">------</span>          <span class="nt">----</span>               <span class="nt">----</span>               <span class="nt">-------</span>
  Normal  Scheduled       22h                default-scheduler  Successfully assigned default/pod2 to node1
  Normal  Pulled          22h                kubelet            Container image <span class="s2">"nginx"</span> already present on machine
  Normal  Created         22h                kubelet            Created container c1
  Normal  Started         22h                kubelet            Started container c1
  Normal  Pulled          22h                kubelet            Container image <span class="s2">"nginx"</span> already present on machine
  Normal  Created         22h                kubelet            Created container c2
  Normal  Started         22h                kubelet            Started container c2
  Normal  SandboxChanged  13m <span class="o">(</span>x2 over 13m<span class="o">)</span>  kubelet            Pod sandbox changed, it will be killed and re-created.
  Normal  Pulled          13m                kubelet            Container image <span class="s2">"nginx"</span> already present on machine
  Normal  Created         13m                kubelet            Created container c1
  Normal  Started         13m                kubelet            Started container c1
  Normal  Pulled          13m                kubelet            Container image <span class="s2">"nginx"</span> already present on machine
  Normal  Created         13m                kubelet            Created container c2
  Normal  Started         13m                kubelet            Started container c2
</code></pre></div></div>

<p>查看pod输出</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl logs pod1
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking <span class="k">for </span>shell scripts <span class="k">in</span> /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 <span class="k">in</span> /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration <span class="nb">complete</span><span class="p">;</span> ready <span class="k">for </span>start up
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: using the <span class="s2">"epoll"</span> event method
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: nginx/1.21.5
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: built by gcc 10.2.1 20210110 <span class="o">(</span>Debian 10.2.1-6<span class="o">)</span> 
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: OS: Linux 3.10.0-862.el7.x86_64
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: getrlimit<span class="o">(</span>RLIMIT_NOFILE<span class="o">)</span>: 65536:65536
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: start worker processes
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: start worker process 31
2022/07/11 15:55:05 <span class="o">[</span>notice] 1#1: start worker process 32
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl logs pod2
error: a container name must be specified <span class="k">for </span>pod pod2, choose one of: <span class="o">[</span>c1 c2]
<span class="o">[</span>root@master ~]# kubectl logs pod2 <span class="nt">-c</span> c1
aa
</code></pre></div></div>

<p>删除pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl delete pod pod1
pod <span class="s2">"pod1"</span> deleted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl delete <span class="nt">-f</span> pod2.yaml
pod <span class="s2">"pod2"</span> deleted
</code></pre></div></div>

<h4 id="生命周期">生命周期</h4>

<p>增加–force会提高删除pod的速度, 不加慢的原因是 pod的删除有个延期删除,默认是30s,可以通过 terminationGracePeriodSeconds来制定</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">15</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">aa;</span><span class="nv"> </span><span class="s">sleep</span><span class="nv"> </span><span class="s">1000"</span><span class="pi">]</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">c1</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">c2</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>此参数对nginx不起作用</p>

<p>如果pod被强制删除,客户端访问报错，可以使用钩子解决</p>

<p>1、postStart: 创建pod的时候,会随着pod里的主进程同时运行,没有先后顺序</p>

<p>2、preStop: 删除pod的时候,要先运行preStop里的程序,之后再关闭pod.</p>

<p>preStop也必须在terminationGracePeriodSeconds时间内完成.否则会被强制删除</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">pod2</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">600</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">aa;</span><span class="nv"> </span><span class="s">sleep</span><span class="nv"> </span><span class="s">1000"</span><span class="pi">]</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">c1</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">lifecycle</span><span class="pi">:</span>
      <span class="na">preStop</span><span class="pi">:</span>
        <span class="na">exec</span><span class="pi">:</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">/bin/bash"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">/usr/sbin/nginx</span><span class="nv"> </span><span class="s">-s</span><span class="nv"> </span><span class="s">quit"</span><span class="pi">]</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">c2</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<h3 id="创建初始化pod">创建初始化pod</h3>

<h4 id="初始化容器在正式运行容器前执行准备工作">初始化容器,在正式运行容器前执行准备工作</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod3
  name: pod3
spec:
  containers:
  - image: nginx
    name: c1
    imagePullPolicy: IfNotPresent
    resources: <span class="o">{}</span>
  initContainers:
  - image: docker.io/alpine:latest
    name: xx
    imagePullPolicy: IfNotPresent
    <span class="nb">command</span>: <span class="o">[</span><span class="s2">"/bin/sh"</span>,<span class="s2">"-c"</span>,<span class="s2">"/sbin/sysctl -w vm.swappiness=10"</span><span class="o">]</span>
    securityContext:
      privileged: <span class="nb">true
    </span>resources: <span class="o">{}</span>
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: <span class="o">{}</span>
</code></pre></div></div>

<p>里面有两个容器,一个初始化容器xx和一个普通容器c1.xx运行起来，修改pod所在物理机的内核参数</p>

<p>测试</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# <span class="nb">cat</span> /proc/sys/vm/swappiness 
30
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# <span class="nb">cat</span> /proc/sys/vm/swappiness
30
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES
pod3   1/1     Running   0          22s   10.244.104.7   node2   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node2 ~]# <span class="nb">cat</span> /proc/sys/vm/swappiness
10
</code></pre></div></div>

<p>通过初始化容器和普通容器共享数据</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">myapp</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">workdir</span> <span class="c1"># 定义一个workdir的存储卷</span>
    <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">podx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">workdir</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/xx"</span> <span class="c1">#把workdir挂载到容器的/xx目录</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">initContainers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">poda</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">/bin/sh"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span><span class="s2">"</span><span class="s">touch</span><span class="nv"> </span><span class="s">/work-dir/aa.txt"</span><span class="pi">]</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">workdir</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/work-dir"</span> <span class="c1"># 把workdir挂载到容器的/work-dir目录</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>pod名称为myapp, 在pod中创建一个名字为workdir的存储卷.</p>

<p>poda是初始化容器,把存储卷workdir挂载到本容器的/work-dir目录。然后在挂载点/work-dir里创建aa.txt</p>

<p>普通容器podx会把存储卷workdir挂载到本容器的/xx里,访问/xx的时候实际上访问的就是存储卷workdir.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME    READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
myapp   1/1     Running   0          12s   10.244.166.135   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl <span class="nb">exec </span>myapp <span class="nt">-c</span> podx <span class="nt">--</span> <span class="nb">ls</span> /xx
aa.txt
</code></pre></div></div>

<p>删除pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl delete <span class="nt">-f</span> pod3.yaml
pod <span class="s2">"pod3"</span> deleted
<span class="o">[</span>root@master pod]# kubectl delete <span class="nt">-f</span> pod4.yaml
pod <span class="s2">"myapp"</span> deleted
</code></pre></div></div>

<h3 id="创建静态pod">创建静态Pod</h3>

<h4 id="在node上创建">在node上创建</h4>

<p>静态pod 不是由master创建启动,在node上只要启动kubelet，就会自动创建pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# systemctl status kubelet <span class="nt">-l</span>
● kubelet.service - kubelet: The Kubernetes Node Agent
   Loaded: loaded <span class="o">(</span>/usr/lib/systemd/system/kubelet.service<span class="p">;</span> enabled<span class="p">;</span> vendor preset: disabled<span class="o">)</span>
  Drop-In: /usr/lib/systemd/system/kubelet.service.d
           └─10-kubeadm.conf
</code></pre></div></div>

<p>配置文件地址</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
</code></pre></div></div>

<p>编辑文件,追加–pod-manifest-path=/etc/kubernetes/kubelet.d</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Note: This dropin only works with kubeadm and kubelet v1.11+</span>
<span class="o">[</span>Service]
<span class="nv">Environment</span><span class="o">=</span><span class="s2">"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --pod-manifest-path=/etc/kubernetes/kubelet.d"</span>
<span class="nv">Environment</span><span class="o">=</span><span class="s2">"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"</span>
<span class="c"># This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span>
<span class="nv">EnvironmentFile</span><span class="o">=</span>-/var/lib/kubelet/kubeadm-flags.env
<span class="c"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span>
<span class="c"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span>
<span class="nv">EnvironmentFile</span><span class="o">=</span>-/etc/sysconfig/kubelet
<span class="nv">ExecStart</span><span class="o">=</span>
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/kubelet <span class="nv">$KUBELET_KUBECONFIG_ARGS</span> <span class="nv">$KUBELET_CONFIG_ARGS</span> <span class="nv">$KUBELET_KUBEADM_ARGS</span> <span class="nv">$KUBELET_EXTRA_ARGS</span>

</code></pre></div></div>

<p>重启服务</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 ~]# systemctl daemon-reload
<span class="o">[</span>root@node1 ~]# systemctl restart kubelet
<span class="o">[</span>root@node1 pod]# <span class="nb">mkdir</span> <span class="nt">-p</span> /etc/kubernetes/kubelet.d
</code></pre></div></div>

<p>在node1上创建pod</p>

<p>vim /etc/kubernetes/kubelet.d/pod.yaml</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">myrole</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">static-web</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">web</span>   
</code></pre></div></div>

<p>在master上查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods 
NAME               READY   STATUS    RESTARTS   AGE
static-web-node1   1/1     Running   1          57s
</code></pre></div></div>

<p>在node1上删除</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@node1 pod]# <span class="nb">rm</span> <span class="nt">-rf</span> /etc/kubernetes/kubelet.d/pod.yaml 
</code></pre></div></div>

<p>在master上查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods 
No resources found <span class="k">in </span>default namespace.
</code></pre></div></div>

<h4 id="在master上创建">在master上创建</h4>

<p>可以在master上看到 Environment=”KUBELET_CONFIG_ARGS=–config=/var/lib/kubelet/config.yaml”</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# <span class="nb">cat</span> /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
<span class="c"># Note: This dropin only works with kubeadm and kubelet v1.11+</span>
<span class="o">[</span>Service]
<span class="nv">Environment</span><span class="o">=</span><span class="s2">"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"</span>
<span class="nv">Environment</span><span class="o">=</span><span class="s2">"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"</span>
<span class="c"># This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span>
<span class="nv">EnvironmentFile</span><span class="o">=</span>-/var/lib/kubelet/kubeadm-flags.env
<span class="c"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span>
<span class="c"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span>
<span class="nv">EnvironmentFile</span><span class="o">=</span>-/etc/sysconfig/kubelet
<span class="nv">ExecStart</span><span class="o">=</span>
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/kubelet <span class="nv">$KUBELET_KUBECONFIG_ARGS</span> <span class="nv">$KUBELET_CONFIG_ARGS</span> <span class="nv">$KUBELET_KUBEADM_ARGS</span> <span class="nv">$KUBELET_EXTRA_ARGS</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# <span class="nb">grep </span>static /var/lib/kubelet/config.yaml
staticPodPath: /etc/kubernetes/manifests
</code></pre></div></div>

<h3 id="指定pod在指定的节点上运行">指定pod在指定的节点上运行</h3>

<p>给节点添加标签,指定pod在特定的节点上运行</p>

<p>标签格式: key = value</p>

<h4 id="查看节点的标签">查看节点的标签</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get nodes <span class="nt">--show-labels</span>
NAME     STATUS   ROLES                  AGE    VERSION   LABELS
master   Ready    control-plane,master   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>master,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/control-plane<span class="o">=</span>,node-role.kubernetes.io/master<span class="o">=</span>,node.kubernetes.io/exclude-from-external-load-balancers<span class="o">=</span>
node1    Ready    &lt;none&gt;                 4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux
node2    Ready    &lt;none&gt;                 4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node2,kubernetes.io/os<span class="o">=</span>linux
</code></pre></div></div>

<h4 id="查看特定节点的标签">查看特定节点的标签</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get nodes node1 <span class="nt">--show-labels</span>
NAME    STATUS   ROLES    AGE    VERSION   LABELS
node1   Ready    &lt;none&gt;   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux
</code></pre></div></div>

<h4 id="给节点设置标签">给节点设置标签</h4>

<p>kubectl label node 节点名 key=value</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl label node node1 <span class="nv">mytag</span><span class="o">=</span>node1
node/node1 labeled
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get nodes node1 <span class="nt">--show-labels</span>
NAME    STATUS   ROLES    AGE    VERSION   LABELS
node1   Ready    &lt;none&gt;   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux,mytag<span class="o">=</span>node1
</code></pre></div></div>

<h4 id="取消某个节点的标签">取消某个节点的标签</h4>

<p>kubectl label node 节点名 key-</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl label node node1 mytag-
node/node1 labeled
<span class="o">[</span>root@master ~]# kubectl get nodes node1 <span class="nt">--show-labels</span>
NAME    STATUS   ROLES    AGE    VERSION   LABELS
node1   Ready    &lt;none&gt;   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux
</code></pre></div></div>

<h4 id="给所有节点设置标签">给所有节点设置标签</h4>

<p>kubectl label node –all key=value</p>

<p>给nod1设置ROLES为NODE1,node2设置ROLES为NODE2</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl label nodes node1 node-role.kubernetes.io/node1<span class="o">=</span><span class="s2">""</span>
node/node1 labeled
<span class="o">[</span>root@master ~]# kubectl get nodes node1 <span class="nt">--show-labels</span>
NAME    STATUS   ROLES   AGE    VERSION   LABELS
node1   Ready    node1   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/node1<span class="o">=</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl label nodes node2 node-role.kubernetes.io/node2<span class="o">=</span><span class="s2">""</span>
node/node2 labeled
<span class="o">[</span>root@master ~]# kubectl get nodes node2 <span class="nt">--show-labels</span>
NAME    STATUS   ROLES   AGE    VERSION   LABELS
node2   Ready    node2   4d2h   v1.21.1   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node2,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/node2<span class="o">=</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master ~]# kubectl get nodes
NAME     STATUS   ROLES                  AGE    VERSION
master   Ready    control-plane,master   4d2h   v1.21.1
node1    Ready    node1                  4d2h   v1.21.1
node2    Ready    node2                  4d2h   v1.21.1
</code></pre></div></div>

<h4 id="创建指定节点运行的pod">创建指定节点运行的pod</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">web1</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">role</span><span class="pi">:</span>  <span class="s">myrole</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>
    <span class="na">mytag</span><span class="pi">:</span>  <span class="s">node1</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
      <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> podlabel.yaml
pod/web1 created
</code></pre></div></div>

<p>web1只会运行在含有标签为mytag=node1的节点上</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
web1   1/1     Running   0          9s
</code></pre></div></div>

<h4 id="创建在特定节点上运行的pod">创建在特定节点上运行的pod</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">root@master pod</span><span class="pi">]</span><span class="c1"># cat podlabel.yaml </span>
<span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">web1</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">role</span><span class="pi">:</span>  <span class="s">myrole</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>
    <span class="na">mytag</span><span class="pi">:</span>  <span class="s">node1</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
      <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span>  <span class="s">IfNotPresent</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> podlabel.yaml
pod/web1 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
web1   1/1     Running   0          9s
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME   READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
web1   1/1     Running   0          8m12s   10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<h4 id="annotations设置">Annotations设置</h4>

<p>不管node还是pod,包括后面讲述的其他对象(比如deployment),都还有一个属性Annotations。这个属性可以理解为注释</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1
Name:               node1
Roles:              node1
Labels:             beta.kubernetes.io/arch<span class="o">=</span>amd64
                    beta.kubernetes.io/os<span class="o">=</span>linux
                    kubernetes.io/arch<span class="o">=</span>amd64
                    kubernetes.io/hostname<span class="o">=</span>node1
                    kubernetes.io/os<span class="o">=</span>linux
                    <span class="nv">mytag</span><span class="o">=</span>node1
                    node-role.kubernetes.io/node1<span class="o">=</span>
Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
                    node.alpha.kubernetes.io/ttl: 0
                    projectcalico.org/IPv4Address: 192.168.122.202/24
                    projectcalico.org/IPv4IPIPTunnelAddr: 10.244.166.128
                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="nb">true</span>
</code></pre></div></div>

<p>设置Annotations</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl annotate nodes node1 <span class="nv">name</span><span class="o">=</span>yinyaliang
node/node1 annotated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe node node1
Name:               node1
Roles:              node1
Labels:             beta.kubernetes.io/arch<span class="o">=</span>amd64
                    beta.kubernetes.io/os<span class="o">=</span>linux
                    kubernetes.io/arch<span class="o">=</span>amd64
                    kubernetes.io/hostname<span class="o">=</span>node1
                    kubernetes.io/os<span class="o">=</span>linux
                    <span class="nv">mytag</span><span class="o">=</span>node1
                    node-role.kubernetes.io/node1<span class="o">=</span>
Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
                    name: yinyaliang
                    node.alpha.kubernetes.io/ttl: 0
                    projectcalico.org/IPv4Address: 192.168.122.202/24
                    projectcalico.org/IPv4IPIPTunnelAddr: 10.244.166.128
                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="nb">true</span>
</code></pre></div></div>

<h3 id="通过cordon及drain把节点设置为维护模式">通过cordon及drain把节点设置为维护模式</h3>

<h4 id="cordon">cordon</h4>

<p>如果某个节点不可用,可以对节点实施cordon或drain操作.这样节点会标记为SchedulingDisabled.新建的pod就会不再分配到这个节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get nodes
NAME     STATUS   ROLES                  AGE    VERSION
master   Ready    control-plane,master   4d3h   v1.21.1
node1    Ready    node1                  4d2h   v1.21.1
node2    Ready    node2                  4d3h   v1.21.1
</code></pre></div></div>

<p>都为ready，说明节点都可以调度</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl create deployment nginx <span class="nt">--image</span><span class="o">=</span>nginx <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml&gt;d1.yaml
</code></pre></div></div>

<p>修改d1.yaml的replicas为3</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> d1.yaml 
deployment.apps/nginx created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME                     READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
nginx-6799fc88d8-9qrsp   1/1     Running   0          49s   10.244.104.10    node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-nvch7   1/1     Running   0          49s   10.244.104.9     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-rljcr   1/1     Running   0          49s   10.244.104.8     node2   &lt;none&gt;           &lt;none&gt;
web1                     1/1     Running   0          15m   10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>三个都被分配到node2上,把node2标记不可用</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl cordon node2
node/node2 cordoned
</code></pre></div></div>

<p>再次查看</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get nodes
NAME     STATUS                     ROLES                  AGE    VERSION
master   Ready                      control-plane,master   4d3h   v1.21.1
node1    Ready                      node1                  4d2h   v1.21.1
node2    Ready,SchedulingDisabled   node2                  4d3h   v1.21.1
</code></pre></div></div>

<p>扩展deployment为6个副本</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> d1.yaml
deployment.apps/nginx configured
</code></pre></div></div>

<p>或者</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl scale deployment nginx <span class="nt">--replicas</span><span class="o">=</span>6
</code></pre></div></div>

<p>可以看到新建节点都在node1上</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME                     READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
nginx-6799fc88d8-6cxhg   1/1     Running   0          56s     10.244.166.142   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-9qrsp   1/1     Running   0          3m53s   10.244.104.10    node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-hfxch   1/1     Running   0          56s     10.244.166.140   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-nvch7   1/1     Running   0          3m53s   10.244.104.9     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-rljcr   1/1     Running   0          3m53s   10.244.104.8     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-skhmd   1/1     Running   0          56s     10.244.166.141   node1   &lt;none&gt;           &lt;none&gt;
web1                     1/1     Running   0          18m     10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>从node2上删除一个节点测试</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl delete pod nginx-6799fc88d8-9qrsp
pod <span class="s2">"nginx-6799fc88d8-9qrsp"</span> deleted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME                     READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
nginx-6799fc88d8-6cxhg   1/1     Running   0          2m21s   10.244.166.142   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-hfxch   1/1     Running   0          2m21s   10.244.166.140   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-kkwps   1/1     Running   0          22s     10.244.166.143   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-nvch7   1/1     Running   0          5m18s   10.244.104.9     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-rljcr   1/1     Running   0          5m18s   10.244.104.8     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-skhmd   1/1     Running   0          2m21s   10.244.166.141   node1   &lt;none&gt;           &lt;none&gt;
web1                     1/1     Running   0          20m     10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>新节点也在node1上了</p>

<h4 id="drain">drain</h4>

<p>对节点的drain操作和cordon是一样的,但是drain比crodon多一个驱逐的效果 evicted,我们把nginx的deployment的副本设置为4</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl scale deploy nginx <span class="nt">--replicas</span><span class="o">=</span>4
deployment.apps/nginx scaled
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME                     READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
nginx-6799fc88d8-hfxch   1/1     Running   0          4m45s   10.244.166.140   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-nvch7   1/1     Running   0          7m42s   10.244.104.9     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-rljcr   1/1     Running   0          7m42s   10.244.104.8     node2   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-skhmd   1/1     Running   0          4m45s   10.244.166.141   node1   &lt;none&gt;           &lt;none&gt;
web1                     1/1     Running   0          22m     10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>对node2进行drain操作</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl drain node2
node/node2 already cordoned
error: unable to drain node <span class="s2">"node2"</span>, aborting command...

There are pending nodes to be drained:
 node2
error: cannot delete DaemonSet-managed Pods <span class="o">(</span>use <span class="nt">--ignore-daemonsets</span> to ignore<span class="o">)</span>: kube-system/calico-node-54njj, kube-system/kube-proxy-jgsxd
</code></pre></div></div>

<p>报错可以使用–ignore-daemonsets</p>

<p>取消node2的cordon操作</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl uncordon node2
node/node2 uncordoned
</code></pre></div></div>

<p>在对node2做drain操作</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl drain node2 <span class="nt">--ignore-daemonsets</span> <span class="nt">--delete-local-data</span>
Flag <span class="nt">--delete-local-data</span> has been deprecated, This option is deprecated and will be deleted. Use <span class="nt">--delete-emptydir-data</span><span class="nb">.</span>
node/node2 cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-54njj, kube-system/kube-proxy-jgsxd
evicting pod default/nginx-6799fc88d8-rljcr
evicting pod default/nginx-6799fc88d8-nvch7
pod/nginx-6799fc88d8-nvch7 evicted
pod/nginx-6799fc88d8-rljcr evicted
node/node2 evicted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide
NAME                     READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
nginx-6799fc88d8-2l9lt   1/1     Running   0          2m50s   10.244.166.144   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-bhl7w   1/1     Running   0          2m50s   10.244.166.145   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-hfxch   1/1     Running   0          11m     10.244.166.140   node1   &lt;none&gt;           &lt;none&gt;
nginx-6799fc88d8-skhmd   1/1     Running   0          11m     10.244.166.141   node1   &lt;none&gt;           &lt;none&gt;
web1                     1/1     Running   0          28m     10.244.166.139   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>取消drain操作</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl uncordon node2
node/node2 uncordoned
</code></pre></div></div>

<h3 id="配置并查看节点的污点">配置并查看节点的污点</h3>

<p>给节点设置及删除taint,设置operator的值为Equal,以及设置operator的值为Exists</p>

<p>如果我们给某节点设置了taint的话,只有那些设置了tolerations(容忍污点)的pod才能运行到此节点上,所以之前的调度master不会运行pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1 | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'(Roles|Taints)'</span>
Roles:              node1
Taints:             &lt;none&gt;
<span class="o">[</span>root@master pod]# kubectl describe nodes master | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'(Roles|Taints)'</span>
Roles:              control-plane,master
Taints:             node-role.kubernetes.io/master:NoSchedule
</code></pre></div></div>

<h4 id="给节点设置污点">给节点设置污点</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl taint nodes 节点名 <span class="nv">key</span><span class="o">=</span>value:effect   这里effect一般是NoSchedule
</code></pre></div></div>

<p>所有节点</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl taint node <span class="nt">--all</span> <span class="nv">key</span><span class="o">=</span>value:NoSchedule
</code></pre></div></div>

<p>这里的value可以不写</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl taint nodes 节点名 <span class="nv">key</span><span class="o">=</span>:NoSchedule
</code></pre></div></div>

<p>删除</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl taint nodes 节点名 key-
</code></pre></div></div>

<p>为node1设置taint</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl taint nodes node1 <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
node/node1 tainted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1 | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'(Roles|Taints)'</span>
Roles:              node1
Taints:             <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
</code></pre></div></div>

<p>查看所有pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
nginx-6799fc88d8-2l9lt   1/1   Running   0     14m   10.244.166.144   node1   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-bhl7w   1/1   Running   0     14m   10.244.166.145   node1   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-hfxch   1/1   Running   0     22m   10.244.166.140   node1   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-skhmd   1/1   Running   0     22m   10.244.166.141   node1   &lt;none&gt;   &lt;none&gt;
web1                     1/1   Running   0     40m   10.244.166.139   node1   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<p>可以看到设置taint对当前正在运行的pod是不起作用的</p>

<p>把deplyment nginx的副本设置为0再设置为4.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl scale deploy nginx <span class="nt">--replicas</span><span class="o">=</span>0
deployment.apps/nginx scaled
<span class="o">[</span>root@master pod]# kubectl scale deploy nginx <span class="nt">--replicas</span><span class="o">=</span>4
deployment.apps/nginx scaled
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods <span class="nt">-o</span> wide <span class="nt">--no-headers</span>
nginx-6799fc88d8-jkfs5   0/1   ContainerCreating   0     28s   &lt;none&gt;           node2   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-khtnf   0/1   ContainerCreating   0     28s   &lt;none&gt;           node2   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-m9psk   1/1   Running             0     28s   10.244.104.11    node2   &lt;none&gt;   &lt;none&gt;
nginx-6799fc88d8-spqk8   0/1   ContainerCreating   0     28s   &lt;none&gt;           node2   &lt;none&gt;   &lt;none&gt;
web1                     1/1   Running             0     58m   10.244.166.139   node1   &lt;none&gt;   &lt;none&gt;
</code></pre></div></div>

<p>可以看到pod都在node2上运行了</p>

<p>删除nginx</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl delete deploy nginx
deployment.apps <span class="s2">"nginx"</span> deleted
</code></pre></div></div>

<p>如果需要pod在含有taint的节点上运行.则定义pod的时候需要指定toleration属性</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">tolerations</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">key</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">key值"</span>
  <span class="na">operator</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Equal"</span>
  <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">value值"</span>
  <span class="na">effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">值"</span>
</code></pre></div></div>

<p>这里的Equal需要和taint的值一样</p>

<p>Exists可以不指定value的值</p>

<h4 id="设置operator的值为equal">设置operator的值为Equal</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1
Name:               node1
Roles:              node1
Labels:             beta.kubernetes.io/arch<span class="o">=</span>amd64
                    beta.kubernetes.io/os<span class="o">=</span>linux
                    kubernetes.io/arch<span class="o">=</span>amd64
                    kubernetes.io/hostname<span class="o">=</span>node1
                    kubernetes.io/os<span class="o">=</span>linux
                    <span class="nv">mytag</span><span class="o">=</span>node1
                    node-role.kubernetes.io/node1<span class="o">=</span>
Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
                    name: yinyaliang
                    node.alpha.kubernetes.io/ttl: 0
                    projectcalico.org/IPv4Address: 192.168.122.202/24
                    projectcalico.org/IPv4IPIPTunnelAddr: 10.244.166.128
                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="nb">true
</span>CreationTimestamp:  Sun, 10 Jul 2022 20:41:42 +0800
Taints:             <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
</code></pre></div></div>

<p>目前是 node1有标签 有污点</p>

<p>创建pod的yaml文件</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">web2</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">role</span><span class="pi">:</span>  <span class="s">myrole</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>
    <span class="na">mytag</span><span class="pi">:</span>  <span class="s">node1</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
      <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
web2   0/1     Pending   0          6s
</code></pre></div></div>

<p>会停留在pending状态</p>

<p>删除后修改yaml，增加tolerations</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">root@master pod</span><span class="pi">]</span><span class="c1"># cat podtaint.yaml </span>
<span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">web2</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">role</span><span class="pi">:</span>  <span class="s">myrole</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>
    <span class="na">mytag</span><span class="pi">:</span>  <span class="s">node1</span>
  <span class="na">tolerations</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">node1"</span>
    <span class="na">operator</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Equal"</span>
    <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">node1"</span>
    <span class="na">effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">NoSchedule"</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
      <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@master pod]# kubectl get pods -o wide
NAME   READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
web2   1/1     Running   0          13s   10.244.166.146   node1   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>并不是节点设置了taint,pod设置了toleration，这个pod就一定会在此节点上运行. 这里用label来指定pod在node2上运行</p>

<p>删除pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete pods web2
</code></pre></div></div>

<p>删除node1上的taint</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl taint nodes node1 node1-
node/node1 untainted
</code></pre></div></div>

<p>给node1设置多个taint</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl taint nodes node1 <span class="nv">key123</span><span class="o">=</span>value123:NoSchedule
node/node1 tainted
<span class="o">[</span>root@master pod]# kubectl taint nodes node1 <span class="nv">keyxx</span><span class="o">=</span>valuexx:NoSchedule
node/node1 tainted
<span class="o">[</span>root@master pod]# kubectl taint nodes node1 <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
node/node1 tainted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1 | <span class="nb">grep</span> <span class="nt">-E</span> <span class="nt">-A2</span> <span class="s1">'(Roles|Taints)'</span>
Roles:              node1
Labels:             beta.kubernetes.io/arch<span class="o">=</span>amd64
                    beta.kubernetes.io/os<span class="o">=</span>linux
<span class="nt">--</span>
Taints:             <span class="nv">key123</span><span class="o">=</span>value123:NoSchedule
                    <span class="nv">keyxx</span><span class="o">=</span>valuexx:NoSchedule
                    <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
</code></pre></div></div>

<p>在podtaint.yaml不修改的情况下再次创建</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> podtaint.yaml
pod/web2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
web2   0/1     Pending   0          14s
</code></pre></div></div>

<p>如果节点有多个污点则需要pod设置容忍所有的污点才可以在这个节点上运行</p>

<h4 id="operator-的值等于exists的情况">operator 的值等于Exists的情况</h4>

<p>在设置节点taint的时候,如果value的值非空,在pod里的tolerations字段只能写Equal,不能写Exists</p>

<p>取消node1的taint，只保留node1=node1</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl taint nodes node1 key123-
node/node1 untainted
<span class="o">[</span>root@master pod]# kubectl taint nodes node1 keyxx-
node/node1 untainted
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl describe nodes node1 | <span class="nb">grep </span>Taint
Taints:             <span class="nv">node1</span><span class="o">=</span>node1:NoSchedule
</code></pre></div></div>

<p>修改podtaint.yaml，配置operator的值为Exists</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apiVersion:  v1
kind:  Pod
metadata:
  name:  web2
  labels:
    role:  myrole
spec:
  nodeSelector:
    mytag:  node1
  tolerations:
  - key:  <span class="s2">"node1"</span>
    operator: <span class="s2">"Exists"</span>
    value: <span class="s2">"node1"</span>
    effect: <span class="s2">"NoSchedule"</span>
  containers:
    - name:  web
      image:  nginx
      imagePullPolicy: IfNotPresent
</code></pre></div></div>

<p>创建Pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> podtaint.yaml
The Pod <span class="s2">"web2"</span> is invalid: 
<span class="k">*</span> spec.tolerations[0].operator: Invalid value: core.Toleration<span class="o">{</span>Key:<span class="s2">"node1"</span>, Operator:<span class="s2">"Exists"</span>, Value:<span class="s2">"node1"</span>, Effect:<span class="s2">"NoSchedule"</span>, TolerationSeconds:<span class="o">(</span><span class="k">*</span>int64<span class="o">)(</span>nil<span class="o">)}</span>: value must be empty when <span class="sb">`</span>operator<span class="sb">`</span> is <span class="s1">'Exists'</span>
<span class="k">*</span> spec.tolerations: Forbidden: existing toleration can not be modified except its tolerationSeconds
</code></pre></div></div>

<p>如果operator选择的是Exists的话,是不能写value的</p>

<p>修改node1的taint的值</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl taint nodes node1 <span class="nv">node1</span><span class="o">=</span>:NoSchedule <span class="nt">--overwrite</span>
node/node1 modified
</code></pre></div></div>

<p>再修改podtaint.yaml的值</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span>  <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span>  <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>  <span class="s">web2</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">role</span><span class="pi">:</span>  <span class="s">myrole</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">nodeSelector</span><span class="pi">:</span>
    <span class="na">mytag</span><span class="pi">:</span>  <span class="s">node1</span>
  <span class="na">tolerations</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">node1"</span>
    <span class="na">operator</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Exists"</span>
    <span class="na">effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">NoSchedule"</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>  <span class="s">web</span>
      <span class="na">image</span><span class="pi">:</span>  <span class="s">nginx</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
</code></pre></div></div>

<p>创建pod</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl apply <span class="nt">-f</span> podtaint.yaml
pod/web2 created
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl get pods
NAME   READY   STATUS    RESTARTS   AGE
web2   1/1     Running   0          31s
</code></pre></div></div>

<p>清理</p>

<p>删除 web2</p>

<p>清理node1上的taint</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@master pod]# kubectl delete pod web2
pod <span class="s2">"web2"</span> deleted
<span class="o">[</span>root@master pod]# kubectl taint nodes node1 node1-
node/node1 untainted
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[创建和删除pod]]></summary></entry><entry><title type="html">Switch STP</title><link href="/rs-cisco-config-stp-01/" rel="alternate" type="text/html" title="Switch STP" /><published>2022-09-07T00:00:00+08:00</published><updated>2022-09-07T00:00:00+08:00</updated><id>/rs-cisco-config-stp-01</id><content type="html" xml:base="/rs-cisco-config-stp-01/"><![CDATA[<p>STP介绍</p>

<h3 id="生成树协议功能">生成树协议功能:</h3>

<blockquote>
  <p>以太网构建无环逻辑拓扑的网络协议
防止环路及其产生的广播风暴、多帧复用、MAC表不稳定
允许网络设计包含备份链接，保持冗余链路</p>
</blockquote>

<h3 id="三个步骤">三个步骤</h3>

<blockquote>
  <p>选举一个根桥
在非根桥交换机选举根端口
在每条链路上选举指定端口</p>
</blockquote>

<h3 id="生成树术语">生成树术语</h3>

<h4 id="bridge-priority-data-unitbpdu">Bridge Priority Data Unit(BPDU):</h4>
<p>包含桥ID,发送发的桥ID,到根桥的COST值,计时器等，所有的交换机会交换BPDU来选举根桥。桥ID最小的会变为根桥</p>

<h4 id="bridge-id桥id">Bridge ID(桥ID)</h4>
<p>字节的字段，包含2个字节的桥优先级和6个字节的设备MAC 地址，在优先级一致的情况下会参考MAC地址</p>

<h4 id="bridge-priority桥优先级">Bridge Priority(桥优先级)</h4>
<p>默认值32768，范围:0-65535</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spanning-tree vlan 1 priority priority
</code></pre></div></div>

<h4 id="root-bridge根桥">Root Bridge(根桥)</h4>
<p>具有最低的Bridge id的交换机会成为根桥.网络中的流量都会基于根桥选路</p>

<h4 id="path-cost路径开销">Path Cost(路径开销)</h4>
<p>到根桥可能会有多条路径，会依据cost选择最低的一条</p>

<table>
  <thead>
    <tr>
      <th>Speed</th>
      <th>Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>10Mbps</td>
      <td>100</td>
    </tr>
    <tr>
      <td>100Mbps</td>
      <td>19</td>
    </tr>
    <tr>
      <td>1Gbps</td>
      <td>4</td>
    </tr>
    <tr>
      <td>10Gbps</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<h4 id="designated-port指定端口">Designated port(指定端口)</h4>
<p>环路中的每条链路选择一个端口作为指定端口，根桥的所有端口都是指定端口</p>
<blockquote>
  <p>最小的BID(发送者的)
到达根桥最低的路径开销
最低的发送者BID
最低的发送者端口ID</p>
</blockquote>

<h4 id="root-port根端口">Root port(根端口)</h4>
<p>非根桥上选一个端口作为根端口。是到达根桥开销最小的端口，每台设备有一个</p>

<h3 id="根桥的选举过程">根桥的选举过程</h3>
<p>每台交换机假定自己是根桥，并向邻居发送BPDU，包含自身的BID，同时也会接收其它邻居的BPDU。每收到一个BPDU，交换机就会将其与自身的BID比较。 如果优于自身，交换机就会意识到自己不是根桥，否则仍会认为自身是根桥并持续发送BPDU，如果有新的更优的BID交换机加入到网络中，就会被选举为 新的根桥</p>

<h3 id="生成树的类型">生成树的类型</h3>

<h4 id="8021d">802.1D</h4>
<p>它是IEEE开发的一种生成树标准，每个拓扑只选择一个根桥接器。所有流量都在同一路径上流动(到根桥接器的最佳路径)，只支持单个Vlan或lan，它非常慢，因为它需要30s-50s秒来收敛。</p>

<blockquote>
  <p>优点</p>
  <ul>
    <li>对CPU和内存要求低
缺点</li>
    <li>不支持负载均衡</li>
    <li>到达根桥的最佳成本计算的路径可能不是到达网络的最佳路径</li>
  </ul>
</blockquote>

<h4 id="cst">CST</h4>
<p>整个网络只有一个生成树实例，支持多Vlan</p>

<h4 id="per-vlan-spanning-treepvst">Per VLAN Spanning Tree+(PVST+)</h4>
<p>思科专有 ，兼容802.1D和CST,每个VLAN一个生成树</p>
<blockquote>
  <p>优点</p>
  <ul>
    <li>PVST+在为每个VLAN选择根桥接时，对网络性能提供了更多的优化</li>
    <li>带宽消耗小于CST</li>
    <li>最佳的负载均衡
缺点</li>
    <li>50s收敛</li>
    <li>消耗更多的CPU和内存资源</li>
  </ul>
</blockquote>

<h4 id="8021w-rapid-spanning-tree-protocolrstp">802.1w Rapid Spanning Tree Protocol(RSTP)</h4>
<p>IEEE开发的一种标准，具有比CST更快的收敛速度，在拓扑结构中寻找单一根桥。RSTP所需的桥接资源高于CST，但小于PVST+，收敛时间在5s-10s</p>
<blockquote>
  <p>端口状态</p>
  <ul>
    <li>discarding</li>
    <li>learning</li>
    <li>forwarding</li>
  </ul>
</blockquote>

<blockquote>
  <p>端口角色</p>
  <ul>
    <li>替代端口(AP) 根端口的备份,5s内切换</li>
    <li>备份端口(BP) 指定端口的备份，1s内切换</li>
  </ul>
</blockquote>

<h4 id="rapid-per-vlan-spanning-tree-rpvst">Rapid Per VLAN Spanning Tree +(RPVST+)</h4>
<p>Cisco开发，提供了比PVST+更快的收敛速度，每个VLAN 基于802.1w的单独实例。比其它STP标准需要更多的CPU和内存。
和802.1d对比，
报文格式:
4bit的网桥优先级   12bit的扩展系统ID     48bit的MAC地址</p>

<h4 id="8021smultiple-spanning-tree">802.1s(Multiple Spanning Tree)</h4>

<p>IEEE开发，可以对vlan进行分组，并对每个单独的组运行RSTP</p>
<blockquote>
  <p>优点</p>
  <ul>
    <li>可以实现冗余</li>
    <li>负载均衡</li>
    <li>较少的CPU和内存负载</li>
  </ul>
</blockquote>

<blockquote>
  <p>缺点</p>
  <ul>
    <li>配置复杂</li>
  </ul>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>指定模式
<span class="o">(</span>config<span class="o">)</span><span class="c">#spanning-tree mode mst          </span>
配置参数
<span class="o">(</span>config<span class="o">)</span><span class="c">#spanning-tree mst configuration  </span>
<span class="o">(</span>config-mst<span class="o">)</span><span class="c">#name name         非必需</span>
<span class="o">(</span>config-mst<span class="o">)</span><span class="c">#revision rev_num  非必需</span>
<span class="o">(</span>config-mst<span class="o">)</span><span class="c">#instance instance_number vlan range</span>

<span class="o">(</span>config<span class="o">)</span><span class="c">#spanning-tree mst instance_number root primary|secondary   </span>
配置mst的primary和secondary roots
</code></pre></div></div>

<p><img src="/assets/images/stp/stp1.png" /></p>

<h3 id="stp的端口状态">STP的端口状态</h3>

<table>
  <thead>
    <tr>
      <th>STP端口状态</th>
      <th>接收BPDU</th>
      <th>发送BPDU</th>
      <th>学习MAC地址</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bloking</td>
      <td>√</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Listening</td>
      <td>√</td>
      <td>√</td>
      <td> </td>
    </tr>
    <tr>
      <td>Learning</td>
      <td>√</td>
      <td>√</td>
      <td>√</td>
    </tr>
    <tr>
      <td>Forwarding</td>
      <td>√</td>
      <td>√</td>
      <td>√</td>
    </tr>
    <tr>
      <td>Disabled</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="stp稳定机制">STP稳定机制</h3>

<p>UplinkFast 接入层上行链路启用，加快收敛，上行链路收敛速度30-50s变为1s</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>config<span class="o">)</span><span class="c">#spanning-tree uplinkfast</span>
</code></pre></div></div>

<p>BackboneFast 分布层或者核心层交换机启用(根桥和备份根桥)，交换机要有冗余链路，加快收敛 30s左右</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spanning-tree backbonefast
</code></pre></div></div>

<p>PortFast access端口启用加速收敛，1s收敛, 思科私有</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>config-if<span class="o">)</span>spanning-tree portfast
<span class="c"># 端口</span>
<span class="o">(</span>config<span class="o">)</span>spanning-tree portfast default 
<span class="c"># 全局的access接口</span>
<span class="o">(</span>config-if<span class="o">)</span>spnaning-tree portfast trunk
<span class="c"># 链接多个VLAN通信的服务器环境</span>
<span class="o">(</span>config-if<span class="o">)</span><span class="c">#switchport host</span>
<span class="c"># 启用postfast并置为access模式</span>
</code></pre></div></div>

<p>BPDU guard 收到BPDU，端口将处于err-disable状态(access状态的状态收到BPDU)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>config-if<span class="o">)</span> spanning-tree bpduguard <span class="nb">enable</span>
<span class="c"># 端口</span>
<span class="o">(</span>config<span class="o">)</span> spanning-tree portfast bpduguard default
<span class="c"># 全局</span>
<span class="c"># err-disable自动恢复</span>
<span class="o">(</span>config<span class="o">)</span><span class="c">#errdisable recovery cause all</span>
<span class="o">(</span>config<span class="o">)</span><span class="c">#errdisable recovery interval 30-86400</span>
</code></pre></div></div>

<p>BPDU filter 抑制端口上的BPDU，阻止向外发送BPDU并忽略收到的BPDU，配合Postfast</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spanning-tree bpdufilter <span class="nb">enable</span>
<span class="c"># 接口</span>
spanning-tree portfast bpdufilter default
</code></pre></div></div>

<p>ROOT guard  阻止外部交换机成为根桥,启用的端口强制变为指定端口，如果收到更优的BPDU，端口会进入root-inconsistent状态，不会转发流量 ,Root Guard应该配置在所有接入端口中，即接入终端的端口,异常状态会自动恢复</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spanning-tree guard root
</code></pre></div></div>

<p>LOOP guard，单向链路下当非指定端口收不到BPDU时，阻止它成为指定端口，防止环路</p>

<p><img src="/assets/images/stp/stp2.png" /></p>

<ul>
  <li>Loop Guard不能再启用了Root Guard的交换机上使用</li>
  <li>Loop GUard不能再启用了Port Fast或者Dynamic Vlan port上使用</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spanning-tree guard loop
</code></pre></div></div>

<blockquote>
  <p>UplinkFast 和 BackboneFast已经集成到RSTP中</p>
</blockquote>

<h4 id="udld单向链路检测">UDLD(单向链路检测)</h4>

<p>检查设备自身的单向链路，思科私有， UDLD一般和Loop Guard配合使用</p>
<ul>
  <li>普通模式 仅仅将端口标记为不确定</li>
  <li>激进模式 将端口置于err-disable状态</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>config<span class="o">)</span><span class="c">#udld(enable | aggressive)  # 所有光口启用</span>
<span class="o">(</span>config-if<span class="o">)</span><span class="c">#udld port [aggressive]  # 特定光口启用</span>
udld reset <span class="c"># 重置udld关闭的端口</span>
</code></pre></div></div>

<p><img src="/assets/images/stp/stp3.png" /></p>

<ul>
  <li>通常在所有的光纤互联端口开启</li>
  <li>使用激进模式</li>
  <li>全局开启UDLD</li>
</ul>

<h4 id="stp稳定推荐用法">STP稳定推荐用法</h4>
<p>PostFast 终端用户，配合BPDU Guard使用
根保护 所有指定端口和不链接根桥的端口
环路保护 所有根端口和非指定端口
UDLD所有交换机互联的链路上</p>]]></content><author><name>Your Name</name></author><category term="RS" /><summary type="html"><![CDATA[STP介绍]]></summary></entry><entry><title type="html">zabbix 源码分析 another/first network error wait for 15s seconds</title><link href="/monitor-sourcecod-01/" rel="alternate" type="text/html" title="zabbix 源码分析 another/first network error wait for 15s seconds" /><published>2022-09-06T00:00:00+08:00</published><updated>2022-09-06T00:00:00+08:00</updated><id>/monitor-sourcecod-01</id><content type="html" xml:base="/monitor-sourcecod-01/"><![CDATA[<p>从zabbix的源码看another network error, wait for 15s seconds的异常</p>

<h3 id="pollerc">poller.c</h3>

<h4 id="get_values">get_values</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">errcodes</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">SUCCEED</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">NOTSUPPORTED</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">AGENT_ERROR</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">HOST_AVAILABLE_TRUE</span> <span class="o">!=</span> <span class="n">last_available</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">zbx_activate_item_host</span><span class="p">(</span><span class="o">&amp;</span><span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">timespec</span><span class="p">);</span>
                    <span class="n">last_available</span> <span class="o">=</span> <span class="n">HOST_AVAILABLE_TRUE</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">NETWORK_ERROR</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">GATEWAY_ERROR</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">TIMEOUT_ERROR</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">HOST_AVAILABLE_FALSE</span> <span class="o">!=</span> <span class="n">last_available</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">zbx_deactivate_item_host</span><span class="p">(</span><span class="o">&amp;</span><span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">timespec</span><span class="p">,</span> <span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">msg</span><span class="p">);</span>
                    <span class="n">last_available</span> <span class="o">=</span> <span class="n">HOST_AVAILABLE_FALSE</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">CONFIG_ERROR</span><span class="p">:</span>
                <span class="cm">/* nothing to do */</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="n">zbx_error</span><span class="p">(</span><span class="s">"unknown response code returned: %d"</span><span class="p">,</span> <span class="n">errcodes</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                <span class="n">THIS_SHOULD_NEVER_HAPPEN</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<h4 id="zbx_deactivate_item_host">zbx_deactivate_item_host</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span>    <span class="nf">zbx_deactivate_item_host</span><span class="p">(</span><span class="n">DC_ITEM</span> <span class="o">*</span><span class="n">item</span><span class="p">,</span> <span class="n">zbx_timespec_t</span> <span class="o">*</span><span class="n">ts</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span>                       <span class="c1">//   #0</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span>        <span class="o">*</span><span class="n">__function_name</span> <span class="o">=</span> <span class="s">"zbx_deactivate_item_host"</span><span class="p">;</span>
    <span class="n">zbx_host_availability_t</span>    <span class="n">in</span><span class="p">,</span> <span class="n">out</span><span class="p">;</span>                                                                         <span class="c1">//   #1</span>
    <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">agent_type</span><span class="p">;</span>                                                                          <span class="c1">//   #2</span>

    <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_DEBUG</span><span class="p">,</span> <span class="s">"In %s() hostid:"</span> <span class="n">ZBX_FS_UI64</span> <span class="s">" itemid:"</span> <span class="n">ZBX_FS_UI64</span> <span class="s">" type:%d"</span><span class="p">,</span>             <span class="c1">//   #3</span>
            <span class="n">__function_name</span><span class="p">,</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">hostid</span><span class="p">,</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">itemid</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">);</span>

    <span class="n">zbx_host_availability_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">hostid</span><span class="p">);</span>                                                      <span class="c1">//   #4</span>
    <span class="n">zbx_host_availability_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">,</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">hostid</span><span class="p">);</span>                                                      <span class="c1">//   #5</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">ZBX_AGENT_UNKNOWN</span> <span class="o">==</span> <span class="p">(</span><span class="n">agent_type</span> <span class="o">=</span> <span class="n">host_availability_agent_by_item_type</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">)))</span>                <span class="c1">//   #6</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">FAIL</span> <span class="o">==</span> <span class="n">host_get_availability</span><span class="p">(</span><span class="o">&amp;</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">,</span> <span class="n">agent_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">))</span>                                         <span class="c1">//   #7</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">FAIL</span> <span class="o">==</span> <span class="n">DChost_deactivate</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">hostid</span><span class="p">,</span> <span class="n">agent_type</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">],</span>                 <span class="c1">//   #8</span>
            <span class="o">&amp;</span><span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">],</span> <span class="n">error</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">FAIL</span> <span class="o">==</span> <span class="n">db_host_update_availability</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">))</span>                                                           <span class="c1">//   #9</span>
        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>

    <span class="n">host_set_availability</span><span class="p">(</span><span class="o">&amp;</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">,</span> <span class="n">agent_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">out</span><span class="p">);</span>                                                    <span class="c1">//   #10</span>

    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">in</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">errors_from</span><span class="p">)</span>                                                              <span class="c1">//   #11</span>
    <span class="p">{</span>
        <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_WARNING</span><span class="p">,</span> <span class="s">"%s item </span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s"> on host </span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s"> failed:"</span>                                <span class="c1">//   #12</span>
                <span class="s">" first network error, wait for %d seconds"</span><span class="p">,</span>
                <span class="n">zbx_agent_type_string</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">),</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">key_orig</span><span class="p">,</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">host</span><span class="p">,</span>
                <span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">disable_until</span> <span class="o">-</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">HOST_AVAILABLE_FALSE</span> <span class="o">!=</span> <span class="n">in</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">available</span><span class="p">)</span>                                         <span class="c1">//   #13</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">HOST_AVAILABLE_FALSE</span> <span class="o">!=</span> <span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">available</span><span class="p">)</span>                                    <span class="c1">//   #14</span>
            <span class="p">{</span>
                <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_WARNING</span><span class="p">,</span> <span class="s">"%s item </span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s"> on host </span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s"> failed:"</span>                        <span class="c1">//   #15</span>
                        <span class="s">" another network error, wait for %d seconds"</span><span class="p">,</span>
                        <span class="n">zbx_agent_type_string</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">),</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">key_orig</span><span class="p">,</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">host</span><span class="p">,</span>
                        <span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">disable_until</span> <span class="o">-</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_WARNING</span><span class="p">,</span> <span class="s">"temporarily disabling %s checks on host </span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s">:"</span>              <span class="c1">//   #16</span>
                        <span class="s">" host unavailable"</span><span class="p">,</span>
                        <span class="n">zbx_agent_type_string</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">),</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">.</span><span class="n">host</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_DEBUG</span><span class="p">,</span> <span class="s">"%s() errors_from:%d available:%d"</span><span class="p">,</span> <span class="n">__function_name</span><span class="p">,</span>
            <span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">errors_from</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">agent_type</span><span class="p">].</span><span class="n">available</span><span class="p">);</span>
<span class="nl">out:</span>
    <span class="n">zbx_host_availability_clean</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">);</span>
    <span class="n">zbx_host_availability_clean</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>

    <span class="n">zabbix_log</span><span class="p">(</span><span class="n">LOG_LEVEL_DEBUG</span><span class="p">,</span> <span class="s">"End of %s()"</span><span class="p">,</span> <span class="n">__function_name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="zbx_deactivate_item_host-代码的逻辑">zbx_deactivate_item_host 代码的逻辑</h5>

<p>#0  zbx_deactivate_item_host</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="err">主机的一些综合参数</span>
            <span class="c1">//dbcache.h </span>
            <span class="k">typedef</span> <span class="k">struct</span>
            <span class="p">{</span>
                <span class="n">DC_HOST</span>            <span class="n">host</span><span class="p">;</span>
                <span class="n">DC_INTERFACE</span>        <span class="n">interface</span><span class="p">;</span>
                <span class="n">zbx_uint64_t</span>        <span class="n">itemid</span><span class="p">;</span>
                <span class="n">zbx_uint64_t</span>        <span class="n">lastlogsize</span><span class="p">;</span>
                <span class="n">zbx_uint64_t</span>        <span class="n">valuemapid</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">type</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">value_type</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">state</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">snmpv3_securitylevel</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">authtype</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">flags</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">snmpv3_authprotocol</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">snmpv3_privprotocol</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">inventory_link</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">status</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">history</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">trends</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">follow_redirects</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">post_type</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">retrieve_mode</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">request_method</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">output_format</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">verify_peer</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">verify_host</span><span class="p">;</span>
                <span class="kt">unsigned</span> <span class="kt">char</span>        <span class="n">allow_traps</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">key_orig</span><span class="p">[</span><span class="n">ITEM_KEY_LEN</span> <span class="o">*</span> <span class="n">ZBX_MAX_BYTES_IN_UTF8_CHAR</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">units</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">delay</span><span class="p">;</span>
                <span class="kt">int</span>            <span class="n">history_sec</span><span class="p">;</span>
                <span class="kt">int</span>            <span class="n">nextcheck</span><span class="p">;</span>
                <span class="kt">int</span>            <span class="n">lastclock</span><span class="p">;</span>
                <span class="kt">int</span>            <span class="n">mtime</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">trapper_hosts</span><span class="p">[</span><span class="n">ITEM_TRAPPER_HOSTS_LEN_MAX</span><span class="p">];</span>
                <span class="kt">char</span>            <span class="n">logtimefmt</span><span class="p">[</span><span class="n">ITEM_LOGTIMEFMT_LEN_MAX</span><span class="p">];</span>
                <span class="kt">char</span>            <span class="n">snmp_community_orig</span><span class="p">[</span><span class="n">ITEM_SNMP_COMMUNITY_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmp_community</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">snmp_oid_orig</span><span class="p">[</span><span class="n">ITEM_SNMP_OID_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmp_oid</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">snmpv3_securityname_orig</span><span class="p">[</span><span class="n">ITEM_SNMPV3_SECURITYNAME_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmpv3_securityname</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">snmpv3_authpassphrase_orig</span><span class="p">[</span><span class="n">ITEM_SNMPV3_AUTHPASSPHRASE_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmpv3_authpassphrase</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">snmpv3_privpassphrase_orig</span><span class="p">[</span><span class="n">ITEM_SNMPV3_PRIVPASSPHRASE_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmpv3_privpassphrase</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">ipmi_sensor</span><span class="p">[</span><span class="n">ITEM_IPMI_SENSOR_LEN_MAX</span><span class="p">];</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">params</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">username_orig</span><span class="p">[</span><span class="n">ITEM_USERNAME_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">username</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">publickey_orig</span><span class="p">[</span><span class="n">ITEM_PUBLICKEY_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">publickey</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">privatekey_orig</span><span class="p">[</span><span class="n">ITEM_PRIVATEKEY_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">privatekey</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">password_orig</span><span class="p">[</span><span class="n">ITEM_PASSWORD_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">password</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">snmpv3_contextname_orig</span><span class="p">[</span><span class="n">ITEM_SNMPV3_CONTEXTNAME_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">snmpv3_contextname</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">jmx_endpoint_orig</span><span class="p">[</span><span class="n">ITEM_JMX_ENDPOINT_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">jmx_endpoint</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">timeout_orig</span><span class="p">[</span><span class="n">ITEM_TIMEOUT_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">timeout</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">url_orig</span><span class="p">[</span><span class="n">ITEM_URL_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">query_fields_orig</span><span class="p">[</span><span class="n">ITEM_QUERY_FIELDS_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">query_fields</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">posts</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">status_codes_orig</span><span class="p">[</span><span class="n">ITEM_STATUS_CODES_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">status_codes</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">http_proxy_orig</span><span class="p">[</span><span class="n">ITEM_HTTP_PROXY_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">http_proxy</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">headers</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">ssl_cert_file_orig</span><span class="p">[</span><span class="n">ITEM_SSL_CERT_FILE_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">ssl_cert_file</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">ssl_key_file_orig</span><span class="p">[</span><span class="n">ITEM_SSL_KEY_FILE_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">ssl_key_file</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="n">ssl_key_password_orig</span><span class="p">[</span><span class="n">ITEM_SSL_KEY_PASSWORD_LEN_MAX</span><span class="p">],</span> <span class="o">*</span><span class="n">ssl_key_password</span><span class="p">;</span>
                <span class="kt">char</span>            <span class="o">*</span><span class="n">error</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">DC_ITEM</span><span class="p">;</span>
            <span class="c1">//common.h</span>
            <span class="k">typedef</span> <span class="k">struct</span>
            <span class="p">{</span>
                <span class="kt">int</span>    <span class="n">sec</span><span class="p">;</span>    <span class="cm">/* seconds */</span>
                <span class="kt">int</span>    <span class="n">ns</span><span class="p">;</span>    <span class="cm">/* nanoseconds */</span>
            <span class="p">}</span>
            <span class="n">zbx_timespec_t</span><span class="p">;</span>
            
</code></pre></div></div>

<p>#1 定义了两个结构体数组 in 和 out</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1">//db.h</span>
        <span class="k">typedef</span> <span class="k">struct</span>
        <span class="p">{</span>
            <span class="cm">/* flags specifying which fields are set, see ZBX_FLAGS_AGENT_STATUS_* defines */</span>
            <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">flags</span><span class="p">;</span>

            <span class="cm">/* agent availability fields */</span>
            <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">available</span><span class="p">;</span>
            <span class="kt">char</span>        <span class="o">*</span><span class="n">error</span><span class="p">;</span>
            <span class="kt">int</span>        <span class="n">errors_from</span><span class="p">;</span>
            <span class="kt">int</span>        <span class="n">disable_until</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">zbx_agent_availability_t</span><span class="p">;</span>

        <span class="k">typedef</span> <span class="k">struct</span>
        <span class="p">{</span>
            <span class="n">zbx_uint64_t</span>            <span class="n">hostid</span><span class="p">;</span>

            <span class="n">zbx_agent_availability_t</span>    <span class="n">agents</span><span class="p">[</span><span class="n">ZBX_AGENT_MAX</span><span class="p">];</span>         <span class="c1">//这里的ZBX_AGENT_MAX 为4 ，分别代表ZABBIX, SNMP, IPMI, JMX4种类型</span>
        <span class="p">}</span>
        <span class="n">zbx_host_availability_t</span><span class="p">;</span>
</code></pre></div></div>

<p>#2 声明unsigned char agent_type，unsigned char和char的区别是char表示-128-127，unsigned char 表示0-255，这里的255会在后面遇到，所以需要255的这个表示范围</p>

<p>#3 记录DEBUG 的log，如果需要显示这份日志，需要将server端的配置文件debug等级更改为5</p>

<p>#4 初始化主机IN可用性数据</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//dbconfig.c</span>
    <span class="kt">void</span>    <span class="nf">zbx_host_availability_init</span><span class="p">(</span><span class="n">zbx_host_availability_t</span> <span class="o">*</span><span class="n">availability</span><span class="p">,</span> <span class="n">zbx_uint64_t</span> <span class="n">hostid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">availability</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">zbx_host_availability_t</span><span class="p">));</span>
        <span class="n">availability</span><span class="o">-&gt;</span><span class="n">hostid</span> <span class="o">=</span> <span class="n">hostid</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>#5 同#4一样，只不过是OUT</p>

<p>#6 为agent_type赋值，如果agent_type不属于#1中的四种，跳至out处</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="mi">1</span><span class="err">、</span><span class="n">host_availability_agent_by_item_type</span> <span class="err">位于</span><span class="n">poller</span><span class="p">.</span><span class="n">c</span><span class="err">，接收</span><span class="n">item</span><span class="err">的</span><span class="n">type</span><span class="err">字段，用来判断监控类型</span>
    <span class="c1">//poller.c</span>
        <span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="nf">host_availability_agent_by_item_type</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_ZABBIX</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">ZBX_AGENT_ZABBIX</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_SNMPv1</span><span class="p">:</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_SNMPv2c</span><span class="p">:</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_SNMPv3</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">ZBX_AGENT_SNMP</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_IPMI</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">ZBX_AGENT_IPMI</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">ITEM_TYPE_JMX</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">ZBX_AGENT_JMX</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="nl">default:</span>
                    <span class="k">return</span> <span class="n">ZBX_AGENT_UNKNOWN</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="mi">2</span><span class="err">、</span><span class="n">ZBX_AGENT_UNKNOWN</span> <span class="err">常量</span> <span class="err">为</span> <span class="mi">255</span> <span class="err">对应之前的</span> <span class="err">#</span><span class="mi">2</span>
</code></pre></div></div>

<p>#7 根据agent_type来判断主机的可用性，网络设备会匹配到ZBX_AGENT_SNMP，四个值分别代表的意思是</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//poller.c</span>
    <span class="k">static</span> <span class="kt">int</span>    <span class="nf">host_get_availability</span><span class="p">(</span><span class="k">const</span> <span class="n">DC_HOST</span> <span class="o">*</span><span class="n">dc_host</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">agent</span><span class="p">,</span> <span class="n">zbx_host_availability_t</span> <span class="o">*</span><span class="n">ha</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">zbx_agent_availability_t</span>    <span class="o">*</span><span class="n">availability</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ha</span><span class="o">-&gt;</span><span class="n">agents</span><span class="p">[</span><span class="n">agent</span><span class="p">];</span>

        <span class="n">availability</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">=</span> <span class="n">ZBX_FLAGS_AGENT_STATUS</span><span class="p">;</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">agent</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_ZABBIX</span><span class="p">:</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">available</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">available</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="n">zbx_strdup</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">);</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">errors_from</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">disable_until</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">disable_until</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_SNMP</span><span class="p">:</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">available</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_available</span><span class="p">;</span>  <span class="c1">//主机的snmp可用状态</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="n">zbx_strdup</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_error</span><span class="p">);</span>  <span class="c1">//错误信息</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">errors_from</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_errors_from</span><span class="p">;</span>      <span class="c1">//错误发生时间</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">disable_until</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_disable_until</span><span class="p">;</span>  <span class="c1">//下次延迟检测时间</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_IPMI</span><span class="p">:</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">available</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_available</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="n">zbx_strdup</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_error</span><span class="p">);</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">errors_from</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_errors_from</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">disable_until</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_disable_until</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_JMX</span><span class="p">:</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">available</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_available</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="n">zbx_strdup</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_error</span><span class="p">);</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">disable_until</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_disable_until</span><span class="p">;</span>
                <span class="n">availability</span><span class="o">-&gt;</span><span class="n">errors_from</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_errors_from</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">ha</span><span class="o">-&gt;</span><span class="n">hostid</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">hostid</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">SUCCEED</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//dbcache.h</span>
    <span class="k">typedef</span> <span class="k">struct</span>
    <span class="p">{</span>
        <span class="n">zbx_uint64_t</span>    <span class="n">hostid</span><span class="p">;</span>
        <span class="n">zbx_uint64_t</span>    <span class="n">proxy_hostid</span><span class="p">;</span>
        <span class="kt">char</span>        <span class="n">host</span><span class="p">[</span><span class="n">HOST_HOST_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">name</span><span class="p">[</span><span class="n">HOST_NAME_LEN</span> <span class="o">*</span> <span class="n">ZBX_MAX_BYTES_IN_UTF8_CHAR</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">maintenance_status</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">maintenance_type</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">maintenance_from</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">errors_from</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">available</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">disable_until</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">snmp_errors_from</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">snmp_available</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">snmp_disable_until</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">ipmi_errors_from</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">ipmi_available</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">ipmi_disable_until</span><span class="p">;</span>
        <span class="kt">signed</span> <span class="kt">char</span>    <span class="n">ipmi_authtype</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">ipmi_privilege</span><span class="p">;</span>
        <span class="kt">char</span>        <span class="n">ipmi_username</span><span class="p">[</span><span class="n">HOST_IPMI_USERNAME_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">ipmi_password</span><span class="p">[</span><span class="n">HOST_IPMI_PASSWORD_LEN_MAX</span><span class="p">];</span>
        <span class="kt">int</span>        <span class="n">jmx_errors_from</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">jmx_available</span><span class="p">;</span>
        <span class="kt">int</span>        <span class="n">jmx_disable_until</span><span class="p">;</span>
        <span class="kt">char</span>        <span class="n">inventory_mode</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">status</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">tls_connect</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">tls_accept</span><span class="p">;</span>
    <span class="cp">#if defined(HAVE_POLARSSL) || defined(HAVE_GNUTLS) || defined(HAVE_OPENSSL)
</span>        <span class="kt">char</span>        <span class="n">tls_issuer</span><span class="p">[</span><span class="n">HOST_TLS_ISSUER_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">tls_subject</span><span class="p">[</span><span class="n">HOST_TLS_SUBJECT_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">tls_psk_identity</span><span class="p">[</span><span class="n">HOST_TLS_PSK_IDENTITY_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">tls_psk</span><span class="p">[</span><span class="n">HOST_TLS_PSK_LEN_MAX</span><span class="p">];</span>
    <span class="cp">#endif
</span>        <span class="kt">char</span>        <span class="n">error</span><span class="p">[</span><span class="n">HOST_ERROR_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">snmp_error</span><span class="p">[</span><span class="n">HOST_ERROR_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">ipmi_error</span><span class="p">[</span><span class="n">HOST_ERROR_LEN_MAX</span><span class="p">];</span>
        <span class="kt">char</span>        <span class="n">jmx_error</span><span class="p">[</span><span class="n">HOST_ERROR_LEN_MAX</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">DC_HOST</span><span class="p">;</span>
    
    <span class="c1">//db.h</span>
    <span class="cp">#define ZBX_FLAGS_AGENT_STATUS_AVAILABLE    0x00000001
</span>    <span class="cp">#define ZBX_FLAGS_AGENT_STATUS_ERROR        0x00000002
</span>    <span class="cp">#define ZBX_FLAGS_AGENT_STATUS_ERRORS_FROM    0x00000004
</span>    <span class="cp">#define ZBX_FLAGS_AGENT_STATUS_DISABLE_UNTIL    0x00000008
</span>    <span class="cp">#define ZBX_FLAGS_AGENT_STATUS        (ZBX_FLAGS_AGENT_STATUS_AVAILABLE |    \
                        ZBX_FLAGS_AGENT_STATUS_ERROR |        \
                        ZBX_FLAGS_AGENT_STATUS_ERRORS_FROM |    \
                        ZBX_FLAGS_AGENT_STATUS_DISABLE_UNTIL) 
</span>
     
    <span class="c1">//common.h</span>
    <span class="cp">#define    FAIL        -1
</span></code></pre></div></div>

<p>#8  根据agent_type 设置主机状态</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">//dbconfig.c</span>
    <span class="kt">int</span>    <span class="nf">DChost_deactivate</span><span class="p">(</span><span class="n">zbx_uint64_t</span> <span class="n">hostid</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">agent_type</span><span class="p">,</span> <span class="k">const</span> <span class="n">zbx_timespec_t</span> <span class="o">*</span><span class="n">ts</span><span class="p">,</span>
            <span class="n">zbx_agent_availability_t</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="n">zbx_agent_availability_t</span> <span class="o">*</span><span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">error_msg</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span>        <span class="n">ret</span> <span class="o">=</span> <span class="n">FAIL</span><span class="p">,</span> <span class="n">errors_from</span><span class="p">,</span><span class="n">disable_until</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">char</span>    <span class="o">*</span><span class="n">error</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>    <span class="n">available</span><span class="p">;</span>
        <span class="n">ZBX_DC_HOST</span>    <span class="o">*</span><span class="n">dc_host</span><span class="p">;</span>


        <span class="cm">/* don't try deactivating host if the unreachable delay has not passed since the first error */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">CONFIG_UNREACHABLE_DELAY</span> <span class="o">&gt;</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">-</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">)</span> 
            <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>

        <span class="n">WRLOCK_CACHE</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="p">(</span><span class="n">dc_host</span> <span class="o">=</span> <span class="p">(</span><span class="n">ZBX_DC_HOST</span> <span class="o">*</span><span class="p">)</span><span class="n">zbx_hashset_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="o">-&gt;</span><span class="n">hosts</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hostid</span><span class="p">)))</span>
            <span class="k">goto</span> <span class="n">unlock</span><span class="p">;</span>

        <span class="cm">/* Don't try deactivating host if:                */</span>
        <span class="cm">/* - (server, proxy) it's not monitored any more; */</span>
        <span class="cm">/* - (server) it's monitored by proxy.            */</span>
        <span class="k">if</span> <span class="p">((</span><span class="mi">0</span> <span class="o">!=</span> <span class="p">(</span><span class="n">program_type</span> <span class="o">&amp;</span> <span class="n">ZBX_PROGRAM_TYPE_SERVER</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">!=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">proxy_hostid</span><span class="p">)</span> <span class="o">||</span>
                <span class="n">HOST_STATUS_MONITORED</span> <span class="o">!=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">goto</span> <span class="n">unlock</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">DChost_get_agent_availability</span><span class="p">(</span><span class="n">dc_host</span><span class="p">,</span> <span class="n">agent_type</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span>

        <span class="n">available</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">available</span><span class="p">;</span>
        <span class="n">error</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="cm">/* first error, schedule next unreachable check */</span>
            <span class="n">errors_from</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
            <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNREACHABLE_DELAY</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">errors_from</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">;</span>
            <span class="n">disable_until</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">disable_until</span><span class="p">;</span>

            <span class="cm">/* Check if other pollers haven't already attempted deactivating host. */</span>
            <span class="cm">/* In that case should wait the initial unreachable delay before       */</span>
            <span class="cm">/* trying to make it unavailable.                                      */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">CONFIG_UNREACHABLE_DELAY</span> <span class="o">&lt;=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">-</span> <span class="n">errors_from</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="cm">/* repeating error */</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">CONFIG_UNREACHABLE_PERIOD</span> <span class="o">&gt;</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">-</span> <span class="n">errors_from</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="cm">/* leave host available, schedule next unreachable check */</span>
                    <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNREACHABLE_DELAY</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="cm">/* make host unavailable, schedule next unavailable check */</span>
                    <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNAVAILABLE_DELAY</span><span class="p">;</span>
                    <span class="n">available</span> <span class="o">=</span> <span class="n">HOST_AVAILABLE_FALSE</span><span class="p">;</span>
                    <span class="n">error</span> <span class="o">=</span> <span class="n">error_msg</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">zbx_agent_availability_init</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">available</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">errors_from</span><span class="p">,</span> <span class="n">disable_until</span><span class="p">);</span>
        <span class="n">DChost_set_agent_availability</span><span class="p">(</span><span class="n">dc_host</span><span class="p">,</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">,</span> <span class="n">agent_type</span><span class="p">,</span> <span class="n">out</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">ZBX_FLAGS_AGENT_STATUS_NONE</span> <span class="o">!=</span> <span class="n">out</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">)</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">SUCCEED</span><span class="p">;</span>
    <span class="nl">unlock:</span>
        <span class="n">UNLOCK_CACHE</span><span class="p">;</span>
    <span class="nl">out:</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>主要看下这段:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="cm">/* first error, schedule next unreachable check */</span>
            <span class="n">errors_from</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
            <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNREACHABLE_DELAY</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">errors_from</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">;</span>
            <span class="n">disable_until</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">disable_until</span><span class="p">;</span>
 
            <span class="cm">/* Check if other pollers haven't already attempted deactivating host. */</span>
            <span class="cm">/* In that case should wait the initial unreachable delay before       */</span>
            <span class="cm">/* trying to make it unavailable.                                      */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">CONFIG_UNREACHABLE_DELAY</span> <span class="o">&lt;=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">-</span> <span class="n">errors_from</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="cm">/* repeating error */</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">CONFIG_UNREACHABLE_PERIOD</span> <span class="o">&gt;</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">-</span> <span class="n">errors_from</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="cm">/* leave host available, schedule next unreachable check */</span>
                    <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNREACHABLE_DELAY</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="cm">/* make host unavailable, schedule next unavailable check */</span>
                    <span class="n">disable_until</span> <span class="o">=</span> <span class="n">ts</span><span class="o">-&gt;</span><span class="n">sec</span> <span class="o">+</span> <span class="n">CONFIG_UNAVAILABLE_DELAY</span><span class="p">;</span>
                    <span class="n">available</span> <span class="o">=</span> <span class="n">HOST_AVAILABLE_FALSE</span><span class="p">;</span>
                    <span class="n">error</span> <span class="o">=</span> <span class="n">error_msg</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>        <span class="err">如果错误第一次出现</span><span class="o">:</span>
            <span class="err">错误发生时间</span><span class="o">=</span><span class="err">检查的时间戳</span>
            <span class="err">下次的检查时间</span> <span class="o">=</span> <span class="err">时间戳</span><span class="o">+</span><span class="mi">15</span><span class="n">s</span>
        <span class="err">否则</span><span class="o">:</span>
            <span class="err">错误发生时间</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">errors_from</span>
            <span class="err">下次检查时间</span> <span class="o">=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">disable_until</span>
 
            <span class="err">检查的时间戳</span><span class="o">-</span><span class="err">错误发生时间</span><span class="o">&gt;=</span><span class="mi">15</span><span class="n">s</span><span class="o">:</span>
                <span class="err">检查的时间戳</span><span class="o">-</span><span class="err">错误发生时间</span><span class="o">&lt;</span> <span class="mi">45</span><span class="n">s</span><span class="o">:</span>
                    <span class="err">下次的检查时间</span> <span class="o">=</span> <span class="err">检查的时间戳</span><span class="o">+</span><span class="mi">15</span><span class="n">s</span>
                <span class="err">否则</span><span class="o">:</span>
                    <span class="err">下一次检查时间</span> <span class="o">=</span><span class="err">检查的时间戳</span><span class="o">+</span><span class="mi">15</span><span class="n">s</span>
                    <span class="err">主机可用性为不可用</span>
</code></pre></div></div>

<p>用配置文件来解释就是: 如果由于网络等原因没有实现项目的及时监控，第一次的监控间隔为UnreachableDelay时间(15s),如果这次也失败了，那么从第一次失败到本次检查在UnreachablePeriod时间内，会再次在UnreachableDelay时间后监控</p>

<p>#9 更新数据库中的主机可用性信息</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// poller.c</span>
    <span class="k">static</span> <span class="kt">int</span>    <span class="nf">db_host_update_availability</span><span class="p">(</span><span class="k">const</span> <span class="n">zbx_host_availability_t</span> <span class="o">*</span><span class="n">ha</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">char</span>    <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="kt">size_t</span>    <span class="n">sql_alloc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sql_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">SUCCEED</span> <span class="o">==</span> <span class="n">zbx_sql_add_host_availability</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sql</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sql_alloc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sql_offset</span><span class="p">,</span> <span class="n">ha</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">DBbegin</span><span class="p">();</span>
            <span class="n">DBexecute</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">sql</span><span class="p">);</span>
            <span class="n">DBcommit</span><span class="p">();</span>

            <span class="n">zbx_free</span><span class="p">(</span><span class="n">sql</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">SUCCEED</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>#10 根据agent_type设置主机可用性信息</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//poller.c</span>
    <span class="k">static</span> <span class="kt">int</span>    <span class="nf">host_set_availability</span><span class="p">(</span><span class="n">DC_HOST</span> <span class="o">*</span><span class="n">dc_host</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">agent</span><span class="p">,</span> <span class="k">const</span> <span class="n">zbx_host_availability_t</span> <span class="o">*</span><span class="n">ha</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">const</span> <span class="n">zbx_agent_availability_t</span>    <span class="o">*</span><span class="n">availability</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ha</span><span class="o">-&gt;</span><span class="n">agents</span><span class="p">[</span><span class="n">agent</span><span class="p">];</span>
        <span class="kt">unsigned</span> <span class="kt">char</span>            <span class="o">*</span><span class="n">pavailable</span><span class="p">;</span>
        <span class="kt">int</span>                <span class="o">*</span><span class="n">perrors_from</span><span class="p">,</span> <span class="o">*</span><span class="n">pdisable_until</span><span class="p">;</span>
        <span class="kt">char</span>                <span class="o">*</span><span class="n">perror</span><span class="p">;</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">agent</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_ZABBIX</span><span class="p">:</span>
                <span class="n">pavailable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">available</span><span class="p">;</span>
                <span class="n">perror</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">;</span>
                <span class="n">perrors_from</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">;</span>
                <span class="n">pdisable_until</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">disable_until</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_SNMP</span><span class="p">:</span>
                <span class="n">pavailable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_available</span><span class="p">;</span>
                <span class="n">perror</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_error</span><span class="p">;</span>
                <span class="n">perrors_from</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_errors_from</span><span class="p">;</span>
                <span class="n">pdisable_until</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">snmp_disable_until</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_IPMI</span><span class="p">:</span>
                <span class="n">pavailable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_available</span><span class="p">;</span>
                <span class="n">perror</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_error</span><span class="p">;</span>
                <span class="n">perrors_from</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_errors_from</span><span class="p">;</span>
                <span class="n">pdisable_until</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">ipmi_disable_until</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">ZBX_AGENT_JMX</span><span class="p">:</span>
                <span class="n">pavailable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_available</span><span class="p">;</span>
                <span class="n">perror</span> <span class="o">=</span> <span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_error</span><span class="p">;</span>
                <span class="n">pdisable_until</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_disable_until</span><span class="p">;</span>
                <span class="n">perrors_from</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dc_host</span><span class="o">-&gt;</span><span class="n">jmx_errors_from</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="p">(</span><span class="n">availability</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ZBX_FLAGS_AGENT_STATUS_AVAILABLE</span><span class="p">))</span>
            <span class="o">*</span><span class="n">pavailable</span> <span class="o">=</span> <span class="n">availability</span><span class="o">-&gt;</span><span class="n">available</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="p">(</span><span class="n">availability</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ZBX_FLAGS_AGENT_STATUS_ERROR</span><span class="p">))</span>
            <span class="n">zbx_strlcpy</span><span class="p">(</span><span class="n">perror</span><span class="p">,</span> <span class="n">availability</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">,</span> <span class="n">HOST_ERROR_LEN_MAX</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="p">(</span><span class="n">availability</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ZBX_FLAGS_AGENT_STATUS_ERRORS_FROM</span><span class="p">))</span>
            <span class="o">*</span><span class="n">perrors_from</span> <span class="o">=</span> <span class="n">availability</span><span class="o">-&gt;</span><span class="n">errors_from</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="p">(</span><span class="n">availability</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ZBX_FLAGS_AGENT_STATUS_DISABLE_UNTIL</span><span class="p">))</span>
            <span class="o">*</span><span class="n">pdisable_until</span> <span class="o">=</span> <span class="n">availability</span><span class="o">-&gt;</span><span class="n">disable_until</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">SUCCEED</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>#11-16</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#如果是第一次检查：</span>
<span class="c">#   　　 记录日志first network error, wait for 15 seconds</span>
<span class="c">#否则:</span>
<span class="c">#   　　 如果数据库中的主机如果显示可用:</span>
<span class="c">#        　　　　记录日志another network error, wait for 15 seconds</span>
<span class="c">#    　　否则</span>
<span class="c">#        　　　　记录日志temporarily disabling(这是前段页面的绿色图标会变为红色)</span>
</code></pre></div></div>

<p>从上面的代码可以看出，在三中情况下会产生network error, wait for 15s seconds的日志，分别是在poller过程中产生的网络错误，网关问题，或者是检查超时。总结下来就是:zabbix server 与zabbix agentd的连接和数据的收发不能成功或者在取得数据的一系列处理中花费的时间超过了zabbix server 的Timeout参数情况下发生。</p>

<p>从正常取值到出现异常的处理过程是这样的:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>正常取值   UnreachableDelay  UnreachableDelay   UnreachableDelay      UnnavailableDelay        恢复
                  |                                       |                              |
                  |                                       |                              |
                  <span class="nt">-----------------------UnreachablePeriod--------------------------------</span>
    1             2                3                   4                      5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       过程                                        日志                                                               

    1 获取正常监控数据
    2 发生错误                    <span class="nt">------------</span><span class="o">&gt;</span>first network
    3 再次发生错误                <span class="nt">------------</span><span class="o">&gt;</span>another network
    4 置为不可用                  <span class="nt">------------</span><span class="o">&gt;</span>temporarily disabling
    5 恢复                        <span class="nt">------------</span><span class="o">&gt;</span>resuming
</code></pre></div></div>
<p>日志中的15s在配置文件中对应的配置UnreachableDelay,默认为15s，在源码中的位置是server.c中的CONFIG_UNREACHABLE_DELAY，
但注意这个配置不会解决任何network error的问题，只是为计算下一个检查时间提供时间依据。还有大家应该注意到了UnreachableDelay参数和UnreachablePeriod是倍数关系</p>]]></content><author><name>Your Name</name></author><category term="Monitor" /><summary type="html"><![CDATA[从zabbix的源码看another network error, wait for 15s seconds的异常]]></summary></entry><entry><title type="html">CISCO VPN配置备忘</title><link href="/rs-cisco-config-vpn-01/" rel="alternate" type="text/html" title="CISCO VPN配置备忘" /><published>2022-09-06T00:00:00+08:00</published><updated>2022-09-06T00:00:00+08:00</updated><id>/rs-cisco-config-vpn-01</id><content type="html" xml:base="/rs-cisco-config-vpn-01/"><![CDATA[<p>IPSEC, GRE OVER IPSEC, IP SEC REMOTEACCESS, DMVPN 配置</p>

<h4 id="ipsec">IPSEC</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># R2</span>
<span class="c"># IKE第一阶段</span>
<span class="c"># 配置策略 第一个和第二个报文</span>
crypto isakmp policy 10     <span class="c">#策略优先级</span>
encr aes 256                <span class="c">#加密算法 </span>
<span class="nb">hash </span>sha                    <span class="c">#hash算法默认SHA</span>
authentication pre-share    <span class="c">#认证方式 预共享密钥</span>
group 5                     <span class="c">#迪菲.赫尔曼算法的g和P的大小 建议1 2 5</span>
lifetime 3600

<span class="c"># 第三和第四报文会自动计算</span>
<span class="c"># 指定第五和第六个报文  进行身份认证</span>
crypto isakmp key 6 CCIE address 13.1.1.3 <span class="c">#对端的IP地址</span>

<span class="c"># ike第二阶段</span>
<span class="c"># 匹配阶段二的感兴趣流，IPSEC中传输的流量需要在nat中deny</span>
access-list 101 permit ip 192.168.1.0 0.0.0.255  192.168.2.0 0.0.0.255

<span class="c"># 设置转换集MYSET 最好和封装的加密算法一致</span>
crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode tunnel

<span class="c"># 使用Map调用</span>
crypto map MYMAP 10 ipsec-isakmp
<span class="nb">set </span>peer 13.1.1.3
<span class="nb">set </span>transform-set MYSET
match address 101


int Ethernet0/1
crypto map MYMAP


<span class="c"># R3</span>
crypto isakmp policy 10
encr aes 256
<span class="nb">hash </span>sha
authentication pre-share
group 5
lifetime 3600
crypto isakmp key 6 CCIE address 12.1.1.2
crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode tunnel
crypto map MYMAP 10 ipsec-isakmp
<span class="nb">set </span>peer 12.1.1.2
<span class="nb">set </span>transform-set MYSET
match address 101

int e0/2
crypto map MYMAP

access-list 101 permit ip 192.168.2.0 0.0.0.255  192.168.1.0 0.0.0.255

<span class="sb">```</span>bash
show crypto isakmp sa
show run | s cry
show crypto session
</code></pre></div></div>

<h4 id="gre-over-ipsec">GRE OVER IPSEC</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R2
int tun0
tunnel <span class="nb">source </span>12.1.1.2
tunnel des 13.1.1.3
ip address 10.1.1.2 255.255.255.0

router ospf 1
net 192.168.1.0 0.0.0.255 area 0
net 10.1.1.2 0.0.0.0 area 0

crypto isakmp policy 10
encr aes 256
authentication pre-share
group 5
lifetime 3600

crypto isakmp key 6 CCIE address 0.0.0.0

crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode transport

crypto ipsec profile CCIE-PROFILE
<span class="nb">set </span>transform-set MYSET

int tun0
tunnel protection ipsec profile CCIE-PROFILE

<span class="c"># R3</span>
int tun0
tunnel <span class="nb">source </span>13.1.1.3
tunnel des 12.1.1.2 
ip address 10.1.1.3 255.255.255.0

router ospf 1
net 192.168.2.0 0.0.0.255 area 0
net 10.1.1.3 0.0.0.0 area 0

crypto isakmp policy 10
encr aes 256
authentication pre-share
group 5
lifetime 3600

crypto isakmp key 6 CCIE address 0.0.0.0

crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode transport

crypto ipsec profile CCIE-PROFILE
<span class="nb">set </span>transform-set MYSET

int tun0
tunnel protection ipsec profile CCIE-PROFILE
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show crypto isakmp sa
show run | s cry
show crypto session
</code></pre></div></div>

<h4 id="ip-sec-remoteaccess">IP Sec RemoteAccess</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># R2</span>
crypto isakmp policy 10
encr aes 256
authentication pre-share
group 5
lifetime 3600
crypto isakmp key 6 CCIE address 0.0.0.0
crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode tunnel

crypto dynamic TEST 10
<span class="nb">set </span>transform-set MYSET

crypto map MYMAP 10 ipsec-isakmp dynamic TEST

int Ethernet0/1
crypto map MYMAP


<span class="c"># R5</span>
crypto isakmp policy 10
encr aes 256
authentication pre-share
group 5
lifetime 3600
crypto isakmp key 6 CCIE address 12.1.1.2
crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode tunnel

crypto map MYMAP 10 ipsec-isakmp
<span class="nb">set </span>peer 12.1.1.2
<span class="nb">set </span>transform-set MYSET
match address 101

int e0/0
crypto map MYMAP

access-list 101 permit ip 192.168.2.0 0.0.0.255  192.168.1.0 0.0.0.255
</code></pre></div></div>

<h4 id="dmvpn">DMVPN</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># R2</span>
<span class="c"># 配置TUNNEL  source也可以是IP地址</span>
int tunnel0
tunnel <span class="nb">source </span>e0/0   
tunnel mode gre multipoint  
ip address 10.1.1.2 255.255.255.0
<span class="c"># 在tunnel 0下 配置NHRP，总部使用动态方式</span>
ip nhrp map multicast dynamic
ip nhrp network-id 234


<span class="c"># 动态路由协议上的坑</span>
<span class="c"># 1、配置动态路由协议 OSPF,不可以将tunnel的接口通告，否则会有邻居翻滚应为默认是P2P类型</span>
<span class="c"># 解决办法</span>
int tun 0
ip ospf network point-to-multipoint
router ospf 1
router-id 2.2.2.2
net 10.2.2.2 0.0.0.0 area 0
net 10.1.1.0 0.0.0.255 area 0
<span class="c"># 目前从10.1.1.3的去往10.1.1.4的路由的下一条还是10.1.1.2，。需要配置NHRP重定向</span>
int tunnel 0
ip nhrp redirect


<span class="c"># 2、配置EIGRP</span>
router eigrp 234
net 10.0.0.0
<span class="c"># 关闭总部的水平分割</span>
int tunnel 0
no ip split-horizon eigrp 234
<span class="c"># 使分部的下一跳地址不是自己</span>
int tunnel 0
no ip next-hop-self eigrp 234

<span class="c"># 3、配置BGP</span>
<span class="c"># 1个AS，核心要使用路由反射器</span>

<span class="c"># 配置IPSec</span>
crypto isakmp policy 10     
encr aes 256                
<span class="nb">hash </span>sha                   
authentication pre-share    
group 5                     
lifetime 3600
crypto isakmp key 6 CCIE address 0.0.0.0
crypto ipsec transform-set MYSET esp-aes 256 esp-sha-hmac
mode transport

crypto ipsec profile MYPROFILE
<span class="nb">set </span>transform-set MYSET
int tunnel 0
tunnel protection ipsec profile MYPROFILE
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="RS" /><summary type="html"><![CDATA[IPSEC, GRE OVER IPSEC, IP SEC REMOTEACCESS, DMVPN 配置]]></summary></entry><entry><title type="html">bcc c 环境部署</title><link href="/bcc-01/" rel="alternate" type="text/html" title="bcc c 环境部署" /><published>2022-08-29T00:00:00+08:00</published><updated>2022-08-29T00:00:00+08:00</updated><id>/bcc-01</id><content type="html" xml:base="/bcc-01/"><![CDATA[<h4 id="下载kernel">下载kernel</h4>

<p>查看系统版本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
root@yinyaliang-virtual-machine:/usr/src# uname -r

5.8.0-43-generic

</code></pre></div></div>

<p>下载对应版本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/

</code></pre></div></div>

<p>解压放在/usr/src目录下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@yinyaliang-virtual-machine:/usr/src# ll

total 176612

drwxr-xr-x  5 root       root            4096 7月   8 20:06 ./

drwxr-xr-x 14 root       root            4096 2月  10 02:48 ../

drwxrwxr-x 24 root       root            4096 8月   3  2020 linux-5.8/

-rwxrw-rw-  1 yinyaliang yinyaliang 180827693 7月   1 20:07 linux-5.8.tar.gz*

drwxr-xr-x  7 root       root            4096 2月  10 02:50 linux-headers-5.8.0-43-generic/

drwxr-xr-x 24 root       root            4096 2月  10 02:50 linux-hwe-5.8-headers-5.8.0-43/
</code></pre></div></div>

<h4 id="安装依赖">安装依赖</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install libncurses5-dev flex bison libelf-dev binutils-dev libssl-dev 

</code></pre></div></div>

<h4 id="安装clang和llvm">安装clang和llvm</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install clang llvm

</code></pre></div></div>

<h4 id="配置内核">配置内核</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /usr/src/linux-5.8 &amp;&amp; make defconfig

</code></pre></div></div>

<h4 id="解决modpost-not-found-错误">解决modpost: not found 错误</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make modules_prepare 或者  make scripts

</code></pre></div></div>

<h4 id="关联内核头文件">关联内核头文件</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make headers_install

</code></pre></div></div>

<h4 id="编译内核bpf程序样例">编译内核BPF程序样例</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make M=samples/bpf/

</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="BCC" /><summary type="html"><![CDATA[下载kernel]]></summary></entry></feed>